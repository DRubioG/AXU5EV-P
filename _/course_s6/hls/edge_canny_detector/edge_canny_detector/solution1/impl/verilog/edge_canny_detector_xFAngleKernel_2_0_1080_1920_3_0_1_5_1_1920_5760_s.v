// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module edge_canny_detector_xFAngleKernel_2_0_1080_1920_3_0_1_5_1_1920_5760_s (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        gradx2_mat_4367_dout,
        gradx2_mat_4367_empty_n,
        gradx2_mat_4367_read,
        grady2_mat_4370_dout,
        grady2_mat_4370_empty_n,
        grady2_mat_4370_read,
        phase_mat_4372_din,
        phase_mat_4372_full_n,
        phase_mat_4372_write
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_state2 = 4'd2;
parameter    ap_ST_fsm_pp0_stage0 = 4'd4;
parameter    ap_ST_fsm_state6 = 4'd8;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [15:0] gradx2_mat_4367_dout;
input   gradx2_mat_4367_empty_n;
output   gradx2_mat_4367_read;
input  [15:0] grady2_mat_4370_dout;
input   grady2_mat_4370_empty_n;
output   grady2_mat_4370_read;
output  [7:0] phase_mat_4372_din;
input   phase_mat_4372_full_n;
output   phase_mat_4372_write;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg gradx2_mat_4367_read;
reg grady2_mat_4370_read;
reg phase_mat_4372_write;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    gradx2_mat_4367_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] icmp_ln431_reg_310;
reg    grady2_mat_4370_blk_n;
reg    phase_mat_4372_blk_n;
reg    ap_enable_reg_pp0_iter2;
reg   [0:0] icmp_ln431_reg_310_pp0_iter1_reg;
reg   [10:0] empty_63_reg_114;
wire   [0:0] icmp_ln424_fu_125_p2;
wire    ap_CS_fsm_state2;
wire   [10:0] add_ln695_fu_131_p2;
reg   [10:0] add_ln695_reg_305;
wire   [0:0] icmp_ln431_fu_137_p2;
wire    ap_block_state3_pp0_stage0_iter0;
reg    ap_block_state4_pp0_stage0_iter1;
reg    ap_block_state5_pp0_stage0_iter2;
reg    ap_block_pp0_stage0_11001;
wire   [10:0] add_ln695_12_fu_143_p2;
reg    ap_enable_reg_pp0_iter0;
reg  signed [15:0] tmp_V_reg_319;
reg  signed [15:0] tmp_V_8_reg_324;
reg   [0:0] tmp_21_reg_335;
wire   [15:0] trunc_ln468_fu_193_p1;
reg   [15:0] trunc_ln468_reg_340;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state3;
reg   [10:0] empty_reg_103;
reg    ap_block_state1;
wire    ap_CS_fsm_state6;
reg    ap_block_pp0_stage0_01001;
wire  signed [15:0] sext_ln455_fu_149_p0;
wire  signed [15:0] tmp_fu_153_p1;
wire  signed [16:0] sext_ln455_fu_149_p1;
wire   [0:0] tmp_fu_153_p3;
wire   [16:0] sub_ln455_fu_161_p2;
wire  signed [16:0] select_ln455_fu_167_p3;
wire  signed [15:0] tmp_21_fu_179_p1;
wire   [14:0] grp_fu_187_p1;
wire  signed [16:0] sext_ln456_1_fu_197_p1;
wire   [16:0] sub_ln456_fu_200_p2;
wire   [16:0] select_ln456_fu_206_p3;
wire   [31:0] shl_ln_fu_213_p3;
wire   [31:0] grp_fu_187_p2;
wire   [31:0] shl_ln1_fu_227_p3;
wire   [31:0] add_ln468_fu_234_p2;
wire   [15:0] xor_ln472_fu_246_p2;
wire   [0:0] icmp_ln465_fu_221_p2;
wire   [0:0] icmp_ln469_fu_240_p2;
wire   [0:0] xor_ln465_fu_258_p2;
wire   [0:0] and_ln469_fu_264_p2;
wire   [0:0] tmp_22_fu_250_p3;
wire   [0:0] or_ln469_fu_278_p2;
wire   [7:0] select_ln469_fu_270_p3;
wire   [7:0] select_ln469_1_fu_284_p3;
reg    grp_fu_187_ce;
reg   [3:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 4'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
end

edge_canny_detector_mul_17s_15ns_32_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 17 ),
    .din1_WIDTH( 15 ),
    .dout_WIDTH( 32 ))
mul_17s_15ns_32_2_1_U56(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(select_ln455_fu_167_p3),
    .din1(grp_fu_187_p1),
    .ce(grp_fu_187_ce),
    .dout(grp_fu_187_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((icmp_ln424_fu_125_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state3))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((icmp_ln424_fu_125_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state3)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state3);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end else if (((icmp_ln424_fu_125_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln431_fu_137_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        empty_63_reg_114 <= add_ln695_12_fu_143_p2;
    end else if (((icmp_ln424_fu_125_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        empty_63_reg_114 <= 11'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        empty_reg_103 <= add_ln695_reg_305;
    end else if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        empty_reg_103 <= 11'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        add_ln695_reg_305 <= add_ln695_fu_131_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln431_reg_310 <= icmp_ln431_fu_137_p2;
        icmp_ln431_reg_310_pp0_iter1_reg <= icmp_ln431_reg_310;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln431_reg_310 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tmp_21_reg_335 <= tmp_21_fu_179_p1[32'd15];
        tmp_V_8_reg_324 <= grady2_mat_4370_dout;
        tmp_V_reg_319 <= gradx2_mat_4367_dout;
        trunc_ln468_reg_340 <= trunc_ln468_fu_193_p1;
    end
end

always @ (*) begin
    if ((icmp_ln431_fu_137_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state3 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state3 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln424_fu_125_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln424_fu_125_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln431_reg_310 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        gradx2_mat_4367_blk_n = gradx2_mat_4367_empty_n;
    end else begin
        gradx2_mat_4367_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln431_reg_310 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        gradx2_mat_4367_read = 1'b1;
    end else begin
        gradx2_mat_4367_read = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln431_reg_310 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grady2_mat_4370_blk_n = grady2_mat_4370_empty_n;
    end else begin
        grady2_mat_4370_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln431_reg_310 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grady2_mat_4370_read = 1'b1;
    end else begin
        grady2_mat_4370_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_187_ce = 1'b1;
    end else begin
        grp_fu_187_ce = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln431_reg_310_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        phase_mat_4372_blk_n = phase_mat_4372_full_n;
    end else begin
        phase_mat_4372_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln431_reg_310_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        phase_mat_4372_write = 1'b1;
    end else begin
        phase_mat_4372_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln424_fu_125_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln431_fu_137_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0)) & ~((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln431_fu_137_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln468_fu_234_p2 = (shl_ln1_fu_227_p3 + grp_fu_187_p2);

assign add_ln695_12_fu_143_p2 = (empty_63_reg_114 + 11'd1);

assign add_ln695_fu_131_p2 = (empty_reg_103 + 11'd1);

assign and_ln469_fu_264_p2 = (xor_ln465_fu_258_p2 & icmp_ln469_fu_240_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd3];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((icmp_ln431_reg_310_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (phase_mat_4372_full_n == 1'b0)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (((icmp_ln431_reg_310 == 1'd0) & (grady2_mat_4370_empty_n == 1'b0)) | ((icmp_ln431_reg_310 == 1'd0) & (gradx2_mat_4367_empty_n == 1'b0)))));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((icmp_ln431_reg_310_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (phase_mat_4372_full_n == 1'b0)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (((icmp_ln431_reg_310 == 1'd0) & (grady2_mat_4370_empty_n == 1'b0)) | ((icmp_ln431_reg_310 == 1'd0) & (gradx2_mat_4367_empty_n == 1'b0)))));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((icmp_ln431_reg_310_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (phase_mat_4372_full_n == 1'b0)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (((icmp_ln431_reg_310 == 1'd0) & (grady2_mat_4370_empty_n == 1'b0)) | ((icmp_ln431_reg_310 == 1'd0) & (gradx2_mat_4367_empty_n == 1'b0)))));
end

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_block_state3_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state4_pp0_stage0_iter1 = (((icmp_ln431_reg_310 == 1'd0) & (grady2_mat_4370_empty_n == 1'b0)) | ((icmp_ln431_reg_310 == 1'd0) & (gradx2_mat_4367_empty_n == 1'b0)));
end

always @ (*) begin
    ap_block_state5_pp0_stage0_iter2 = ((icmp_ln431_reg_310_pp0_iter1_reg == 1'd0) & (phase_mat_4372_full_n == 1'b0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign grp_fu_187_p1 = 32'd13573;

assign icmp_ln424_fu_125_p2 = ((empty_reg_103 == 11'd1080) ? 1'b1 : 1'b0);

assign icmp_ln431_fu_137_p2 = ((empty_63_reg_114 == 11'd1920) ? 1'b1 : 1'b0);

assign icmp_ln465_fu_221_p2 = (($signed(shl_ln_fu_213_p3) < $signed(grp_fu_187_p2)) ? 1'b1 : 1'b0);

assign icmp_ln469_fu_240_p2 = (($signed(shl_ln_fu_213_p3) > $signed(add_ln468_fu_234_p2)) ? 1'b1 : 1'b0);

assign or_ln469_fu_278_p2 = (icmp_ln465_fu_221_p2 | and_ln469_fu_264_p2);

assign phase_mat_4372_din = ((or_ln469_fu_278_p2[0:0] === 1'b1) ? select_ln469_fu_270_p3 : select_ln469_1_fu_284_p3);

assign select_ln455_fu_167_p3 = ((tmp_fu_153_p3[0:0] === 1'b1) ? sub_ln455_fu_161_p2 : sext_ln455_fu_149_p1);

assign select_ln456_fu_206_p3 = ((tmp_21_reg_335[0:0] === 1'b1) ? sub_ln456_fu_200_p2 : sext_ln456_1_fu_197_p1);

assign select_ln469_1_fu_284_p3 = ((tmp_22_fu_250_p3[0:0] === 1'b1) ? 8'd45 : 8'd135);

assign select_ln469_fu_270_p3 = ((and_ln469_fu_264_p2[0:0] === 1'b1) ? 8'd90 : 8'd0);

assign sext_ln455_fu_149_p0 = gradx2_mat_4367_dout;

assign sext_ln455_fu_149_p1 = sext_ln455_fu_149_p0;

assign sext_ln456_1_fu_197_p1 = tmp_V_8_reg_324;

assign shl_ln1_fu_227_p3 = {{trunc_ln468_reg_340}, {16'd0}};

assign shl_ln_fu_213_p3 = {{select_ln456_fu_206_p3}, {15'd0}};

assign sub_ln455_fu_161_p2 = ($signed(17'd0) - $signed(sext_ln455_fu_149_p1));

assign sub_ln456_fu_200_p2 = ($signed(17'd0) - $signed(sext_ln456_1_fu_197_p1));

assign tmp_21_fu_179_p1 = grady2_mat_4370_dout;

assign tmp_22_fu_250_p3 = xor_ln472_fu_246_p2[32'd15];

assign tmp_fu_153_p1 = gradx2_mat_4367_dout;

assign tmp_fu_153_p3 = tmp_fu_153_p1[32'd15];

assign trunc_ln468_fu_193_p1 = select_ln455_fu_167_p3[15:0];

assign xor_ln465_fu_258_p2 = (icmp_ln465_fu_221_p2 ^ 1'd1);

assign xor_ln472_fu_246_p2 = (tmp_V_reg_319 ^ tmp_V_8_reg_324);

endmodule //edge_canny_detector_xFAngleKernel_2_0_1080_1920_3_0_1_5_1_1920_5760_s
