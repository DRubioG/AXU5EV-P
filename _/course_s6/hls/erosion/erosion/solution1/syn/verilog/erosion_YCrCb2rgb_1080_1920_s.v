// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module erosion_YCrCb2rgb_1080_1920_s (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        gray_dst_4202_dout,
        gray_dst_4202_empty_n,
        gray_dst_4202_read,
        rgb_dst_4200_din,
        rgb_dst_4200_full_n,
        rgb_dst_4200_write
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_pp0_stage0 = 3'd2;
parameter    ap_ST_fsm_state7 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
input  [23:0] gray_dst_4202_dout;
input   gray_dst_4202_empty_n;
output   gray_dst_4202_read;
output  [23:0] rgb_dst_4200_din;
input   rgb_dst_4200_full_n;
output   rgb_dst_4200_write;

reg ap_done;
reg ap_idle;
reg start_write;
reg gray_dst_4202_read;
reg rgb_dst_4200_write;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
reg    gray_dst_4202_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] icmp_ln303_reg_439;
reg    rgb_dst_4200_blk_n;
reg    ap_enable_reg_pp0_iter4;
reg   [0:0] icmp_ln303_reg_439_pp0_iter3_reg;
reg   [20:0] indvar_flatten_reg_95;
wire   [0:0] icmp_ln303_fu_120_p2;
wire    ap_block_state2_pp0_stage0_iter0;
reg    ap_block_state3_pp0_stage0_iter1;
wire    ap_block_state4_pp0_stage0_iter2;
wire    ap_block_state5_pp0_stage0_iter3;
reg    ap_block_state6_pp0_stage0_iter4;
reg    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln303_reg_439_pp0_iter1_reg;
reg   [0:0] icmp_ln303_reg_439_pp0_iter2_reg;
wire   [20:0] add_ln303_fu_126_p2;
reg    ap_enable_reg_pp0_iter0;
reg   [7:0] ycrcb_V_0_reg_448;
reg   [7:0] ycrcb_V_0_reg_448_pp0_iter2_reg;
reg   [7:0] ycrcb_V_0_reg_448_pp0_iter3_reg;
reg    ap_block_state1;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
wire    call_ret_ExtractPixel_fu_106_ap_ready;
wire   [7:0] call_ret_ExtractPixel_fu_106_ap_return_0;
wire   [7:0] call_ret_ExtractPixel_fu_106_ap_return_1;
wire   [7:0] call_ret_ExtractPixel_fu_106_ap_return_2;
wire    rgb_packed_PackPixel_fu_112_ap_ready;
wire   [7:0] rgb_packed_PackPixel_fu_112_p_read1;
wire   [7:0] rgb_packed_PackPixel_fu_112_p_read2;
wire   [7:0] rgb_packed_PackPixel_fu_112_p_read3;
wire   [23:0] rgb_packed_PackPixel_fu_112_ap_return;
reg    ap_block_pp0_stage0_01001;
wire  signed [7:0] xor_ln974_fu_144_p2;
wire  signed [7:0] xor_ln984_fu_158_p2;
wire  signed [24:0] grp_fu_409_p2;
wire   [9:0] trunc_ln_fu_175_p4;
wire  signed [10:0] sext_ln738_fu_184_p1;
wire   [10:0] zext_ln736_fu_172_p1;
wire   [10:0] Value_int_fu_197_p2;
wire   [2:0] tmp_fu_203_p4;
wire   [7:0] trunc_ln738_4_fu_188_p4;
wire   [0:0] icmp_ln740_fu_213_p2;
wire   [0:0] tmp_4_fu_219_p3;
wire   [0:0] or_ln740_fu_240_p2;
wire   [7:0] select_ln740_fu_232_p3;
wire   [7:0] Value_uchar_fu_227_p2;
wire  signed [23:0] grp_fu_417_p2;
wire   [8:0] sat_G1_fu_255_p4;
wire  signed [22:0] grp_fu_424_p2;
wire   [7:0] sat_G2_fu_268_p4;
wire   [9:0] zext_ln989_fu_281_p1;
wire  signed [9:0] sext_ln986_fu_264_p1;
wire   [9:0] sub_ln989_fu_284_p2;
wire  signed [10:0] sext_ln989_fu_290_p1;
wire  signed [10:0] sext_ln987_fu_277_p1;
wire   [10:0] res_fu_294_p2;
wire   [2:0] tmp_5_fu_300_p4;
wire   [0:0] icmp_ln990_fu_310_p2;
wire   [7:0] trunc_ln995_fu_316_p1;
wire  signed [24:0] grp_fu_431_p2;
wire   [9:0] trunc_ln738_5_fu_329_p4;
wire  signed [10:0] sext_ln738_2_fu_338_p1;
wire   [10:0] Value_int_2_fu_351_p2;
wire   [2:0] tmp_6_fu_357_p4;
wire   [7:0] trunc_ln738_6_fu_342_p4;
wire   [0:0] icmp_ln740_2_fu_367_p2;
wire   [0:0] tmp_7_fu_373_p3;
wire   [0:0] or_ln740_2_fu_394_p2;
wire   [7:0] select_ln740_5_fu_386_p3;
wire   [7:0] Value_uchar_9_fu_381_p2;
wire   [16:0] grp_fu_409_p0;
wire   [15:0] grp_fu_417_p0;
wire   [14:0] grp_fu_424_p0;
wire   [16:0] grp_fu_431_p0;
reg    grp_fu_409_ce;
reg    grp_fu_417_ce;
reg    grp_fu_424_ce;
reg    grp_fu_431_ce;
wire    ap_CS_fsm_state7;
reg   [2:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 start_once_reg = 1'b0;
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 3'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
end

erosion_ExtractPixel call_ret_ExtractPixel_fu_106(
    .ap_ready(call_ret_ExtractPixel_fu_106_ap_ready),
    .src_read(gray_dst_4202_dout),
    .ap_return_0(call_ret_ExtractPixel_fu_106_ap_return_0),
    .ap_return_1(call_ret_ExtractPixel_fu_106_ap_return_1),
    .ap_return_2(call_ret_ExtractPixel_fu_106_ap_return_2)
);

erosion_PackPixel rgb_packed_PackPixel_fu_112(
    .ap_ready(rgb_packed_PackPixel_fu_112_ap_ready),
    .p_read1(rgb_packed_PackPixel_fu_112_p_read1),
    .p_read2(rgb_packed_PackPixel_fu_112_p_read2),
    .p_read3(rgb_packed_PackPixel_fu_112_p_read3),
    .ap_return(rgb_packed_PackPixel_fu_112_ap_return)
);

erosion_mul_mul_17ns_8s_25_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 17 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 25 ))
mul_mul_17ns_8s_25_4_1_U37(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_409_p0),
    .din1(xor_ln974_fu_144_p2),
    .ce(grp_fu_409_ce),
    .dout(grp_fu_409_p2)
);

erosion_mul_mul_16ns_8s_24_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 24 ))
mul_mul_16ns_8s_24_4_1_U38(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_417_p0),
    .din1(xor_ln974_fu_144_p2),
    .ce(grp_fu_417_ce),
    .dout(grp_fu_417_p2)
);

erosion_mul_mul_15ns_8s_23_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 15 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 23 ))
mul_mul_15ns_8s_23_4_1_U39(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_424_p0),
    .din1(xor_ln984_fu_158_p2),
    .ce(grp_fu_424_ce),
    .dout(grp_fu_424_p2)
);

erosion_mul_mul_17ns_8s_25_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 17 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 25 ))
mul_mul_17ns_8s_25_4_1_U40(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_431_p0),
    .din1(xor_ln984_fu_158_p2),
    .ce(grp_fu_431_ce),
    .dout(grp_fu_431_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state7)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state2))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state2)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state2);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter4 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((real_start == 1'b1) & (internal_ap_ready == 1'b0))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln303_fu_120_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        indvar_flatten_reg_95 <= add_ln303_fu_126_p2;
    end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten_reg_95 <= 21'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln303_reg_439 <= icmp_ln303_fu_120_p2;
        icmp_ln303_reg_439_pp0_iter1_reg <= icmp_ln303_reg_439;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        icmp_ln303_reg_439_pp0_iter2_reg <= icmp_ln303_reg_439_pp0_iter1_reg;
        icmp_ln303_reg_439_pp0_iter3_reg <= icmp_ln303_reg_439_pp0_iter2_reg;
        ycrcb_V_0_reg_448_pp0_iter2_reg <= ycrcb_V_0_reg_448;
        ycrcb_V_0_reg_448_pp0_iter3_reg <= ycrcb_V_0_reg_448_pp0_iter2_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln303_reg_439 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ycrcb_V_0_reg_448 <= call_ret_ExtractPixel_fu_106_ap_return_0;
    end
end

always @ (*) begin
    if ((icmp_ln303_fu_120_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((real_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln303_reg_439 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        gray_dst_4202_blk_n = gray_dst_4202_empty_n;
    end else begin
        gray_dst_4202_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln303_reg_439 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        gray_dst_4202_read = 1'b1;
    end else begin
        gray_dst_4202_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_409_ce = 1'b1;
    end else begin
        grp_fu_409_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_417_ce = 1'b1;
    end else begin
        grp_fu_417_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_424_ce = 1'b1;
    end else begin
        grp_fu_424_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_431_ce = 1'b1;
    end else begin
        grp_fu_431_ce = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (start_full_n == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((icmp_ln303_reg_439_pp0_iter3_reg == 1'd0) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        rgb_dst_4200_blk_n = rgb_dst_4200_full_n;
    end else begin
        rgb_dst_4200_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln303_reg_439_pp0_iter3_reg == 1'd0) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        rgb_dst_4200_write = 1'b1;
    end else begin
        rgb_dst_4200_write = 1'b0;
    end
end

always @ (*) begin
    if (((real_start == 1'b1) & (start_once_reg == 1'b0))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln303_fu_120_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0)) & ~((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter3 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln303_fu_120_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0)) | ((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter3 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign Value_int_2_fu_351_p2 = ($signed(sext_ln738_2_fu_338_p1) + $signed(zext_ln736_fu_172_p1));

assign Value_int_fu_197_p2 = ($signed(sext_ln738_fu_184_p1) + $signed(zext_ln736_fu_172_p1));

assign Value_uchar_9_fu_381_p2 = (ycrcb_V_0_reg_448_pp0_iter3_reg + trunc_ln738_6_fu_342_p4);

assign Value_uchar_fu_227_p2 = (ycrcb_V_0_reg_448_pp0_iter3_reg + trunc_ln738_4_fu_188_p4);

assign add_ln303_fu_126_p2 = (indvar_flatten_reg_95 + 21'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((icmp_ln303_reg_439_pp0_iter3_reg == 1'd0) & (ap_enable_reg_pp0_iter4 == 1'b1) & (rgb_dst_4200_full_n == 1'b0)) | ((icmp_ln303_reg_439 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (gray_dst_4202_empty_n == 1'b0)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((icmp_ln303_reg_439_pp0_iter3_reg == 1'd0) & (ap_enable_reg_pp0_iter4 == 1'b1) & (rgb_dst_4200_full_n == 1'b0)) | ((icmp_ln303_reg_439 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (gray_dst_4202_empty_n == 1'b0)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((icmp_ln303_reg_439_pp0_iter3_reg == 1'd0) & (ap_enable_reg_pp0_iter4 == 1'b1) & (rgb_dst_4200_full_n == 1'b0)) | ((icmp_ln303_reg_439 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (gray_dst_4202_empty_n == 1'b0)));
end

always @ (*) begin
    ap_block_state1 = ((real_start == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state3_pp0_stage0_iter1 = ((icmp_ln303_reg_439 == 1'd0) & (gray_dst_4202_empty_n == 1'b0));
end

assign ap_block_state4_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state6_pp0_stage0_iter4 = ((icmp_ln303_reg_439_pp0_iter3_reg == 1'd0) & (rgb_dst_4200_full_n == 1'b0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_ready = internal_ap_ready;

assign grp_fu_409_p0 = 25'd45974;

assign grp_fu_417_p0 = 24'd23396;

assign grp_fu_424_p0 = 23'd11272;

assign grp_fu_431_p0 = 25'd58098;

assign icmp_ln303_fu_120_p2 = ((indvar_flatten_reg_95 == 21'd2073600) ? 1'b1 : 1'b0);

assign icmp_ln740_2_fu_367_p2 = (($signed(tmp_6_fu_357_p4) > $signed(3'd0)) ? 1'b1 : 1'b0);

assign icmp_ln740_fu_213_p2 = (($signed(tmp_fu_203_p4) > $signed(3'd0)) ? 1'b1 : 1'b0);

assign icmp_ln990_fu_310_p2 = ((tmp_5_fu_300_p4 != 3'd0) ? 1'b1 : 1'b0);

assign or_ln740_2_fu_394_p2 = (tmp_7_fu_373_p3 | icmp_ln740_2_fu_367_p2);

assign or_ln740_fu_240_p2 = (tmp_4_fu_219_p3 | icmp_ln740_fu_213_p2);

assign res_fu_294_p2 = ($signed(sext_ln989_fu_290_p1) - $signed(sext_ln987_fu_277_p1));

assign rgb_dst_4200_din = rgb_packed_PackPixel_fu_112_ap_return;

assign rgb_packed_PackPixel_fu_112_p_read1 = ((or_ln740_fu_240_p2[0:0] === 1'b1) ? select_ln740_fu_232_p3 : Value_uchar_fu_227_p2);

assign rgb_packed_PackPixel_fu_112_p_read2 = ((icmp_ln990_fu_310_p2[0:0] === 1'b1) ? 8'd255 : trunc_ln995_fu_316_p1);

assign rgb_packed_PackPixel_fu_112_p_read3 = ((or_ln740_2_fu_394_p2[0:0] === 1'b1) ? select_ln740_5_fu_386_p3 : Value_uchar_9_fu_381_p2);

assign sat_G1_fu_255_p4 = {{grp_fu_417_p2[23:15]}};

assign sat_G2_fu_268_p4 = {{grp_fu_424_p2[22:15]}};

assign select_ln740_5_fu_386_p3 = ((icmp_ln740_2_fu_367_p2[0:0] === 1'b1) ? 8'd255 : 8'd0);

assign select_ln740_fu_232_p3 = ((icmp_ln740_fu_213_p2[0:0] === 1'b1) ? 8'd255 : 8'd0);

assign sext_ln738_2_fu_338_p1 = $signed(trunc_ln738_5_fu_329_p4);

assign sext_ln738_fu_184_p1 = $signed(trunc_ln_fu_175_p4);

assign sext_ln986_fu_264_p1 = $signed(sat_G1_fu_255_p4);

assign sext_ln987_fu_277_p1 = $signed(sat_G2_fu_268_p4);

assign sext_ln989_fu_290_p1 = $signed(sub_ln989_fu_284_p2);

assign start_out = real_start;

assign sub_ln989_fu_284_p2 = ($signed(zext_ln989_fu_281_p1) - $signed(sext_ln986_fu_264_p1));

assign tmp_4_fu_219_p3 = Value_int_fu_197_p2[32'd10];

assign tmp_5_fu_300_p4 = {{res_fu_294_p2[10:8]}};

assign tmp_6_fu_357_p4 = {{Value_int_2_fu_351_p2[10:8]}};

assign tmp_7_fu_373_p3 = Value_int_2_fu_351_p2[32'd10];

assign tmp_fu_203_p4 = {{Value_int_fu_197_p2[10:8]}};

assign trunc_ln738_4_fu_188_p4 = {{grp_fu_409_p2[22:15]}};

assign trunc_ln738_5_fu_329_p4 = {{grp_fu_431_p2[24:15]}};

assign trunc_ln738_6_fu_342_p4 = {{grp_fu_431_p2[22:15]}};

assign trunc_ln995_fu_316_p1 = res_fu_294_p2[7:0];

assign trunc_ln_fu_175_p4 = {{grp_fu_409_p2[24:15]}};

assign xor_ln974_fu_144_p2 = (call_ret_ExtractPixel_fu_106_ap_return_1 ^ 8'd128);

assign xor_ln984_fu_158_p2 = (call_ret_ExtractPixel_fu_106_ap_return_2 ^ 8'd128);

assign zext_ln736_fu_172_p1 = ycrcb_V_0_reg_448_pp0_iter3_reg;

assign zext_ln989_fu_281_p1 = ycrcb_V_0_reg_448_pp0_iter3_reg;

endmodule //erosion_YCrCb2rgb_1080_1920_s
