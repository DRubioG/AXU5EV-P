// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module overlaystream_overlyOnMat_1080_1920_s (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        img_src2_4243_dout,
        img_src2_4243_empty_n,
        img_src2_4243_read,
        img_src1_4242_dout,
        img_src1_4242_empty_n,
        img_src1_4242_read,
        img_out_4241_din,
        img_out_4241_full_n,
        img_out_4241_write,
        overly_alpha_dout,
        overly_alpha_empty_n,
        overly_alpha_read,
        overly_x_dout,
        overly_x_empty_n,
        overly_x_read,
        overly_y_dout,
        overly_y_empty_n,
        overly_y_read,
        overly_h_dout,
        overly_h_empty_n,
        overly_h_read,
        overly_w_dout,
        overly_w_empty_n,
        overly_w_read
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_pp0_stage0 = 3'd2;
parameter    ap_ST_fsm_state10 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
input  [23:0] img_src2_4243_dout;
input   img_src2_4243_empty_n;
output   img_src2_4243_read;
input  [7:0] img_src1_4242_dout;
input   img_src1_4242_empty_n;
output   img_src1_4242_read;
output  [23:0] img_out_4241_din;
input   img_out_4241_full_n;
output   img_out_4241_write;
input  [7:0] overly_alpha_dout;
input   overly_alpha_empty_n;
output   overly_alpha_read;
input  [31:0] overly_x_dout;
input   overly_x_empty_n;
output   overly_x_read;
input  [31:0] overly_y_dout;
input   overly_y_empty_n;
output   overly_y_read;
input  [31:0] overly_h_dout;
input   overly_h_empty_n;
output   overly_h_read;
input  [31:0] overly_w_dout;
input   overly_w_empty_n;
output   overly_w_read;

reg ap_done;
reg ap_idle;
reg start_write;
reg img_src2_4243_read;
reg img_src1_4242_read;
reg img_out_4241_write;
reg overly_alpha_read;
reg overly_x_read;
reg overly_y_read;
reg overly_h_read;
reg overly_w_read;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
reg    img_src2_4243_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] icmp_ln59_reg_501;
reg    img_src1_4242_blk_n;
reg    img_out_4241_blk_n;
reg    ap_enable_reg_pp0_iter7;
reg   [0:0] icmp_ln59_reg_501_pp0_iter6_reg;
reg    overly_alpha_blk_n;
reg    overly_x_blk_n;
reg    overly_y_blk_n;
reg    overly_h_blk_n;
reg    overly_w_blk_n;
reg   [20:0] indvar_flatten_reg_139;
reg   [10:0] row_reg_150;
reg   [10:0] col_1_reg_161;
reg   [7:0] overly_alpha_read_reg_474;
reg    ap_block_state1;
reg   [31:0] overly_x_read_reg_479;
reg   [31:0] overly_y_read_reg_484;
reg   [31:0] overly_h_read_reg_490;
reg   [31:0] overly_w_read_reg_496;
wire   [0:0] icmp_ln59_fu_186_p2;
wire    ap_block_state2_pp0_stage0_iter0;
reg    ap_block_state3_pp0_stage0_iter1;
wire    ap_block_state4_pp0_stage0_iter2;
wire    ap_block_state5_pp0_stage0_iter3;
wire    ap_block_state6_pp0_stage0_iter4;
wire    ap_block_state7_pp0_stage0_iter5;
wire    ap_block_state8_pp0_stage0_iter6;
reg    ap_block_state9_pp0_stage0_iter7;
reg    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln59_reg_501_pp0_iter1_reg;
reg   [0:0] icmp_ln59_reg_501_pp0_iter2_reg;
reg   [0:0] icmp_ln59_reg_501_pp0_iter3_reg;
reg   [0:0] icmp_ln59_reg_501_pp0_iter4_reg;
reg   [0:0] icmp_ln59_reg_501_pp0_iter5_reg;
wire   [20:0] add_ln59_fu_192_p2;
reg    ap_enable_reg_pp0_iter0;
wire   [10:0] select_ln59_2_fu_278_p3;
reg   [7:0] tmp_V_1_reg_515;
reg   [7:0] tmp_V_1_reg_515_pp0_iter2_reg;
wire   [7:0] select_ln68_fu_324_p3;
reg   [7:0] select_ln68_reg_520;
reg   [7:0] select_ln68_reg_520_pp0_iter2_reg;
wire   [15:0] zext_ln215_fu_349_p1;
wire   [10:0] col_fu_365_p2;
wire   [16:0] zext_ln1350_fu_383_p1;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_flush_enable;
reg    ap_enable_reg_pp0_iter2;
reg    ap_condition_pp0_exit_iter1_state3;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
wire    call_ret_i_ExtractPixel_1_fu_172_ap_ready;
wire   [7:0] call_ret_i_ExtractPixel_1_fu_172_ap_return_0;
wire   [7:0] call_ret_i_ExtractPixel_1_fu_172_ap_return_1;
wire   [7:0] call_ret_i_ExtractPixel_1_fu_172_ap_return_2;
wire    pixelMix_PackPixel_fu_178_ap_ready;
wire   [7:0] pixelMix_PackPixel_fu_178_p_read;
wire   [7:0] pixelMix_PackPixel_fu_178_p_read1;
wire   [7:0] pixelMix_PackPixel_fu_178_p_read2;
wire   [23:0] pixelMix_PackPixel_fu_178_ap_return;
reg    ap_block_pp0_stage0_01001;
wire   [31:0] zext_ln59_fu_198_p1;
wire   [0:0] ult_fu_202_p2;
wire   [0:0] notrhs_i_fu_213_p2;
wire   [0:0] rev26_fu_207_p2;
wire   [0:0] icmp_ln62_fu_224_p2;
wire   [10:0] add_ln59_1_fu_238_p2;
wire   [31:0] zext_ln59_1_fu_244_p1;
wire   [0:0] ult27_fu_248_p2;
wire   [0:0] notrhs_i_mid1_fu_259_p2;
wire   [0:0] rev28_fu_253_p2;
wire   [0:0] and_ln68_3_fu_264_p2;
wire   [0:0] and_ln68_fu_218_p2;
wire   [10:0] select_ln59_fu_230_p3;
wire   [31:0] zext_ln62_fu_286_p1;
wire   [0:0] icmp_ln886_fu_290_p2;
wire   [0:0] icmp_ln894_fu_301_p2;
wire   [0:0] xor_ln886_fu_295_p2;
wire   [0:0] xor_ln894_fu_306_p2;
wire   [0:0] and_ln68_2_fu_312_p2;
wire   [0:0] select_ln59_1_fu_270_p3;
wire   [0:0] and_ln68_1_fu_318_p2;
wire   [7:0] xor_ln1351_fu_343_p2;
wire   [7:0] mul_ln1349_1_fu_377_p0;
wire   [7:0] mul_ln1349_1_fu_377_p1;
wire   [15:0] mul_ln1349_1_fu_377_p2;
wire   [16:0] grp_fu_426_p3;
wire   [16:0] grp_fu_435_p3;
wire   [16:0] grp_fu_444_p3;
wire   [34:0] grp_fu_453_p2;
wire   [34:0] grp_fu_460_p2;
wire   [34:0] grp_fu_467_p2;
wire   [7:0] grp_fu_426_p0;
wire   [7:0] grp_fu_426_p1;
wire   [15:0] grp_fu_426_p2;
wire   [7:0] grp_fu_435_p0;
wire   [7:0] grp_fu_435_p1;
wire   [15:0] grp_fu_435_p2;
wire   [7:0] grp_fu_444_p0;
wire   [7:0] grp_fu_444_p1;
wire   [15:0] grp_fu_444_p2;
wire   [16:0] grp_fu_453_p0;
wire   [18:0] grp_fu_453_p1;
wire   [16:0] grp_fu_460_p0;
wire   [18:0] grp_fu_460_p1;
wire   [16:0] grp_fu_467_p0;
wire   [18:0] grp_fu_467_p1;
reg    grp_fu_426_ce;
reg    grp_fu_435_ce;
reg    grp_fu_444_ce;
reg    grp_fu_453_ce;
reg    grp_fu_460_ce;
reg    grp_fu_467_ce;
wire    ap_CS_fsm_state10;
reg   [2:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire   [15:0] grp_fu_426_p10;
wire   [15:0] grp_fu_435_p10;
wire   [15:0] grp_fu_444_p10;
wire   [34:0] grp_fu_453_p00;
wire   [34:0] grp_fu_460_p00;
wire   [34:0] grp_fu_467_p00;
wire   [15:0] mul_ln1349_1_fu_377_p00;
wire   [15:0] mul_ln1349_1_fu_377_p10;

// power-on initialization
initial begin
#0 start_once_reg = 1'b0;
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 3'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
end

overlaystream_ExtractPixel_1 call_ret_i_ExtractPixel_1_fu_172(
    .ap_ready(call_ret_i_ExtractPixel_1_fu_172_ap_ready),
    .src_read(img_src2_4243_dout),
    .ap_return_0(call_ret_i_ExtractPixel_1_fu_172_ap_return_0),
    .ap_return_1(call_ret_i_ExtractPixel_1_fu_172_ap_return_1),
    .ap_return_2(call_ret_i_ExtractPixel_1_fu_172_ap_return_2)
);

overlaystream_PackPixel pixelMix_PackPixel_fu_178(
    .ap_ready(pixelMix_PackPixel_fu_178_ap_ready),
    .p_read(pixelMix_PackPixel_fu_178_p_read),
    .p_read1(pixelMix_PackPixel_fu_178_p_read1),
    .p_read2(pixelMix_PackPixel_fu_178_p_read2),
    .ap_return(pixelMix_PackPixel_fu_178_ap_return)
);

overlaystream_mul_8ns_8ns_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 16 ))
mul_8ns_8ns_16_1_1_U34(
    .din0(mul_ln1349_1_fu_377_p0),
    .din1(mul_ln1349_1_fu_377_p1),
    .dout(mul_ln1349_1_fu_377_p2)
);

overlaystream_mac_muladd_8ns_8ns_16ns_17_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 17 ))
mac_muladd_8ns_8ns_16ns_17_4_1_U35(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_426_p0),
    .din1(grp_fu_426_p1),
    .din2(grp_fu_426_p2),
    .ce(grp_fu_426_ce),
    .dout(grp_fu_426_p3)
);

overlaystream_mac_muladd_8ns_8ns_16ns_17_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 17 ))
mac_muladd_8ns_8ns_16ns_17_4_1_U36(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_435_p0),
    .din1(grp_fu_435_p1),
    .din2(grp_fu_435_p2),
    .ce(grp_fu_435_ce),
    .dout(grp_fu_435_p3)
);

overlaystream_mac_muladd_8ns_8ns_16ns_17_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 17 ))
mac_muladd_8ns_8ns_16ns_17_4_1_U37(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_444_p0),
    .din1(grp_fu_444_p1),
    .din2(grp_fu_444_p2),
    .ce(grp_fu_444_ce),
    .dout(grp_fu_444_p3)
);

overlaystream_mul_mul_17ns_19ns_35_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 17 ),
    .din1_WIDTH( 19 ),
    .dout_WIDTH( 35 ))
mul_mul_17ns_19ns_35_4_1_U38(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_453_p0),
    .din1(grp_fu_453_p1),
    .ce(grp_fu_453_ce),
    .dout(grp_fu_453_p2)
);

overlaystream_mul_mul_17ns_19ns_35_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 17 ),
    .din1_WIDTH( 19 ),
    .dout_WIDTH( 35 ))
mul_mul_17ns_19ns_35_4_1_U39(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_460_p0),
    .din1(grp_fu_460_p1),
    .ce(grp_fu_460_ce),
    .dout(grp_fu_460_p2)
);

overlaystream_mul_mul_17ns_19ns_35_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 17 ),
    .din1_WIDTH( 19 ),
    .dout_WIDTH( 35 ))
mul_mul_17ns_19ns_35_4_1_U40(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_467_p0),
    .din1(grp_fu_467_p1),
    .ce(grp_fu_467_ce),
    .dout(grp_fu_467_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state10)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_pp0_flush_enable)) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((~((real_start == 1'b0) | (overly_w_empty_n == 1'b0) | (overly_h_empty_n == 1'b0) | (overly_y_empty_n == 1'b0) | (overly_x_empty_n == 1'b0) | (overly_alpha_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter1_state3)) begin
                ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter0;
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end else if ((~((real_start == 1'b0) | (overly_w_empty_n == 1'b0) | (overly_h_empty_n == 1'b0) | (overly_y_empty_n == 1'b0) | (overly_x_empty_n == 1'b0) | (overly_alpha_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter7 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((real_start == 1'b1) & (internal_ap_ready == 1'b0))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln59_reg_501 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        col_1_reg_161 <= col_fu_365_p2;
    end else if ((~((real_start == 1'b0) | (overly_w_empty_n == 1'b0) | (overly_h_empty_n == 1'b0) | (overly_y_empty_n == 1'b0) | (overly_x_empty_n == 1'b0) | (overly_alpha_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        col_1_reg_161 <= 11'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln59_fu_186_p2 == 1'd0))) begin
        indvar_flatten_reg_139 <= add_ln59_fu_192_p2;
    end else if ((~((real_start == 1'b0) | (overly_w_empty_n == 1'b0) | (overly_h_empty_n == 1'b0) | (overly_y_empty_n == 1'b0) | (overly_x_empty_n == 1'b0) | (overly_alpha_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten_reg_139 <= 21'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln59_reg_501 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        row_reg_150 <= select_ln59_2_fu_278_p3;
    end else if ((~((real_start == 1'b0) | (overly_w_empty_n == 1'b0) | (overly_h_empty_n == 1'b0) | (overly_y_empty_n == 1'b0) | (overly_x_empty_n == 1'b0) | (overly_alpha_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        row_reg_150 <= 11'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln59_reg_501 <= icmp_ln59_fu_186_p2;
        icmp_ln59_reg_501_pp0_iter1_reg <= icmp_ln59_reg_501;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        icmp_ln59_reg_501_pp0_iter2_reg <= icmp_ln59_reg_501_pp0_iter1_reg;
        icmp_ln59_reg_501_pp0_iter3_reg <= icmp_ln59_reg_501_pp0_iter2_reg;
        icmp_ln59_reg_501_pp0_iter4_reg <= icmp_ln59_reg_501_pp0_iter3_reg;
        icmp_ln59_reg_501_pp0_iter5_reg <= icmp_ln59_reg_501_pp0_iter4_reg;
        icmp_ln59_reg_501_pp0_iter6_reg <= icmp_ln59_reg_501_pp0_iter5_reg;
        select_ln68_reg_520_pp0_iter2_reg <= select_ln68_reg_520;
        tmp_V_1_reg_515_pp0_iter2_reg <= tmp_V_1_reg_515;
    end
end

always @ (posedge ap_clk) begin
    if ((~((real_start == 1'b0) | (overly_w_empty_n == 1'b0) | (overly_h_empty_n == 1'b0) | (overly_y_empty_n == 1'b0) | (overly_x_empty_n == 1'b0) | (overly_alpha_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        overly_alpha_read_reg_474 <= overly_alpha_dout;
        overly_h_read_reg_490 <= overly_h_dout;
        overly_w_read_reg_496 <= overly_w_dout;
        overly_x_read_reg_479 <= overly_x_dout;
        overly_y_read_reg_484 <= overly_y_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln59_reg_501 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        select_ln68_reg_520 <= select_ln68_fu_324_p3;
        tmp_V_1_reg_515 <= img_src1_4242_dout;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_condition_pp0_exit_iter1_state3 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter1_state3 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln59_fu_186_p2 == 1'd1))) begin
        ap_condition_pp0_flush_enable = 1'b1;
    end else begin
        ap_condition_pp0_flush_enable = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((real_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_426_ce = 1'b1;
    end else begin
        grp_fu_426_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_435_ce = 1'b1;
    end else begin
        grp_fu_435_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_444_ce = 1'b1;
    end else begin
        grp_fu_444_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_453_ce = 1'b1;
    end else begin
        grp_fu_453_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_460_ce = 1'b1;
    end else begin
        grp_fu_460_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_467_ce = 1'b1;
    end else begin
        grp_fu_467_ce = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln59_reg_501_pp0_iter6_reg == 1'd0) & (ap_enable_reg_pp0_iter7 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        img_out_4241_blk_n = img_out_4241_full_n;
    end else begin
        img_out_4241_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln59_reg_501_pp0_iter6_reg == 1'd0) & (ap_enable_reg_pp0_iter7 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        img_out_4241_write = 1'b1;
    end else begin
        img_out_4241_write = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln59_reg_501 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        img_src1_4242_blk_n = img_src1_4242_empty_n;
    end else begin
        img_src1_4242_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln59_reg_501 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        img_src1_4242_read = 1'b1;
    end else begin
        img_src1_4242_read = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln59_reg_501 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        img_src2_4243_blk_n = img_src2_4243_empty_n;
    end else begin
        img_src2_4243_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln59_reg_501 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        img_src2_4243_read = 1'b1;
    end else begin
        img_src2_4243_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        overly_alpha_blk_n = overly_alpha_empty_n;
    end else begin
        overly_alpha_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (overly_w_empty_n == 1'b0) | (overly_h_empty_n == 1'b0) | (overly_y_empty_n == 1'b0) | (overly_x_empty_n == 1'b0) | (overly_alpha_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        overly_alpha_read = 1'b1;
    end else begin
        overly_alpha_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        overly_h_blk_n = overly_h_empty_n;
    end else begin
        overly_h_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (overly_w_empty_n == 1'b0) | (overly_h_empty_n == 1'b0) | (overly_y_empty_n == 1'b0) | (overly_x_empty_n == 1'b0) | (overly_alpha_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        overly_h_read = 1'b1;
    end else begin
        overly_h_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        overly_w_blk_n = overly_w_empty_n;
    end else begin
        overly_w_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (overly_w_empty_n == 1'b0) | (overly_h_empty_n == 1'b0) | (overly_y_empty_n == 1'b0) | (overly_x_empty_n == 1'b0) | (overly_alpha_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        overly_w_read = 1'b1;
    end else begin
        overly_w_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        overly_x_blk_n = overly_x_empty_n;
    end else begin
        overly_x_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (overly_w_empty_n == 1'b0) | (overly_h_empty_n == 1'b0) | (overly_y_empty_n == 1'b0) | (overly_x_empty_n == 1'b0) | (overly_alpha_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        overly_x_read = 1'b1;
    end else begin
        overly_x_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        overly_y_blk_n = overly_y_empty_n;
    end else begin
        overly_y_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (overly_w_empty_n == 1'b0) | (overly_h_empty_n == 1'b0) | (overly_y_empty_n == 1'b0) | (overly_x_empty_n == 1'b0) | (overly_alpha_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        overly_y_read = 1'b1;
    end else begin
        overly_y_read = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (start_full_n == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((real_start == 1'b1) & (start_once_reg == 1'b0))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((real_start == 1'b0) | (overly_w_empty_n == 1'b0) | (overly_h_empty_n == 1'b0) | (overly_y_empty_n == 1'b0) | (overly_x_empty_n == 1'b0) | (overly_alpha_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (ap_enable_reg_pp0_iter2 == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b0)) & ~((ap_enable_reg_pp0_iter7 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter6 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((ap_enable_reg_pp0_iter7 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter6 == 1'b0)) | ((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (ap_enable_reg_pp0_iter2 == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln59_1_fu_238_p2 = (row_reg_150 + 11'd1);

assign add_ln59_fu_192_p2 = (indvar_flatten_reg_139 + 21'd1);

assign and_ln68_1_fu_318_p2 = (select_ln59_1_fu_270_p3 & and_ln68_2_fu_312_p2);

assign and_ln68_2_fu_312_p2 = (xor_ln894_fu_306_p2 & xor_ln886_fu_295_p2);

assign and_ln68_3_fu_264_p2 = (rev28_fu_253_p2 & notrhs_i_mid1_fu_259_p2);

assign and_ln68_fu_218_p2 = (rev26_fu_207_p2 & notrhs_i_fu_213_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((icmp_ln59_reg_501_pp0_iter6_reg == 1'd0) & (ap_enable_reg_pp0_iter7 == 1'b1) & (img_out_4241_full_n == 1'b0)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (((icmp_ln59_reg_501 == 1'd0) & (img_src1_4242_empty_n == 1'b0)) | ((icmp_ln59_reg_501 == 1'd0) & (img_src2_4243_empty_n == 1'b0)))));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((icmp_ln59_reg_501_pp0_iter6_reg == 1'd0) & (ap_enable_reg_pp0_iter7 == 1'b1) & (img_out_4241_full_n == 1'b0)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (((icmp_ln59_reg_501 == 1'd0) & (img_src1_4242_empty_n == 1'b0)) | ((icmp_ln59_reg_501 == 1'd0) & (img_src2_4243_empty_n == 1'b0)))));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((icmp_ln59_reg_501_pp0_iter6_reg == 1'd0) & (ap_enable_reg_pp0_iter7 == 1'b1) & (img_out_4241_full_n == 1'b0)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (((icmp_ln59_reg_501 == 1'd0) & (img_src1_4242_empty_n == 1'b0)) | ((icmp_ln59_reg_501 == 1'd0) & (img_src2_4243_empty_n == 1'b0)))));
end

always @ (*) begin
    ap_block_state1 = ((real_start == 1'b0) | (overly_w_empty_n == 1'b0) | (overly_h_empty_n == 1'b0) | (overly_y_empty_n == 1'b0) | (overly_x_empty_n == 1'b0) | (overly_alpha_empty_n == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state3_pp0_stage0_iter1 = (((icmp_ln59_reg_501 == 1'd0) & (img_src1_4242_empty_n == 1'b0)) | ((icmp_ln59_reg_501 == 1'd0) & (img_src2_4243_empty_n == 1'b0)));
end

assign ap_block_state4_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state9_pp0_stage0_iter7 = ((icmp_ln59_reg_501_pp0_iter6_reg == 1'd0) & (img_out_4241_full_n == 1'b0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_ready = internal_ap_ready;

assign col_fu_365_p2 = (select_ln59_fu_230_p3 + 11'd1);

assign grp_fu_426_p0 = zext_ln215_fu_349_p1;

assign grp_fu_426_p1 = grp_fu_426_p10;

assign grp_fu_426_p10 = call_ret_i_ExtractPixel_1_fu_172_ap_return_0;

assign grp_fu_426_p2 = zext_ln1350_fu_383_p1;

assign grp_fu_435_p0 = zext_ln215_fu_349_p1;

assign grp_fu_435_p1 = grp_fu_435_p10;

assign grp_fu_435_p10 = call_ret_i_ExtractPixel_1_fu_172_ap_return_1;

assign grp_fu_435_p2 = zext_ln1350_fu_383_p1;

assign grp_fu_444_p0 = zext_ln215_fu_349_p1;

assign grp_fu_444_p1 = grp_fu_444_p10;

assign grp_fu_444_p10 = call_ret_i_ExtractPixel_1_fu_172_ap_return_2;

assign grp_fu_444_p2 = zext_ln1350_fu_383_p1;

assign grp_fu_453_p0 = grp_fu_453_p00;

assign grp_fu_453_p00 = grp_fu_426_p3;

assign grp_fu_453_p1 = 35'd131587;

assign grp_fu_460_p0 = grp_fu_460_p00;

assign grp_fu_460_p00 = grp_fu_435_p3;

assign grp_fu_460_p1 = 35'd131587;

assign grp_fu_467_p0 = grp_fu_467_p00;

assign grp_fu_467_p00 = grp_fu_444_p3;

assign grp_fu_467_p1 = 35'd131587;

assign icmp_ln59_fu_186_p2 = ((indvar_flatten_reg_139 == 21'd2073600) ? 1'b1 : 1'b0);

assign icmp_ln62_fu_224_p2 = ((col_1_reg_161 == 11'd1920) ? 1'b1 : 1'b0);

assign icmp_ln886_fu_290_p2 = ((zext_ln62_fu_286_p1 < overly_x_read_reg_479) ? 1'b1 : 1'b0);

assign icmp_ln894_fu_301_p2 = ((overly_w_read_reg_496 < zext_ln62_fu_286_p1) ? 1'b1 : 1'b0);

assign img_out_4241_din = pixelMix_PackPixel_fu_178_ap_return;

assign mul_ln1349_1_fu_377_p0 = mul_ln1349_1_fu_377_p00;

assign mul_ln1349_1_fu_377_p00 = select_ln68_reg_520_pp0_iter2_reg;

assign mul_ln1349_1_fu_377_p1 = mul_ln1349_1_fu_377_p10;

assign mul_ln1349_1_fu_377_p10 = tmp_V_1_reg_515_pp0_iter2_reg;

assign notrhs_i_fu_213_p2 = ((zext_ln59_fu_198_p1 < overly_h_read_reg_490) ? 1'b1 : 1'b0);

assign notrhs_i_mid1_fu_259_p2 = ((zext_ln59_1_fu_244_p1 < overly_h_read_reg_490) ? 1'b1 : 1'b0);

assign pixelMix_PackPixel_fu_178_p_read = {{grp_fu_453_p2[32:25]}};

assign pixelMix_PackPixel_fu_178_p_read1 = {{grp_fu_460_p2[32:25]}};

assign pixelMix_PackPixel_fu_178_p_read2 = {{grp_fu_467_p2[32:25]}};

assign rev26_fu_207_p2 = (ult_fu_202_p2 ^ 1'd1);

assign rev28_fu_253_p2 = (ult27_fu_248_p2 ^ 1'd1);

assign select_ln59_1_fu_270_p3 = ((icmp_ln62_fu_224_p2[0:0] === 1'b1) ? and_ln68_3_fu_264_p2 : and_ln68_fu_218_p2);

assign select_ln59_2_fu_278_p3 = ((icmp_ln62_fu_224_p2[0:0] === 1'b1) ? add_ln59_1_fu_238_p2 : row_reg_150);

assign select_ln59_fu_230_p3 = ((icmp_ln62_fu_224_p2[0:0] === 1'b1) ? 11'd0 : col_1_reg_161);

assign select_ln68_fu_324_p3 = ((and_ln68_1_fu_318_p2[0:0] === 1'b1) ? overly_alpha_read_reg_474 : 8'd0);

assign start_out = real_start;

assign ult27_fu_248_p2 = ((zext_ln59_1_fu_244_p1 < overly_y_read_reg_484) ? 1'b1 : 1'b0);

assign ult_fu_202_p2 = ((zext_ln59_fu_198_p1 < overly_y_read_reg_484) ? 1'b1 : 1'b0);

assign xor_ln1351_fu_343_p2 = (select_ln68_fu_324_p3 ^ 8'd255);

assign xor_ln886_fu_295_p2 = (icmp_ln886_fu_290_p2 ^ 1'd1);

assign xor_ln894_fu_306_p2 = (icmp_ln894_fu_301_p2 ^ 1'd1);

assign zext_ln1350_fu_383_p1 = mul_ln1349_1_fu_377_p2;

assign zext_ln215_fu_349_p1 = xor_ln1351_fu_343_p2;

assign zext_ln59_1_fu_244_p1 = add_ln59_1_fu_238_p2;

assign zext_ln59_fu_198_p1 = row_reg_150;

assign zext_ln62_fu_286_p1 = select_ln59_fu_230_p3;

endmodule //overlaystream_overlyOnMat_1080_1920_s
