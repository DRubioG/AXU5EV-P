-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity overlaystream_overlyOnMat_1080_1920_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    start_full_n : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    start_out : OUT STD_LOGIC;
    start_write : OUT STD_LOGIC;
    img_src2_4243_dout : IN STD_LOGIC_VECTOR (23 downto 0);
    img_src2_4243_empty_n : IN STD_LOGIC;
    img_src2_4243_read : OUT STD_LOGIC;
    img_src1_4242_dout : IN STD_LOGIC_VECTOR (7 downto 0);
    img_src1_4242_empty_n : IN STD_LOGIC;
    img_src1_4242_read : OUT STD_LOGIC;
    img_out_4241_din : OUT STD_LOGIC_VECTOR (23 downto 0);
    img_out_4241_full_n : IN STD_LOGIC;
    img_out_4241_write : OUT STD_LOGIC;
    overly_alpha_dout : IN STD_LOGIC_VECTOR (7 downto 0);
    overly_alpha_empty_n : IN STD_LOGIC;
    overly_alpha_read : OUT STD_LOGIC;
    overly_x_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    overly_x_empty_n : IN STD_LOGIC;
    overly_x_read : OUT STD_LOGIC;
    overly_y_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    overly_y_empty_n : IN STD_LOGIC;
    overly_y_read : OUT STD_LOGIC;
    overly_h_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    overly_h_empty_n : IN STD_LOGIC;
    overly_h_read : OUT STD_LOGIC;
    overly_w_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    overly_w_empty_n : IN STD_LOGIC;
    overly_w_read : OUT STD_LOGIC );
end;


architecture behav of overlaystream_overlyOnMat_1080_1920_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv21_0 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000000000";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv21_1FA400 : STD_LOGIC_VECTOR (20 downto 0) := "111111010010000000000";
    constant ap_const_lv21_1 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000000001";
    constant ap_const_lv11_780 : STD_LOGIC_VECTOR (10 downto 0) := "11110000000";
    constant ap_const_lv11_1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv35_20203 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000100000001000000011";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";

attribute shreg_extract : string;
    signal real_start : STD_LOGIC;
    signal start_once_reg : STD_LOGIC := '0';
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal internal_ap_ready : STD_LOGIC;
    signal img_src2_4243_blk_n : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal icmp_ln59_reg_501 : STD_LOGIC_VECTOR (0 downto 0);
    signal img_src1_4242_blk_n : STD_LOGIC;
    signal img_out_4241_blk_n : STD_LOGIC;
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal icmp_ln59_reg_501_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal overly_alpha_blk_n : STD_LOGIC;
    signal overly_x_blk_n : STD_LOGIC;
    signal overly_y_blk_n : STD_LOGIC;
    signal overly_h_blk_n : STD_LOGIC;
    signal overly_w_blk_n : STD_LOGIC;
    signal indvar_flatten_reg_139 : STD_LOGIC_VECTOR (20 downto 0);
    signal row_reg_150 : STD_LOGIC_VECTOR (10 downto 0);
    signal col_1_reg_161 : STD_LOGIC_VECTOR (10 downto 0);
    signal overly_alpha_read_reg_474 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal overly_x_read_reg_479 : STD_LOGIC_VECTOR (31 downto 0);
    signal overly_y_read_reg_484 : STD_LOGIC_VECTOR (31 downto 0);
    signal overly_h_read_reg_490 : STD_LOGIC_VECTOR (31 downto 0);
    signal overly_w_read_reg_496 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln59_fu_186_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln59_reg_501_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln59_reg_501_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln59_reg_501_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln59_reg_501_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln59_reg_501_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln59_fu_192_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal select_ln59_2_fu_278_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_V_1_reg_515 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_V_1_reg_515_pp0_iter2_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln68_fu_324_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln68_reg_520 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln68_reg_520_pp0_iter2_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln215_fu_349_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal col_fu_365_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln1350_fu_383_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_flush_enable : STD_LOGIC;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_condition_pp0_exit_iter1_state3 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal call_ret_i_ExtractPixel_1_fu_172_ap_ready : STD_LOGIC;
    signal call_ret_i_ExtractPixel_1_fu_172_ap_return_0 : STD_LOGIC_VECTOR (7 downto 0);
    signal call_ret_i_ExtractPixel_1_fu_172_ap_return_1 : STD_LOGIC_VECTOR (7 downto 0);
    signal call_ret_i_ExtractPixel_1_fu_172_ap_return_2 : STD_LOGIC_VECTOR (7 downto 0);
    signal pixelMix_PackPixel_fu_178_ap_ready : STD_LOGIC;
    signal pixelMix_PackPixel_fu_178_p_read : STD_LOGIC_VECTOR (7 downto 0);
    signal pixelMix_PackPixel_fu_178_p_read1 : STD_LOGIC_VECTOR (7 downto 0);
    signal pixelMix_PackPixel_fu_178_p_read2 : STD_LOGIC_VECTOR (7 downto 0);
    signal pixelMix_PackPixel_fu_178_ap_return : STD_LOGIC_VECTOR (23 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal zext_ln59_fu_198_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ult_fu_202_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notrhs_i_fu_213_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal rev26_fu_207_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln62_fu_224_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln59_1_fu_238_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln59_1_fu_244_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ult27_fu_248_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notrhs_i_mid1_fu_259_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal rev28_fu_253_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln68_3_fu_264_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln68_fu_218_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln59_fu_230_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln62_fu_286_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln886_fu_290_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln894_fu_301_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln886_fu_295_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln894_fu_306_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln68_2_fu_312_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln59_1_fu_270_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln68_1_fu_318_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln1351_fu_343_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln1349_1_fu_377_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln1349_1_fu_377_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln1349_1_fu_377_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_426_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_fu_435_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_fu_444_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_fu_453_p2 : STD_LOGIC_VECTOR (34 downto 0);
    signal grp_fu_460_p2 : STD_LOGIC_VECTOR (34 downto 0);
    signal grp_fu_467_p2 : STD_LOGIC_VECTOR (34 downto 0);
    signal grp_fu_426_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_426_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_426_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_435_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_435_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_435_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_444_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_444_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_444_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_453_p0 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_fu_453_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal grp_fu_460_p0 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_fu_460_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal grp_fu_467_p0 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_fu_467_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal grp_fu_426_ce : STD_LOGIC;
    signal grp_fu_435_ce : STD_LOGIC;
    signal grp_fu_444_ce : STD_LOGIC;
    signal grp_fu_453_ce : STD_LOGIC;
    signal grp_fu_460_ce : STD_LOGIC;
    signal grp_fu_467_ce : STD_LOGIC;
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal grp_fu_426_p10 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_435_p10 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_444_p10 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_453_p00 : STD_LOGIC_VECTOR (34 downto 0);
    signal grp_fu_460_p00 : STD_LOGIC_VECTOR (34 downto 0);
    signal grp_fu_467_p00 : STD_LOGIC_VECTOR (34 downto 0);
    signal mul_ln1349_1_fu_377_p00 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln1349_1_fu_377_p10 : STD_LOGIC_VECTOR (15 downto 0);

    component overlaystream_ExtractPixel_1 IS
    port (
        ap_ready : OUT STD_LOGIC;
        src_read : IN STD_LOGIC_VECTOR (23 downto 0);
        ap_return_0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        ap_return_1 : OUT STD_LOGIC_VECTOR (7 downto 0);
        ap_return_2 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component overlaystream_PackPixel IS
    port (
        ap_ready : OUT STD_LOGIC;
        p_read : IN STD_LOGIC_VECTOR (7 downto 0);
        p_read1 : IN STD_LOGIC_VECTOR (7 downto 0);
        p_read2 : IN STD_LOGIC_VECTOR (7 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component overlaystream_mul_8ns_8ns_16_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component overlaystream_mac_muladd_8ns_8ns_16ns_17_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (15 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (16 downto 0) );
    end component;


    component overlaystream_mul_mul_17ns_19ns_35_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (16 downto 0);
        din1 : IN STD_LOGIC_VECTOR (18 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (34 downto 0) );
    end component;



begin
    call_ret_i_ExtractPixel_1_fu_172 : component overlaystream_ExtractPixel_1
    port map (
        ap_ready => call_ret_i_ExtractPixel_1_fu_172_ap_ready,
        src_read => img_src2_4243_dout,
        ap_return_0 => call_ret_i_ExtractPixel_1_fu_172_ap_return_0,
        ap_return_1 => call_ret_i_ExtractPixel_1_fu_172_ap_return_1,
        ap_return_2 => call_ret_i_ExtractPixel_1_fu_172_ap_return_2);

    pixelMix_PackPixel_fu_178 : component overlaystream_PackPixel
    port map (
        ap_ready => pixelMix_PackPixel_fu_178_ap_ready,
        p_read => pixelMix_PackPixel_fu_178_p_read,
        p_read1 => pixelMix_PackPixel_fu_178_p_read1,
        p_read2 => pixelMix_PackPixel_fu_178_p_read2,
        ap_return => pixelMix_PackPixel_fu_178_ap_return);

    mul_8ns_8ns_16_1_1_U34 : component overlaystream_mul_8ns_8ns_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        dout_WIDTH => 16)
    port map (
        din0 => mul_ln1349_1_fu_377_p0,
        din1 => mul_ln1349_1_fu_377_p1,
        dout => mul_ln1349_1_fu_377_p2);

    mac_muladd_8ns_8ns_16ns_17_4_1_U35 : component overlaystream_mac_muladd_8ns_8ns_16ns_17_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 16,
        dout_WIDTH => 17)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_426_p0,
        din1 => grp_fu_426_p1,
        din2 => grp_fu_426_p2,
        ce => grp_fu_426_ce,
        dout => grp_fu_426_p3);

    mac_muladd_8ns_8ns_16ns_17_4_1_U36 : component overlaystream_mac_muladd_8ns_8ns_16ns_17_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 16,
        dout_WIDTH => 17)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_435_p0,
        din1 => grp_fu_435_p1,
        din2 => grp_fu_435_p2,
        ce => grp_fu_435_ce,
        dout => grp_fu_435_p3);

    mac_muladd_8ns_8ns_16ns_17_4_1_U37 : component overlaystream_mac_muladd_8ns_8ns_16ns_17_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 16,
        dout_WIDTH => 17)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_444_p0,
        din1 => grp_fu_444_p1,
        din2 => grp_fu_444_p2,
        ce => grp_fu_444_ce,
        dout => grp_fu_444_p3);

    mul_mul_17ns_19ns_35_4_1_U38 : component overlaystream_mul_mul_17ns_19ns_35_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 17,
        din1_WIDTH => 19,
        dout_WIDTH => 35)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_453_p0,
        din1 => grp_fu_453_p1,
        ce => grp_fu_453_ce,
        dout => grp_fu_453_p2);

    mul_mul_17ns_19ns_35_4_1_U39 : component overlaystream_mul_mul_17ns_19ns_35_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 17,
        din1_WIDTH => 19,
        dout_WIDTH => 35)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_460_p0,
        din1 => grp_fu_460_p1,
        ce => grp_fu_460_ce,
        dout => grp_fu_460_p2);

    mul_mul_17ns_19ns_35_4_1_U40 : component overlaystream_mul_mul_17ns_19ns_35_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 17,
        din1_WIDTH => 19,
        dout_WIDTH => 35)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_467_p0,
        din1 => grp_fu_467_p1,
        ce => grp_fu_467_ce,
        dout => grp_fu_467_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_pp0_flush_enable)) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((not(((real_start = ap_const_logic_0) or (overly_w_empty_n = ap_const_logic_0) or (overly_h_empty_n = ap_const_logic_0) or (overly_y_empty_n = ap_const_logic_0) or (overly_x_empty_n = ap_const_logic_0) or (overly_alpha_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter1_state3)) then 
                        ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter0;
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                elsif ((not(((real_start = ap_const_logic_0) or (overly_w_empty_n = ap_const_logic_0) or (overly_h_empty_n = ap_const_logic_0) or (overly_y_empty_n = ap_const_logic_0) or (overly_x_empty_n = ap_const_logic_0) or (overly_alpha_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    start_once_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                start_once_reg <= ap_const_logic_0;
            else
                if (((real_start = ap_const_logic_1) and (internal_ap_ready = ap_const_logic_0))) then 
                    start_once_reg <= ap_const_logic_1;
                elsif ((internal_ap_ready = ap_const_logic_1)) then 
                    start_once_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    col_1_reg_161_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln59_reg_501 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                col_1_reg_161 <= col_fu_365_p2;
            elsif ((not(((real_start = ap_const_logic_0) or (overly_w_empty_n = ap_const_logic_0) or (overly_h_empty_n = ap_const_logic_0) or (overly_y_empty_n = ap_const_logic_0) or (overly_x_empty_n = ap_const_logic_0) or (overly_alpha_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                col_1_reg_161 <= ap_const_lv11_0;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_139_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln59_fu_186_p2 = ap_const_lv1_0))) then 
                indvar_flatten_reg_139 <= add_ln59_fu_192_p2;
            elsif ((not(((real_start = ap_const_logic_0) or (overly_w_empty_n = ap_const_logic_0) or (overly_h_empty_n = ap_const_logic_0) or (overly_y_empty_n = ap_const_logic_0) or (overly_x_empty_n = ap_const_logic_0) or (overly_alpha_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                indvar_flatten_reg_139 <= ap_const_lv21_0;
            end if; 
        end if;
    end process;

    row_reg_150_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln59_reg_501 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                row_reg_150 <= select_ln59_2_fu_278_p3;
            elsif ((not(((real_start = ap_const_logic_0) or (overly_w_empty_n = ap_const_logic_0) or (overly_h_empty_n = ap_const_logic_0) or (overly_y_empty_n = ap_const_logic_0) or (overly_x_empty_n = ap_const_logic_0) or (overly_alpha_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                row_reg_150 <= ap_const_lv11_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln59_reg_501 <= icmp_ln59_fu_186_p2;
                icmp_ln59_reg_501_pp0_iter1_reg <= icmp_ln59_reg_501;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                icmp_ln59_reg_501_pp0_iter2_reg <= icmp_ln59_reg_501_pp0_iter1_reg;
                icmp_ln59_reg_501_pp0_iter3_reg <= icmp_ln59_reg_501_pp0_iter2_reg;
                icmp_ln59_reg_501_pp0_iter4_reg <= icmp_ln59_reg_501_pp0_iter3_reg;
                icmp_ln59_reg_501_pp0_iter5_reg <= icmp_ln59_reg_501_pp0_iter4_reg;
                icmp_ln59_reg_501_pp0_iter6_reg <= icmp_ln59_reg_501_pp0_iter5_reg;
                select_ln68_reg_520_pp0_iter2_reg <= select_ln68_reg_520;
                tmp_V_1_reg_515_pp0_iter2_reg <= tmp_V_1_reg_515;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((real_start = ap_const_logic_0) or (overly_w_empty_n = ap_const_logic_0) or (overly_h_empty_n = ap_const_logic_0) or (overly_y_empty_n = ap_const_logic_0) or (overly_x_empty_n = ap_const_logic_0) or (overly_alpha_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                overly_alpha_read_reg_474 <= overly_alpha_dout;
                overly_h_read_reg_490 <= overly_h_dout;
                overly_w_read_reg_496 <= overly_w_dout;
                overly_x_read_reg_479 <= overly_x_dout;
                overly_y_read_reg_484 <= overly_y_dout;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln59_reg_501 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                select_ln68_reg_520 <= select_ln68_fu_324_p3;
                tmp_V_1_reg_515 <= img_src1_4242_dout;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (real_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, overly_alpha_empty_n, overly_x_empty_n, overly_y_empty_n, overly_h_empty_n, overly_w_empty_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter6)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((real_start = ap_const_logic_0) or (overly_w_empty_n = ap_const_logic_0) or (overly_h_empty_n = ap_const_logic_0) or (overly_y_empty_n = ap_const_logic_0) or (overly_x_empty_n = ap_const_logic_0) or (overly_alpha_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) and not(((ap_enable_reg_pp0_iter7 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_enable_reg_pp0_iter7 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0)))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;
    add_ln59_1_fu_238_p2 <= std_logic_vector(unsigned(row_reg_150) + unsigned(ap_const_lv11_1));
    add_ln59_fu_192_p2 <= std_logic_vector(unsigned(indvar_flatten_reg_139) + unsigned(ap_const_lv21_1));
    and_ln68_1_fu_318_p2 <= (select_ln59_1_fu_270_p3 and and_ln68_2_fu_312_p2);
    and_ln68_2_fu_312_p2 <= (xor_ln894_fu_306_p2 and xor_ln886_fu_295_p2);
    and_ln68_3_fu_264_p2 <= (rev28_fu_253_p2 and notrhs_i_mid1_fu_259_p2);
    and_ln68_fu_218_p2 <= (rev26_fu_207_p2 and notrhs_i_fu_213_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(2);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(img_src2_4243_empty_n, img_src1_4242_empty_n, img_out_4241_full_n, ap_enable_reg_pp0_iter1, icmp_ln59_reg_501, ap_enable_reg_pp0_iter7, icmp_ln59_reg_501_pp0_iter6_reg)
    begin
                ap_block_pp0_stage0_01001 <= (((icmp_ln59_reg_501_pp0_iter6_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1) and (img_out_4241_full_n = ap_const_logic_0)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (((icmp_ln59_reg_501 = ap_const_lv1_0) and (img_src1_4242_empty_n = ap_const_logic_0)) or ((icmp_ln59_reg_501 = ap_const_lv1_0) and (img_src2_4243_empty_n = ap_const_logic_0)))));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(img_src2_4243_empty_n, img_src1_4242_empty_n, img_out_4241_full_n, ap_enable_reg_pp0_iter1, icmp_ln59_reg_501, ap_enable_reg_pp0_iter7, icmp_ln59_reg_501_pp0_iter6_reg)
    begin
                ap_block_pp0_stage0_11001 <= (((icmp_ln59_reg_501_pp0_iter6_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1) and (img_out_4241_full_n = ap_const_logic_0)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (((icmp_ln59_reg_501 = ap_const_lv1_0) and (img_src1_4242_empty_n = ap_const_logic_0)) or ((icmp_ln59_reg_501 = ap_const_lv1_0) and (img_src2_4243_empty_n = ap_const_logic_0)))));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(img_src2_4243_empty_n, img_src1_4242_empty_n, img_out_4241_full_n, ap_enable_reg_pp0_iter1, icmp_ln59_reg_501, ap_enable_reg_pp0_iter7, icmp_ln59_reg_501_pp0_iter6_reg)
    begin
                ap_block_pp0_stage0_subdone <= (((icmp_ln59_reg_501_pp0_iter6_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1) and (img_out_4241_full_n = ap_const_logic_0)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (((icmp_ln59_reg_501 = ap_const_lv1_0) and (img_src1_4242_empty_n = ap_const_logic_0)) or ((icmp_ln59_reg_501 = ap_const_lv1_0) and (img_src2_4243_empty_n = ap_const_logic_0)))));
    end process;


    ap_block_state1_assign_proc : process(real_start, ap_done_reg, overly_alpha_empty_n, overly_x_empty_n, overly_y_empty_n, overly_h_empty_n, overly_w_empty_n)
    begin
                ap_block_state1 <= ((real_start = ap_const_logic_0) or (overly_w_empty_n = ap_const_logic_0) or (overly_h_empty_n = ap_const_logic_0) or (overly_y_empty_n = ap_const_logic_0) or (overly_x_empty_n = ap_const_logic_0) or (overly_alpha_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;

        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state3_pp0_stage0_iter1_assign_proc : process(img_src2_4243_empty_n, img_src1_4242_empty_n, icmp_ln59_reg_501)
    begin
                ap_block_state3_pp0_stage0_iter1 <= (((icmp_ln59_reg_501 = ap_const_lv1_0) and (img_src1_4242_empty_n = ap_const_logic_0)) or ((icmp_ln59_reg_501 = ap_const_lv1_0) and (img_src2_4243_empty_n = ap_const_logic_0)));
    end process;

        ap_block_state4_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state9_pp0_stage0_iter7_assign_proc : process(img_out_4241_full_n, icmp_ln59_reg_501_pp0_iter6_reg)
    begin
                ap_block_state9_pp0_stage0_iter7 <= ((icmp_ln59_reg_501_pp0_iter6_reg = ap_const_lv1_0) and (img_out_4241_full_n = ap_const_logic_0));
    end process;


    ap_condition_pp0_exit_iter1_state3_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_condition_pp0_exit_iter1_state3 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter1_state3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp0_flush_enable_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln59_fu_186_p2, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln59_fu_186_p2 = ap_const_lv1_1))) then 
            ap_condition_pp0_flush_enable <= ap_const_logic_1;
        else 
            ap_condition_pp0_flush_enable <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(real_start, ap_CS_fsm_state1)
    begin
        if (((real_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6)
    begin
        if (((ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_ready <= internal_ap_ready;
    col_fu_365_p2 <= std_logic_vector(unsigned(select_ln59_fu_230_p3) + unsigned(ap_const_lv11_1));

    grp_fu_426_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_426_ce <= ap_const_logic_1;
        else 
            grp_fu_426_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_426_p0 <= zext_ln215_fu_349_p1(8 - 1 downto 0);
    grp_fu_426_p1 <= grp_fu_426_p10(8 - 1 downto 0);
    grp_fu_426_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(call_ret_i_ExtractPixel_1_fu_172_ap_return_0),16));
    grp_fu_426_p2 <= zext_ln1350_fu_383_p1(16 - 1 downto 0);

    grp_fu_435_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_435_ce <= ap_const_logic_1;
        else 
            grp_fu_435_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_435_p0 <= zext_ln215_fu_349_p1(8 - 1 downto 0);
    grp_fu_435_p1 <= grp_fu_435_p10(8 - 1 downto 0);
    grp_fu_435_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(call_ret_i_ExtractPixel_1_fu_172_ap_return_1),16));
    grp_fu_435_p2 <= zext_ln1350_fu_383_p1(16 - 1 downto 0);

    grp_fu_444_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_444_ce <= ap_const_logic_1;
        else 
            grp_fu_444_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_444_p0 <= zext_ln215_fu_349_p1(8 - 1 downto 0);
    grp_fu_444_p1 <= grp_fu_444_p10(8 - 1 downto 0);
    grp_fu_444_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(call_ret_i_ExtractPixel_1_fu_172_ap_return_2),16));
    grp_fu_444_p2 <= zext_ln1350_fu_383_p1(16 - 1 downto 0);

    grp_fu_453_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_453_ce <= ap_const_logic_1;
        else 
            grp_fu_453_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_453_p0 <= grp_fu_453_p00(17 - 1 downto 0);
    grp_fu_453_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_fu_426_p3),35));
    grp_fu_453_p1 <= ap_const_lv35_20203(19 - 1 downto 0);

    grp_fu_460_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_460_ce <= ap_const_logic_1;
        else 
            grp_fu_460_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_460_p0 <= grp_fu_460_p00(17 - 1 downto 0);
    grp_fu_460_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_fu_435_p3),35));
    grp_fu_460_p1 <= ap_const_lv35_20203(19 - 1 downto 0);

    grp_fu_467_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_467_ce <= ap_const_logic_1;
        else 
            grp_fu_467_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_467_p0 <= grp_fu_467_p00(17 - 1 downto 0);
    grp_fu_467_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_fu_444_p3),35));
    grp_fu_467_p1 <= ap_const_lv35_20203(19 - 1 downto 0);
    icmp_ln59_fu_186_p2 <= "1" when (indvar_flatten_reg_139 = ap_const_lv21_1FA400) else "0";
    icmp_ln62_fu_224_p2 <= "1" when (col_1_reg_161 = ap_const_lv11_780) else "0";
    icmp_ln886_fu_290_p2 <= "1" when (unsigned(zext_ln62_fu_286_p1) < unsigned(overly_x_read_reg_479)) else "0";
    icmp_ln894_fu_301_p2 <= "1" when (unsigned(overly_w_read_reg_496) < unsigned(zext_ln62_fu_286_p1)) else "0";

    img_out_4241_blk_n_assign_proc : process(img_out_4241_full_n, ap_block_pp0_stage0, ap_enable_reg_pp0_iter7, icmp_ln59_reg_501_pp0_iter6_reg)
    begin
        if (((icmp_ln59_reg_501_pp0_iter6_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            img_out_4241_blk_n <= img_out_4241_full_n;
        else 
            img_out_4241_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    img_out_4241_din <= pixelMix_PackPixel_fu_178_ap_return;

    img_out_4241_write_assign_proc : process(ap_enable_reg_pp0_iter7, icmp_ln59_reg_501_pp0_iter6_reg, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln59_reg_501_pp0_iter6_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            img_out_4241_write <= ap_const_logic_1;
        else 
            img_out_4241_write <= ap_const_logic_0;
        end if; 
    end process;


    img_src1_4242_blk_n_assign_proc : process(img_src1_4242_empty_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, icmp_ln59_reg_501)
    begin
        if (((icmp_ln59_reg_501 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            img_src1_4242_blk_n <= img_src1_4242_empty_n;
        else 
            img_src1_4242_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    img_src1_4242_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln59_reg_501, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln59_reg_501 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            img_src1_4242_read <= ap_const_logic_1;
        else 
            img_src1_4242_read <= ap_const_logic_0;
        end if; 
    end process;


    img_src2_4243_blk_n_assign_proc : process(img_src2_4243_empty_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, icmp_ln59_reg_501)
    begin
        if (((icmp_ln59_reg_501 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            img_src2_4243_blk_n <= img_src2_4243_empty_n;
        else 
            img_src2_4243_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    img_src2_4243_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln59_reg_501, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln59_reg_501 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            img_src2_4243_read <= ap_const_logic_1;
        else 
            img_src2_4243_read <= ap_const_logic_0;
        end if; 
    end process;


    internal_ap_ready_assign_proc : process(ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            internal_ap_ready <= ap_const_logic_1;
        else 
            internal_ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    mul_ln1349_1_fu_377_p0 <= mul_ln1349_1_fu_377_p00(8 - 1 downto 0);
    mul_ln1349_1_fu_377_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln68_reg_520_pp0_iter2_reg),16));
    mul_ln1349_1_fu_377_p1 <= mul_ln1349_1_fu_377_p10(8 - 1 downto 0);
    mul_ln1349_1_fu_377_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_V_1_reg_515_pp0_iter2_reg),16));
    notrhs_i_fu_213_p2 <= "1" when (unsigned(zext_ln59_fu_198_p1) < unsigned(overly_h_read_reg_490)) else "0";
    notrhs_i_mid1_fu_259_p2 <= "1" when (unsigned(zext_ln59_1_fu_244_p1) < unsigned(overly_h_read_reg_490)) else "0";

    overly_alpha_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, overly_alpha_empty_n)
    begin
        if ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            overly_alpha_blk_n <= overly_alpha_empty_n;
        else 
            overly_alpha_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    overly_alpha_read_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, overly_alpha_empty_n, overly_x_empty_n, overly_y_empty_n, overly_h_empty_n, overly_w_empty_n)
    begin
        if ((not(((real_start = ap_const_logic_0) or (overly_w_empty_n = ap_const_logic_0) or (overly_h_empty_n = ap_const_logic_0) or (overly_y_empty_n = ap_const_logic_0) or (overly_x_empty_n = ap_const_logic_0) or (overly_alpha_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            overly_alpha_read <= ap_const_logic_1;
        else 
            overly_alpha_read <= ap_const_logic_0;
        end if; 
    end process;


    overly_h_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, overly_h_empty_n)
    begin
        if ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            overly_h_blk_n <= overly_h_empty_n;
        else 
            overly_h_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    overly_h_read_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, overly_alpha_empty_n, overly_x_empty_n, overly_y_empty_n, overly_h_empty_n, overly_w_empty_n)
    begin
        if ((not(((real_start = ap_const_logic_0) or (overly_w_empty_n = ap_const_logic_0) or (overly_h_empty_n = ap_const_logic_0) or (overly_y_empty_n = ap_const_logic_0) or (overly_x_empty_n = ap_const_logic_0) or (overly_alpha_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            overly_h_read <= ap_const_logic_1;
        else 
            overly_h_read <= ap_const_logic_0;
        end if; 
    end process;


    overly_w_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, overly_w_empty_n)
    begin
        if ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            overly_w_blk_n <= overly_w_empty_n;
        else 
            overly_w_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    overly_w_read_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, overly_alpha_empty_n, overly_x_empty_n, overly_y_empty_n, overly_h_empty_n, overly_w_empty_n)
    begin
        if ((not(((real_start = ap_const_logic_0) or (overly_w_empty_n = ap_const_logic_0) or (overly_h_empty_n = ap_const_logic_0) or (overly_y_empty_n = ap_const_logic_0) or (overly_x_empty_n = ap_const_logic_0) or (overly_alpha_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            overly_w_read <= ap_const_logic_1;
        else 
            overly_w_read <= ap_const_logic_0;
        end if; 
    end process;


    overly_x_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, overly_x_empty_n)
    begin
        if ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            overly_x_blk_n <= overly_x_empty_n;
        else 
            overly_x_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    overly_x_read_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, overly_alpha_empty_n, overly_x_empty_n, overly_y_empty_n, overly_h_empty_n, overly_w_empty_n)
    begin
        if ((not(((real_start = ap_const_logic_0) or (overly_w_empty_n = ap_const_logic_0) or (overly_h_empty_n = ap_const_logic_0) or (overly_y_empty_n = ap_const_logic_0) or (overly_x_empty_n = ap_const_logic_0) or (overly_alpha_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            overly_x_read <= ap_const_logic_1;
        else 
            overly_x_read <= ap_const_logic_0;
        end if; 
    end process;


    overly_y_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, overly_y_empty_n)
    begin
        if ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            overly_y_blk_n <= overly_y_empty_n;
        else 
            overly_y_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    overly_y_read_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, overly_alpha_empty_n, overly_x_empty_n, overly_y_empty_n, overly_h_empty_n, overly_w_empty_n)
    begin
        if ((not(((real_start = ap_const_logic_0) or (overly_w_empty_n = ap_const_logic_0) or (overly_h_empty_n = ap_const_logic_0) or (overly_y_empty_n = ap_const_logic_0) or (overly_x_empty_n = ap_const_logic_0) or (overly_alpha_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            overly_y_read <= ap_const_logic_1;
        else 
            overly_y_read <= ap_const_logic_0;
        end if; 
    end process;

    pixelMix_PackPixel_fu_178_p_read <= grp_fu_453_p2(32 downto 25);
    pixelMix_PackPixel_fu_178_p_read1 <= grp_fu_460_p2(32 downto 25);
    pixelMix_PackPixel_fu_178_p_read2 <= grp_fu_467_p2(32 downto 25);

    real_start_assign_proc : process(ap_start, start_full_n, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (start_full_n = ap_const_logic_0))) then 
            real_start <= ap_const_logic_0;
        else 
            real_start <= ap_start;
        end if; 
    end process;

    rev26_fu_207_p2 <= (ult_fu_202_p2 xor ap_const_lv1_1);
    rev28_fu_253_p2 <= (ult27_fu_248_p2 xor ap_const_lv1_1);
    select_ln59_1_fu_270_p3 <= 
        and_ln68_3_fu_264_p2 when (icmp_ln62_fu_224_p2(0) = '1') else 
        and_ln68_fu_218_p2;
    select_ln59_2_fu_278_p3 <= 
        add_ln59_1_fu_238_p2 when (icmp_ln62_fu_224_p2(0) = '1') else 
        row_reg_150;
    select_ln59_fu_230_p3 <= 
        ap_const_lv11_0 when (icmp_ln62_fu_224_p2(0) = '1') else 
        col_1_reg_161;
    select_ln68_fu_324_p3 <= 
        overly_alpha_read_reg_474 when (and_ln68_1_fu_318_p2(0) = '1') else 
        ap_const_lv8_0;
    start_out <= real_start;

    start_write_assign_proc : process(real_start, start_once_reg)
    begin
        if (((real_start = ap_const_logic_1) and (start_once_reg = ap_const_logic_0))) then 
            start_write <= ap_const_logic_1;
        else 
            start_write <= ap_const_logic_0;
        end if; 
    end process;

    ult27_fu_248_p2 <= "1" when (unsigned(zext_ln59_1_fu_244_p1) < unsigned(overly_y_read_reg_484)) else "0";
    ult_fu_202_p2 <= "1" when (unsigned(zext_ln59_fu_198_p1) < unsigned(overly_y_read_reg_484)) else "0";
    xor_ln1351_fu_343_p2 <= (select_ln68_fu_324_p3 xor ap_const_lv8_FF);
    xor_ln886_fu_295_p2 <= (icmp_ln886_fu_290_p2 xor ap_const_lv1_1);
    xor_ln894_fu_306_p2 <= (icmp_ln894_fu_301_p2 xor ap_const_lv1_1);
    zext_ln1350_fu_383_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mul_ln1349_1_fu_377_p2),17));
    zext_ln215_fu_349_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xor_ln1351_fu_343_p2),16));
    zext_ln59_1_fu_244_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln59_1_fu_238_p2),32));
    zext_ln59_fu_198_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(row_reg_150),32));
    zext_ln62_fu_286_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln59_fu_230_p3),32));
end behav;
