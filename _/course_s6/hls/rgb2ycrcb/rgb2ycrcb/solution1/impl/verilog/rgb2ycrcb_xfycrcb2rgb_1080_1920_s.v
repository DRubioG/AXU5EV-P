// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module rgb2ycrcb_xfycrcb2rgb_1080_1920_s (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        img_gray_src_4193_dout,
        img_gray_src_4193_empty_n,
        img_gray_src_4193_read,
        img_dst_4194_din,
        img_dst_4194_full_n,
        img_dst_4194_write,
        en_dout,
        en_empty_n,
        en_read
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_pp0_stage0 = 4'd2;
parameter    ap_ST_fsm_state4 = 4'd4;
parameter    ap_ST_fsm_pp1_stage0 = 4'd8;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
input  [23:0] img_gray_src_4193_dout;
input   img_gray_src_4193_empty_n;
output   img_gray_src_4193_read;
output  [23:0] img_dst_4194_din;
input   img_dst_4194_full_n;
output   img_dst_4194_write;
input  [0:0] en_dout;
input   en_empty_n;
output   en_read;

reg ap_done;
reg ap_idle;
reg start_write;
reg img_gray_src_4193_read;
reg[23:0] img_dst_4194_din;
reg img_dst_4194_write;
reg en_read;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
reg    img_gray_src_4193_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] icmp_ln61_reg_491;
wire    ap_CS_fsm_pp1_stage0;
reg    ap_enable_reg_pp1_iter1;
wire    ap_block_pp1_stage0;
reg   [0:0] icmp_ln74_reg_500;
reg    img_dst_4194_blk_n;
reg    ap_enable_reg_pp1_iter4;
reg   [0:0] icmp_ln74_reg_500_pp1_iter3_reg;
reg    en_blk_n;
reg   [20:0] indvar_flatten_reg_120;
reg   [20:0] indvar_flatten6_reg_131;
wire   [0:0] en_read_read_fu_100_p2;
reg    ap_block_state1;
wire   [0:0] icmp_ln61_fu_156_p2;
wire    ap_block_state2_pp0_stage0_iter0;
reg    ap_block_state3_pp0_stage0_iter1;
reg    ap_block_pp0_stage0_11001;
wire   [20:0] add_ln61_fu_162_p2;
reg    ap_enable_reg_pp0_iter0;
wire   [0:0] icmp_ln74_fu_168_p2;
wire    ap_block_state5_pp1_stage0_iter0;
reg    ap_block_state6_pp1_stage0_iter1;
wire    ap_block_state7_pp1_stage0_iter2;
wire    ap_block_state8_pp1_stage0_iter3;
reg    ap_block_state9_pp1_stage0_iter4;
reg    ap_block_pp1_stage0_11001;
reg   [0:0] icmp_ln74_reg_500_pp1_iter1_reg;
reg   [0:0] icmp_ln74_reg_500_pp1_iter2_reg;
wire   [20:0] add_ln74_fu_174_p2;
reg    ap_enable_reg_pp1_iter0;
reg   [7:0] ycrcb_V_0_reg_509;
reg   [7:0] ycrcb_V_0_reg_509_pp1_iter2_reg;
reg   [7:0] ycrcb_V_0_reg_509_pp1_iter3_reg;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg    ap_block_pp1_stage0_subdone;
reg    ap_condition_pp1_exit_iter0_state5;
reg    ap_enable_reg_pp1_iter2;
reg    ap_enable_reg_pp1_iter3;
wire    call_ret1_i_ExtractPixel_fu_142_ap_ready;
wire   [7:0] call_ret1_i_ExtractPixel_fu_142_ap_return_0;
wire   [7:0] call_ret1_i_ExtractPixel_fu_142_ap_return_1;
wire   [7:0] call_ret1_i_ExtractPixel_fu_142_ap_return_2;
wire    rgb_packed_PackPixel_fu_148_ap_ready;
wire   [7:0] rgb_packed_PackPixel_fu_148_p_read1;
wire   [7:0] rgb_packed_PackPixel_fu_148_p_read2;
wire   [7:0] rgb_packed_PackPixel_fu_148_p_read3;
wire   [23:0] rgb_packed_PackPixel_fu_148_ap_return;
reg    ap_block_pp0_stage0_01001;
reg    ap_block_pp1_stage0_01001;
wire  signed [7:0] xor_ln974_fu_192_p2;
wire  signed [7:0] xor_ln984_fu_206_p2;
wire  signed [24:0] grp_fu_457_p2;
wire   [9:0] trunc_ln_fu_223_p4;
wire  signed [10:0] sext_ln738_fu_232_p1;
wire   [10:0] zext_ln736_fu_220_p1;
wire   [10:0] Value_int_fu_245_p2;
wire   [2:0] tmp_fu_251_p4;
wire   [7:0] trunc_ln738_1_fu_236_p4;
wire   [0:0] icmp_ln740_fu_261_p2;
wire   [0:0] tmp_1_fu_267_p3;
wire   [0:0] or_ln740_fu_288_p2;
wire   [7:0] select_ln740_fu_280_p3;
wire   [7:0] Value_uchar_fu_275_p2;
wire  signed [23:0] grp_fu_465_p2;
wire   [8:0] sat_G1_fu_303_p4;
wire  signed [22:0] grp_fu_472_p2;
wire   [7:0] sat_G2_fu_316_p4;
wire   [9:0] zext_ln989_fu_329_p1;
wire  signed [9:0] sext_ln986_fu_312_p1;
wire   [9:0] sub_ln989_fu_332_p2;
wire  signed [10:0] sext_ln989_fu_338_p1;
wire  signed [10:0] sext_ln987_fu_325_p1;
wire   [10:0] res_fu_342_p2;
wire   [2:0] tmp_2_fu_348_p4;
wire   [0:0] icmp_ln990_fu_358_p2;
wire   [7:0] trunc_ln995_fu_364_p1;
wire  signed [24:0] grp_fu_479_p2;
wire   [9:0] trunc_ln738_2_fu_377_p4;
wire  signed [10:0] sext_ln738_1_fu_386_p1;
wire   [10:0] Value_int_1_fu_399_p2;
wire   [2:0] tmp_3_fu_405_p4;
wire   [7:0] trunc_ln738_3_fu_390_p4;
wire   [0:0] icmp_ln740_1_fu_415_p2;
wire   [0:0] tmp_4_fu_421_p3;
wire   [0:0] or_ln740_1_fu_442_p2;
wire   [7:0] select_ln740_2_fu_434_p3;
wire   [7:0] Value_uchar_2_fu_429_p2;
wire   [16:0] grp_fu_457_p0;
wire   [15:0] grp_fu_465_p0;
wire   [14:0] grp_fu_472_p0;
wire   [16:0] grp_fu_479_p0;
reg    grp_fu_457_ce;
reg    grp_fu_465_ce;
reg    grp_fu_472_ce;
reg    grp_fu_479_ce;
wire    ap_CS_fsm_state4;
reg   [3:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_idle_pp1;
wire    ap_enable_pp1;

// power-on initialization
initial begin
#0 start_once_reg = 1'b0;
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 4'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp1_iter1 = 1'b0;
#0 ap_enable_reg_pp1_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp1_iter0 = 1'b0;
#0 ap_enable_reg_pp1_iter2 = 1'b0;
#0 ap_enable_reg_pp1_iter3 = 1'b0;
end

rgb2ycrcb_ExtractPixel call_ret1_i_ExtractPixel_fu_142(
    .ap_ready(call_ret1_i_ExtractPixel_fu_142_ap_ready),
    .src_read(img_gray_src_4193_dout),
    .ap_return_0(call_ret1_i_ExtractPixel_fu_142_ap_return_0),
    .ap_return_1(call_ret1_i_ExtractPixel_fu_142_ap_return_1),
    .ap_return_2(call_ret1_i_ExtractPixel_fu_142_ap_return_2)
);

rgb2ycrcb_PackPixel rgb_packed_PackPixel_fu_148(
    .ap_ready(rgb_packed_PackPixel_fu_148_ap_ready),
    .p_read1(rgb_packed_PackPixel_fu_148_p_read1),
    .p_read2(rgb_packed_PackPixel_fu_148_p_read2),
    .p_read3(rgb_packed_PackPixel_fu_148_p_read3),
    .ap_return(rgb_packed_PackPixel_fu_148_ap_return)
);

rgb2ycrcb_mul_mul_17ns_8s_25_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 17 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 25 ))
mul_mul_17ns_8s_25_4_1_U27(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_457_p0),
    .din1(xor_ln974_fu_192_p2),
    .ce(grp_fu_457_ce),
    .dout(grp_fu_457_p2)
);

rgb2ycrcb_mul_mul_16ns_8s_24_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 24 ))
mul_mul_16ns_8s_24_4_1_U28(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_465_p0),
    .din1(xor_ln974_fu_192_p2),
    .ce(grp_fu_465_ce),
    .dout(grp_fu_465_p2)
);

rgb2ycrcb_mul_mul_15ns_8s_23_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 15 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 23 ))
mul_mul_15ns_8s_23_4_1_U29(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_472_p0),
    .din1(xor_ln984_fu_206_p2),
    .ce(grp_fu_472_ce),
    .dout(grp_fu_472_p2)
);

rgb2ycrcb_mul_mul_17ns_8s_25_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 17 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 25 ))
mul_mul_17ns_8s_25_4_1_U30(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_479_p0),
    .din1(xor_ln984_fu_206_p2),
    .ce(grp_fu_479_ce),
    .dout(grp_fu_479_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state4)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state2))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((~((en_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1) & (en_read_read_fu_100_p2 == 1'd0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state2))) begin
            ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state2);
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if ((~((en_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1) & (en_read_read_fu_100_p2 == 1'd0))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp1_stage0_subdone) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b1 == ap_condition_pp1_exit_iter0_state5))) begin
            ap_enable_reg_pp1_iter0 <= 1'b0;
        end else if ((~((en_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1) & (en_read_read_fu_100_p2 == 1'd1))) begin
            ap_enable_reg_pp1_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp1_exit_iter0_state5)) begin
                ap_enable_reg_pp1_iter1 <= (1'b1 ^ ap_condition_pp1_exit_iter0_state5);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter3 <= ap_enable_reg_pp1_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter4 <= ap_enable_reg_pp1_iter3;
        end else if ((~((en_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1) & (en_read_read_fu_100_p2 == 1'd1))) begin
            ap_enable_reg_pp1_iter4 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((internal_ap_ready == 1'b0) & (real_start == 1'b1))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((~((en_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1) & (en_read_read_fu_100_p2 == 1'd1))) begin
        indvar_flatten6_reg_131 <= 21'd0;
    end else if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (icmp_ln74_fu_168_p2 == 1'd0))) begin
        indvar_flatten6_reg_131 <= add_ln74_fu_174_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((en_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1) & (en_read_read_fu_100_p2 == 1'd0))) begin
        indvar_flatten_reg_120 <= 21'd0;
    end else if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln61_fu_156_p2 == 1'd0))) begin
        indvar_flatten_reg_120 <= add_ln61_fu_162_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln61_reg_491 <= icmp_ln61_fu_156_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        icmp_ln74_reg_500 <= icmp_ln74_fu_168_p2;
        icmp_ln74_reg_500_pp1_iter1_reg <= icmp_ln74_reg_500;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp1_stage0_11001)) begin
        icmp_ln74_reg_500_pp1_iter2_reg <= icmp_ln74_reg_500_pp1_iter1_reg;
        icmp_ln74_reg_500_pp1_iter3_reg <= icmp_ln74_reg_500_pp1_iter2_reg;
        ycrcb_V_0_reg_509_pp1_iter2_reg <= ycrcb_V_0_reg_509;
        ycrcb_V_0_reg_509_pp1_iter3_reg <= ycrcb_V_0_reg_509_pp1_iter2_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln74_reg_500 == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        ycrcb_V_0_reg_509 <= call_ret1_i_ExtractPixel_fu_142_ap_return_0;
    end
end

always @ (*) begin
    if ((icmp_ln61_fu_156_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln74_fu_168_p2 == 1'd1)) begin
        ap_condition_pp1_exit_iter0_state5 = 1'b1;
    end else begin
        ap_condition_pp1_exit_iter0_state5 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (real_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter4 == 1'b0) & (ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter3 == 1'b0) & (ap_enable_reg_pp1_iter2 == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b0))) begin
        ap_idle_pp1 = 1'b1;
    end else begin
        ap_idle_pp1 = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        en_blk_n = en_empty_n;
    end else begin
        en_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((en_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        en_read = 1'b1;
    end else begin
        en_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        grp_fu_457_ce = 1'b1;
    end else begin
        grp_fu_457_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        grp_fu_465_ce = 1'b1;
    end else begin
        grp_fu_465_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        grp_fu_472_ce = 1'b1;
    end else begin
        grp_fu_472_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        grp_fu_479_ce = 1'b1;
    end else begin
        grp_fu_479_ce = 1'b0;
    end
end

always @ (*) begin
    if ((((icmp_ln74_reg_500_pp1_iter3_reg == 1'd0) & (ap_enable_reg_pp1_iter4 == 1'b1) & (1'b0 == ap_block_pp1_stage0)) | ((icmp_ln61_reg_491 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        img_dst_4194_blk_n = img_dst_4194_full_n;
    end else begin
        img_dst_4194_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln74_reg_500_pp1_iter3_reg == 1'd0) & (ap_enable_reg_pp1_iter4 == 1'b1) & (1'b0 == ap_block_pp1_stage0_01001))) begin
        img_dst_4194_din = rgb_packed_PackPixel_fu_148_ap_return;
    end else if (((icmp_ln61_reg_491 == 1'd0) & (1'b0 == ap_block_pp0_stage0_01001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        img_dst_4194_din = img_gray_src_4193_dout;
    end else begin
        img_dst_4194_din = 'bx;
    end
end

always @ (*) begin
    if ((((icmp_ln74_reg_500_pp1_iter3_reg == 1'd0) & (ap_enable_reg_pp1_iter4 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001)) | ((icmp_ln61_reg_491 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        img_dst_4194_write = 1'b1;
    end else begin
        img_dst_4194_write = 1'b0;
    end
end

always @ (*) begin
    if ((((icmp_ln74_reg_500 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b0 == ap_block_pp1_stage0) & (1'b1 == ap_CS_fsm_pp1_stage0)) | ((icmp_ln61_reg_491 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        img_gray_src_4193_blk_n = img_gray_src_4193_empty_n;
    end else begin
        img_gray_src_4193_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((((icmp_ln74_reg_500 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0)) | ((icmp_ln61_reg_491 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        img_gray_src_4193_read = 1'b1;
    end else begin
        img_gray_src_4193_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (start_full_n == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (real_start == 1'b1))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((en_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1) & (en_read_read_fu_100_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else if ((~((en_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1) & (en_read_read_fu_100_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if (~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln61_fu_156_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln61_fu_156_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        ap_ST_fsm_pp1_stage0 : begin
            if ((~((ap_enable_reg_pp1_iter1 == 1'b0) & (1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter0 == 1'b1) & (icmp_ln74_fu_168_p2 == 1'd1)) & ~((ap_enable_reg_pp1_iter4 == 1'b1) & (1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter3 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else if ((((ap_enable_reg_pp1_iter4 == 1'b1) & (1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter3 == 1'b0)) | ((ap_enable_reg_pp1_iter1 == 1'b0) & (1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter0 == 1'b1) & (icmp_ln74_fu_168_p2 == 1'd1)))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign Value_int_1_fu_399_p2 = ($signed(sext_ln738_1_fu_386_p1) + $signed(zext_ln736_fu_220_p1));

assign Value_int_fu_245_p2 = ($signed(sext_ln738_fu_232_p1) + $signed(zext_ln736_fu_220_p1));

assign Value_uchar_2_fu_429_p2 = (ycrcb_V_0_reg_509_pp1_iter3_reg + trunc_ln738_3_fu_390_p4);

assign Value_uchar_fu_275_p2 = (ycrcb_V_0_reg_509_pp1_iter3_reg + trunc_ln738_1_fu_236_p4);

assign add_ln61_fu_162_p2 = (indvar_flatten_reg_120 + 21'd1);

assign add_ln74_fu_174_p2 = (indvar_flatten6_reg_131 + 21'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp1_stage0 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((ap_enable_reg_pp0_iter1 == 1'b1) & (((icmp_ln61_reg_491 == 1'd0) & (img_dst_4194_full_n == 1'b0)) | ((icmp_ln61_reg_491 == 1'd0) & (img_gray_src_4193_empty_n == 1'b0))));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_enable_reg_pp0_iter1 == 1'b1) & (((icmp_ln61_reg_491 == 1'd0) & (img_dst_4194_full_n == 1'b0)) | ((icmp_ln61_reg_491 == 1'd0) & (img_gray_src_4193_empty_n == 1'b0))));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_enable_reg_pp0_iter1 == 1'b1) & (((icmp_ln61_reg_491 == 1'd0) & (img_dst_4194_full_n == 1'b0)) | ((icmp_ln61_reg_491 == 1'd0) & (img_gray_src_4193_empty_n == 1'b0))));
end

assign ap_block_pp1_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp1_stage0_01001 = (((icmp_ln74_reg_500_pp1_iter3_reg == 1'd0) & (ap_enable_reg_pp1_iter4 == 1'b1) & (img_dst_4194_full_n == 1'b0)) | ((icmp_ln74_reg_500 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (img_gray_src_4193_empty_n == 1'b0)));
end

always @ (*) begin
    ap_block_pp1_stage0_11001 = (((icmp_ln74_reg_500_pp1_iter3_reg == 1'd0) & (ap_enable_reg_pp1_iter4 == 1'b1) & (img_dst_4194_full_n == 1'b0)) | ((icmp_ln74_reg_500 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (img_gray_src_4193_empty_n == 1'b0)));
end

always @ (*) begin
    ap_block_pp1_stage0_subdone = (((icmp_ln74_reg_500_pp1_iter3_reg == 1'd0) & (ap_enable_reg_pp1_iter4 == 1'b1) & (img_dst_4194_full_n == 1'b0)) | ((icmp_ln74_reg_500 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (img_gray_src_4193_empty_n == 1'b0)));
end

always @ (*) begin
    ap_block_state1 = ((en_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (real_start == 1'b0));
end

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state3_pp0_stage0_iter1 = (((icmp_ln61_reg_491 == 1'd0) & (img_dst_4194_full_n == 1'b0)) | ((icmp_ln61_reg_491 == 1'd0) & (img_gray_src_4193_empty_n == 1'b0)));
end

assign ap_block_state5_pp1_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state6_pp1_stage0_iter1 = ((icmp_ln74_reg_500 == 1'd0) & (img_gray_src_4193_empty_n == 1'b0));
end

assign ap_block_state7_pp1_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp1_stage0_iter3 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state9_pp1_stage0_iter4 = ((icmp_ln74_reg_500_pp1_iter3_reg == 1'd0) & (img_dst_4194_full_n == 1'b0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_pp1 = (ap_idle_pp1 ^ 1'b1);

assign ap_ready = internal_ap_ready;

assign en_read_read_fu_100_p2 = en_dout;

assign grp_fu_457_p0 = 25'd45974;

assign grp_fu_465_p0 = 24'd23396;

assign grp_fu_472_p0 = 23'd11272;

assign grp_fu_479_p0 = 25'd58098;

assign icmp_ln61_fu_156_p2 = ((indvar_flatten_reg_120 == 21'd2073600) ? 1'b1 : 1'b0);

assign icmp_ln740_1_fu_415_p2 = (($signed(tmp_3_fu_405_p4) > $signed(3'd0)) ? 1'b1 : 1'b0);

assign icmp_ln740_fu_261_p2 = (($signed(tmp_fu_251_p4) > $signed(3'd0)) ? 1'b1 : 1'b0);

assign icmp_ln74_fu_168_p2 = ((indvar_flatten6_reg_131 == 21'd2073600) ? 1'b1 : 1'b0);

assign icmp_ln990_fu_358_p2 = ((tmp_2_fu_348_p4 != 3'd0) ? 1'b1 : 1'b0);

assign or_ln740_1_fu_442_p2 = (tmp_4_fu_421_p3 | icmp_ln740_1_fu_415_p2);

assign or_ln740_fu_288_p2 = (tmp_1_fu_267_p3 | icmp_ln740_fu_261_p2);

assign res_fu_342_p2 = ($signed(sext_ln989_fu_338_p1) - $signed(sext_ln987_fu_325_p1));

assign rgb_packed_PackPixel_fu_148_p_read1 = ((or_ln740_fu_288_p2[0:0] === 1'b1) ? select_ln740_fu_280_p3 : Value_uchar_fu_275_p2);

assign rgb_packed_PackPixel_fu_148_p_read2 = ((icmp_ln990_fu_358_p2[0:0] === 1'b1) ? 8'd255 : trunc_ln995_fu_364_p1);

assign rgb_packed_PackPixel_fu_148_p_read3 = ((or_ln740_1_fu_442_p2[0:0] === 1'b1) ? select_ln740_2_fu_434_p3 : Value_uchar_2_fu_429_p2);

assign sat_G1_fu_303_p4 = {{grp_fu_465_p2[23:15]}};

assign sat_G2_fu_316_p4 = {{grp_fu_472_p2[22:15]}};

assign select_ln740_2_fu_434_p3 = ((icmp_ln740_1_fu_415_p2[0:0] === 1'b1) ? 8'd255 : 8'd0);

assign select_ln740_fu_280_p3 = ((icmp_ln740_fu_261_p2[0:0] === 1'b1) ? 8'd255 : 8'd0);

assign sext_ln738_1_fu_386_p1 = $signed(trunc_ln738_2_fu_377_p4);

assign sext_ln738_fu_232_p1 = $signed(trunc_ln_fu_223_p4);

assign sext_ln986_fu_312_p1 = $signed(sat_G1_fu_303_p4);

assign sext_ln987_fu_325_p1 = $signed(sat_G2_fu_316_p4);

assign sext_ln989_fu_338_p1 = $signed(sub_ln989_fu_332_p2);

assign start_out = real_start;

assign sub_ln989_fu_332_p2 = ($signed(zext_ln989_fu_329_p1) - $signed(sext_ln986_fu_312_p1));

assign tmp_1_fu_267_p3 = Value_int_fu_245_p2[32'd10];

assign tmp_2_fu_348_p4 = {{res_fu_342_p2[10:8]}};

assign tmp_3_fu_405_p4 = {{Value_int_1_fu_399_p2[10:8]}};

assign tmp_4_fu_421_p3 = Value_int_1_fu_399_p2[32'd10];

assign tmp_fu_251_p4 = {{Value_int_fu_245_p2[10:8]}};

assign trunc_ln738_1_fu_236_p4 = {{grp_fu_457_p2[22:15]}};

assign trunc_ln738_2_fu_377_p4 = {{grp_fu_479_p2[24:15]}};

assign trunc_ln738_3_fu_390_p4 = {{grp_fu_479_p2[22:15]}};

assign trunc_ln995_fu_364_p1 = res_fu_342_p2[7:0];

assign trunc_ln_fu_223_p4 = {{grp_fu_457_p2[24:15]}};

assign xor_ln974_fu_192_p2 = (call_ret1_i_ExtractPixel_fu_142_ap_return_1 ^ 8'd128);

assign xor_ln984_fu_206_p2 = (call_ret1_i_ExtractPixel_fu_142_ap_return_2 ^ 8'd128);

assign zext_ln736_fu_220_p1 = ycrcb_V_0_reg_509_pp1_iter3_reg;

assign zext_ln989_fu_329_p1 = ycrcb_V_0_reg_509_pp1_iter3_reg;

endmodule //rgb2ycrcb_xfycrcb2rgb_1080_1920_s
