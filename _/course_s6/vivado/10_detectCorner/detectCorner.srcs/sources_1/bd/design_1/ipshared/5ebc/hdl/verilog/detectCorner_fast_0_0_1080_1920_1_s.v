// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module detectCorner_fast_0_0_1080_1920_1_s (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        img_gray_src_data_dout,
        img_gray_src_data_empty_n,
        img_gray_src_data_read,
        img_rgb_src_data_dout,
        img_rgb_src_data_empty_n,
        img_rgb_src_data_read,
        img_gray_dst_data_din,
        img_gray_dst_data_full_n,
        img_gray_dst_data_write,
        img_rgb_dst_data_din,
        img_rgb_dst_data_full_n,
        img_rgb_dst_data_write,
        threshold_dout,
        threshold_empty_n,
        threshold_read
);

parameter    ap_ST_fsm_state1 = 2'd1;
parameter    ap_ST_fsm_state2 = 2'd2;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
input  [7:0] img_gray_src_data_dout;
input   img_gray_src_data_empty_n;
output   img_gray_src_data_read;
input  [23:0] img_rgb_src_data_dout;
input   img_rgb_src_data_empty_n;
output   img_rgb_src_data_read;
output  [7:0] img_gray_dst_data_din;
input   img_gray_dst_data_full_n;
output   img_gray_dst_data_write;
output  [23:0] img_rgb_dst_data_din;
input   img_rgb_dst_data_full_n;
output   img_rgb_dst_data_write;
input  [31:0] threshold_dout;
input   threshold_empty_n;
output   threshold_read;

reg ap_done;
reg ap_idle;
reg start_write;
reg img_gray_src_data_read;
reg img_rgb_src_data_read;
reg img_gray_dst_data_write;
reg img_rgb_dst_data_write;
reg threshold_read;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
reg    threshold_blk_n;
wire   [7:0] trunc_ln114_fu_51_p1;
reg   [7:0] trunc_ln114_reg_56;
reg    ap_block_state1;
wire    grp_xFfast7x7_0_1080_1920_0_1_1_1923_7_49_s_fu_38_ap_start;
wire    grp_xFfast7x7_0_1080_1920_0_1_1_1923_7_49_s_fu_38_ap_done;
wire    grp_xFfast7x7_0_1080_1920_0_1_1_1923_7_49_s_fu_38_ap_idle;
wire    grp_xFfast7x7_0_1080_1920_0_1_1_1923_7_49_s_fu_38_ap_ready;
wire    grp_xFfast7x7_0_1080_1920_0_1_1_1923_7_49_s_fu_38_img_gray_src_4221_read;
wire    grp_xFfast7x7_0_1080_1920_0_1_1_1923_7_49_s_fu_38_img_rgb_src_4219_read;
wire   [7:0] grp_xFfast7x7_0_1080_1920_0_1_1_1923_7_49_s_fu_38_img_gray_dst_4222_din;
wire    grp_xFfast7x7_0_1080_1920_0_1_1_1923_7_49_s_fu_38_img_gray_dst_4222_write;
wire   [23:0] grp_xFfast7x7_0_1080_1920_0_1_1_1923_7_49_s_fu_38_img_rgb_dst_4220_din;
wire    grp_xFfast7x7_0_1080_1920_0_1_1_1923_7_49_s_fu_38_img_rgb_dst_4220_write;
reg    grp_xFfast7x7_0_1080_1920_0_1_1_1923_7_49_s_fu_38_ap_start_reg;
reg    ap_block_state1_ignore_call11;
wire    ap_CS_fsm_state2;
reg   [1:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 start_once_reg = 1'b0;
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 2'd1;
#0 grp_xFfast7x7_0_1080_1920_0_1_1_1923_7_49_s_fu_38_ap_start_reg = 1'b0;
end

detectCorner_xFfast7x7_0_1080_1920_0_1_1_1923_7_49_s grp_xFfast7x7_0_1080_1920_0_1_1_1923_7_49_s_fu_38(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_xFfast7x7_0_1080_1920_0_1_1_1923_7_49_s_fu_38_ap_start),
    .ap_done(grp_xFfast7x7_0_1080_1920_0_1_1_1923_7_49_s_fu_38_ap_done),
    .ap_idle(grp_xFfast7x7_0_1080_1920_0_1_1_1923_7_49_s_fu_38_ap_idle),
    .ap_ready(grp_xFfast7x7_0_1080_1920_0_1_1_1923_7_49_s_fu_38_ap_ready),
    .img_gray_src_4221_dout(img_gray_src_data_dout),
    .img_gray_src_4221_empty_n(img_gray_src_data_empty_n),
    .img_gray_src_4221_read(grp_xFfast7x7_0_1080_1920_0_1_1_1923_7_49_s_fu_38_img_gray_src_4221_read),
    .img_rgb_src_4219_dout(img_rgb_src_data_dout),
    .img_rgb_src_4219_empty_n(img_rgb_src_data_empty_n),
    .img_rgb_src_4219_read(grp_xFfast7x7_0_1080_1920_0_1_1_1923_7_49_s_fu_38_img_rgb_src_4219_read),
    .img_gray_dst_4222_din(grp_xFfast7x7_0_1080_1920_0_1_1_1923_7_49_s_fu_38_img_gray_dst_4222_din),
    .img_gray_dst_4222_full_n(img_gray_dst_data_full_n),
    .img_gray_dst_4222_write(grp_xFfast7x7_0_1080_1920_0_1_1_1923_7_49_s_fu_38_img_gray_dst_4222_write),
    .img_rgb_dst_4220_din(grp_xFfast7x7_0_1080_1920_0_1_1_1923_7_49_s_fu_38_img_rgb_dst_4220_din),
    .img_rgb_dst_4220_full_n(img_rgb_dst_data_full_n),
    .img_rgb_dst_4220_write(grp_xFfast7x7_0_1080_1920_0_1_1_1923_7_49_s_fu_38_img_rgb_dst_4220_write),
    .p_threshold(trunc_ln114_reg_56)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((grp_xFfast7x7_0_1080_1920_0_1_1_1923_7_49_s_fu_38_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_xFfast7x7_0_1080_1920_0_1_1_1923_7_49_s_fu_38_ap_start_reg <= 1'b0;
    end else begin
        if ((~((real_start == 1'b0) | (threshold_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            grp_xFfast7x7_0_1080_1920_0_1_1_1923_7_49_s_fu_38_ap_start_reg <= 1'b1;
        end else if ((grp_xFfast7x7_0_1080_1920_0_1_1_1923_7_49_s_fu_38_ap_ready == 1'b1)) begin
            grp_xFfast7x7_0_1080_1920_0_1_1_1923_7_49_s_fu_38_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((real_start == 1'b1) & (internal_ap_ready == 1'b0))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((~((real_start == 1'b0) | (threshold_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        trunc_ln114_reg_56 <= trunc_ln114_fu_51_p1;
    end
end

always @ (*) begin
    if (((grp_xFfast7x7_0_1080_1920_0_1_1_1923_7_49_s_fu_38_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((real_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        img_gray_dst_data_write = grp_xFfast7x7_0_1080_1920_0_1_1_1923_7_49_s_fu_38_img_gray_dst_4222_write;
    end else begin
        img_gray_dst_data_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        img_gray_src_data_read = grp_xFfast7x7_0_1080_1920_0_1_1_1923_7_49_s_fu_38_img_gray_src_4221_read;
    end else begin
        img_gray_src_data_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        img_rgb_dst_data_write = grp_xFfast7x7_0_1080_1920_0_1_1_1923_7_49_s_fu_38_img_rgb_dst_4220_write;
    end else begin
        img_rgb_dst_data_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        img_rgb_src_data_read = grp_xFfast7x7_0_1080_1920_0_1_1_1923_7_49_s_fu_38_img_rgb_src_4219_read;
    end else begin
        img_rgb_src_data_read = 1'b0;
    end
end

always @ (*) begin
    if (((grp_xFfast7x7_0_1080_1920_0_1_1_1923_7_49_s_fu_38_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((start_full_n == 1'b0) & (start_once_reg == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((real_start == 1'b1) & (start_once_reg == 1'b0))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        threshold_blk_n = threshold_empty_n;
    end else begin
        threshold_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (threshold_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        threshold_read = 1'b1;
    end else begin
        threshold_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((real_start == 1'b0) | (threshold_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((grp_xFfast7x7_0_1080_1920_0_1_1_1923_7_49_s_fu_38_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

always @ (*) begin
    ap_block_state1 = ((real_start == 1'b0) | (threshold_empty_n == 1'b0) | (ap_done_reg == 1'b1));
end

always @ (*) begin
    ap_block_state1_ignore_call11 = ((real_start == 1'b0) | (threshold_empty_n == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_ready = internal_ap_ready;

assign grp_xFfast7x7_0_1080_1920_0_1_1_1923_7_49_s_fu_38_ap_start = grp_xFfast7x7_0_1080_1920_0_1_1_1923_7_49_s_fu_38_ap_start_reg;

assign img_gray_dst_data_din = grp_xFfast7x7_0_1080_1920_0_1_1_1923_7_49_s_fu_38_img_gray_dst_4222_din;

assign img_rgb_dst_data_din = grp_xFfast7x7_0_1080_1920_0_1_1_1923_7_49_s_fu_38_img_rgb_dst_4220_din;

assign start_out = real_start;

assign trunc_ln114_fu_51_p1 = threshold_dout[7:0];

endmodule //detectCorner_fast_0_0_1080_1920_1_s
