// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module erosion_accel_erode_0_0_128_128_2_3_3_1_1_s (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        imgInput_417_dout,
        imgInput_417_empty_n,
        imgInput_417_read,
        imgOutput_418_din,
        imgOutput_418_full_n,
        imgOutput_418_write,
        p_src_1_dout,
        p_src_1_empty_n,
        p_src_1_read,
        p_src_2_dout,
        p_src_2_empty_n,
        p_src_2_read,
        p_kernel_address0,
        p_kernel_ce0,
        p_kernel_q0
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_pp0_stage0 = 4'd2;
parameter    ap_ST_fsm_state4 = 4'd4;
parameter    ap_ST_fsm_state5 = 4'd8;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [7:0] imgInput_417_dout;
input   imgInput_417_empty_n;
output   imgInput_417_read;
output  [7:0] imgOutput_418_din;
input   imgOutput_418_full_n;
output   imgOutput_418_write;
input  [31:0] p_src_1_dout;
input   p_src_1_empty_n;
output   p_src_1_read;
input  [31:0] p_src_2_dout;
input   p_src_2_empty_n;
output   p_src_2_read;
output  [3:0] p_kernel_address0;
output   p_kernel_ce0;
input  [7:0] p_kernel_q0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg imgInput_417_read;
reg imgOutput_418_write;
reg p_src_1_read;
reg p_src_2_read;
reg p_kernel_ce0;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    p_src_1_blk_n;
reg    p_src_2_blk_n;
reg   [3:0] indvar_flatten_reg_127;
reg   [1:0] i_reg_138;
reg   [1:0] j_reg_149;
reg   [31:0] p_src_1_read_reg_427;
reg    ap_block_state1;
reg   [31:0] p_src_2_read_reg_432;
wire   [0:0] icmp_ln372_fu_197_p2;
reg   [0:0] icmp_ln372_reg_437;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state3_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_11001;
wire   [3:0] add_ln372_fu_203_p2;
reg    ap_enable_reg_pp0_iter0;
wire   [1:0] select_ln372_fu_215_p3;
reg   [1:0] select_ln372_reg_446;
wire   [1:0] select_ln372_2_fu_255_p3;
reg   [1:0] select_ln372_2_reg_450;
wire   [1:0] add_ln373_fu_278_p2;
wire    ap_CS_fsm_state4;
wire   [15:0] trunc_ln344_fu_365_p1;
reg   [15:0] trunc_ln344_reg_510;
wire   [15:0] trunc_ln345_fu_369_p1;
reg   [15:0] trunc_ln345_reg_515;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg    ap_enable_reg_pp0_iter1;
wire    grp_xferode_128_128_1_0_1_0_129_3_3_s_fu_160_ap_start;
wire    grp_xferode_128_128_1_0_1_0_129_3_3_s_fu_160_ap_done;
wire    grp_xferode_128_128_1_0_1_0_129_3_3_s_fu_160_ap_idle;
wire    grp_xferode_128_128_1_0_1_0_129_3_3_s_fu_160_ap_ready;
wire    grp_xferode_128_128_1_0_1_0_129_3_3_s_fu_160_imgInput_417_read;
wire   [7:0] grp_xferode_128_128_1_0_1_0_129_3_3_s_fu_160_imgOutput_418_din;
wire    grp_xferode_128_128_1_0_1_0_129_3_3_s_fu_160_imgOutput_418_write;
reg   [1:0] ap_phi_mux_i_phi_fu_142_p4;
wire    ap_block_pp0_stage0;
reg    grp_xferode_128_128_1_0_1_0_129_3_3_s_fu_160_ap_start_reg;
wire    ap_CS_fsm_state5;
wire   [63:0] zext_ln374_1_fu_273_p1;
reg   [7:0] kernel_2_2_fu_66;
reg   [7:0] kernel_2_2_1_fu_70;
reg   [7:0] kernel_2_2_2_fu_74;
reg   [7:0] kernel_2_2_3_fu_78;
reg   [7:0] kernel_2_2_4_fu_82;
reg   [7:0] kernel_2_2_5_fu_86;
reg   [7:0] kernel_2_2_6_fu_90;
reg   [7:0] kernel_2_2_7_fu_94;
reg   [7:0] kernel_2_2_8_fu_98;
wire   [3:0] p_shl_i_fu_183_p3;
wire   [3:0] i_cast_i_fu_179_p1;
wire   [0:0] icmp_ln373_fu_209_p2;
wire   [1:0] add_ln372_1_fu_223_p2;
wire   [3:0] p_shl_i_mid1_fu_233_p3;
wire   [3:0] i_cast_i_mid1_fu_229_p1;
wire   [3:0] mul_i_mid1_fu_241_p2;
wire   [3:0] mul_i_fu_191_p2;
wire   [3:0] zext_ln374_fu_263_p1;
wire   [3:0] select_ln372_1_fu_247_p3;
wire   [3:0] add_ln374_fu_267_p2;
reg   [3:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 4'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 grp_xferode_128_128_1_0_1_0_129_3_3_s_fu_160_ap_start_reg = 1'b0;
end

erosion_accel_xferode_128_128_1_0_1_0_129_3_3_s grp_xferode_128_128_1_0_1_0_129_3_3_s_fu_160(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_xferode_128_128_1_0_1_0_129_3_3_s_fu_160_ap_start),
    .ap_done(grp_xferode_128_128_1_0_1_0_129_3_3_s_fu_160_ap_done),
    .ap_idle(grp_xferode_128_128_1_0_1_0_129_3_3_s_fu_160_ap_idle),
    .ap_ready(grp_xferode_128_128_1_0_1_0_129_3_3_s_fu_160_ap_ready),
    .imgInput_417_dout(imgInput_417_dout),
    .imgInput_417_empty_n(imgInput_417_empty_n),
    .imgInput_417_read(grp_xferode_128_128_1_0_1_0_129_3_3_s_fu_160_imgInput_417_read),
    .imgOutput_418_din(grp_xferode_128_128_1_0_1_0_129_3_3_s_fu_160_imgOutput_418_din),
    .imgOutput_418_full_n(imgOutput_418_full_n),
    .imgOutput_418_write(grp_xferode_128_128_1_0_1_0_129_3_3_s_fu_160_imgOutput_418_write),
    .img_height(trunc_ln344_reg_510),
    .img_width(trunc_ln345_reg_515),
    .p_read(kernel_2_2_fu_66),
    .p_read1(kernel_2_2_1_fu_70),
    .p_read2(kernel_2_2_2_fu_74),
    .p_read3(kernel_2_2_3_fu_78),
    .p_read4(kernel_2_2_4_fu_82),
    .p_read5(kernel_2_2_5_fu_86),
    .p_read6(kernel_2_2_6_fu_90),
    .p_read7(kernel_2_2_7_fu_94),
    .p_read8(kernel_2_2_8_fu_98)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state5) & (grp_xferode_128_128_1_0_1_0_129_3_3_s_fu_160_ap_done == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state2))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((~((ap_start == 1'b0) | (p_src_2_empty_n == 1'b0) | (p_src_1_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state2))) begin
            ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state2);
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if ((~((ap_start == 1'b0) | (p_src_2_empty_n == 1'b0) | (p_src_1_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_xferode_128_128_1_0_1_0_129_3_3_s_fu_160_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state4)) begin
            grp_xferode_128_128_1_0_1_0_129_3_3_s_fu_160_ap_start_reg <= 1'b1;
        end else if ((grp_xferode_128_128_1_0_1_0_129_3_3_s_fu_160_ap_ready == 1'b1)) begin
            grp_xferode_128_128_1_0_1_0_129_3_3_s_fu_160_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln372_reg_437 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        i_reg_138 <= select_ln372_2_reg_450;
    end else if ((~((ap_start == 1'b0) | (p_src_2_empty_n == 1'b0) | (p_src_1_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        i_reg_138 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln372_fu_197_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        indvar_flatten_reg_127 <= add_ln372_fu_203_p2;
    end else if ((~((ap_start == 1'b0) | (p_src_2_empty_n == 1'b0) | (p_src_1_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten_reg_127 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln372_fu_197_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        j_reg_149 <= add_ln373_fu_278_p2;
    end else if ((~((ap_start == 1'b0) | (p_src_2_empty_n == 1'b0) | (p_src_1_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        j_reg_149 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln372_reg_437 <= icmp_ln372_fu_197_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((select_ln372_2_reg_450 == 2'd0) & (select_ln372_reg_446 == 2'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        kernel_2_2_1_fu_70 <= p_kernel_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((~(select_ln372_reg_446 == 2'd1) & ~(select_ln372_reg_446 == 2'd0) & (select_ln372_2_reg_450 == 2'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        kernel_2_2_2_fu_74 <= p_kernel_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((select_ln372_2_reg_450 == 2'd1) & (select_ln372_reg_446 == 2'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        kernel_2_2_3_fu_78 <= p_kernel_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((select_ln372_2_reg_450 == 2'd1) & (select_ln372_reg_446 == 2'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        kernel_2_2_4_fu_82 <= p_kernel_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((~(select_ln372_reg_446 == 2'd1) & ~(select_ln372_reg_446 == 2'd0) & (select_ln372_2_reg_450 == 2'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        kernel_2_2_5_fu_86 <= p_kernel_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((~(select_ln372_2_reg_450 == 2'd1) & ~(select_ln372_2_reg_450 == 2'd0) & (select_ln372_reg_446 == 2'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        kernel_2_2_6_fu_90 <= p_kernel_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((~(select_ln372_2_reg_450 == 2'd1) & ~(select_ln372_2_reg_450 == 2'd0) & (select_ln372_reg_446 == 2'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        kernel_2_2_7_fu_94 <= p_kernel_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((~(select_ln372_2_reg_450 == 2'd1) & ~(select_ln372_reg_446 == 2'd1) & ~(select_ln372_reg_446 == 2'd0) & ~(select_ln372_2_reg_450 == 2'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        kernel_2_2_8_fu_98 <= p_kernel_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((select_ln372_2_reg_450 == 2'd0) & (select_ln372_reg_446 == 2'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        kernel_2_2_fu_66 <= p_kernel_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_start == 1'b0) | (p_src_2_empty_n == 1'b0) | (p_src_1_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_src_1_read_reg_427 <= p_src_1_dout;
        p_src_2_read_reg_432 <= p_src_2_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln372_fu_197_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        select_ln372_2_reg_450 <= select_ln372_2_fu_255_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln372_fu_197_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        select_ln372_reg_446 <= select_ln372_fu_215_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        trunc_ln344_reg_510 <= trunc_ln344_fu_365_p1;
        trunc_ln345_reg_515 <= trunc_ln345_fu_369_p1;
    end
end

always @ (*) begin
    if ((icmp_ln372_fu_197_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) & (grp_xferode_128_128_1_0_1_0_129_3_3_s_fu_160_ap_done == 1'b1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (icmp_ln372_reg_437 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        ap_phi_mux_i_phi_fu_142_p4 = select_ln372_2_reg_450;
    end else begin
        ap_phi_mux_i_phi_fu_142_p4 = i_reg_138;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) & (grp_xferode_128_128_1_0_1_0_129_3_3_s_fu_160_ap_done == 1'b1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        imgInput_417_read = grp_xferode_128_128_1_0_1_0_129_3_3_s_fu_160_imgInput_417_read;
    end else begin
        imgInput_417_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        imgOutput_418_write = grp_xferode_128_128_1_0_1_0_129_3_3_s_fu_160_imgOutput_418_write;
    end else begin
        imgOutput_418_write = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        p_kernel_ce0 = 1'b1;
    end else begin
        p_kernel_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_src_1_blk_n = p_src_1_empty_n;
    end else begin
        p_src_1_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (p_src_2_empty_n == 1'b0) | (p_src_1_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_src_1_read = 1'b1;
    end else begin
        p_src_1_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_src_2_blk_n = p_src_2_empty_n;
    end else begin
        p_src_2_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (p_src_2_empty_n == 1'b0) | (p_src_1_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_src_2_read = 1'b1;
    end else begin
        p_src_2_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_start == 1'b0) | (p_src_2_empty_n == 1'b0) | (p_src_1_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if (~((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (icmp_ln372_fu_197_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (icmp_ln372_fu_197_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            if (((1'b1 == ap_CS_fsm_state5) & (grp_xferode_128_128_1_0_1_0_129_3_3_s_fu_160_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln372_1_fu_223_p2 = (ap_phi_mux_i_phi_fu_142_p4 + 2'd1);

assign add_ln372_fu_203_p2 = (indvar_flatten_reg_127 + 4'd1);

assign add_ln373_fu_278_p2 = (select_ln372_fu_215_p3 + 2'd1);

assign add_ln374_fu_267_p2 = (zext_ln374_fu_263_p1 + select_ln372_1_fu_247_p3);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd3];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | (p_src_2_empty_n == 1'b0) | (p_src_1_empty_n == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign grp_xferode_128_128_1_0_1_0_129_3_3_s_fu_160_ap_start = grp_xferode_128_128_1_0_1_0_129_3_3_s_fu_160_ap_start_reg;

assign i_cast_i_fu_179_p1 = ap_phi_mux_i_phi_fu_142_p4;

assign i_cast_i_mid1_fu_229_p1 = add_ln372_1_fu_223_p2;

assign icmp_ln372_fu_197_p2 = ((indvar_flatten_reg_127 == 4'd9) ? 1'b1 : 1'b0);

assign icmp_ln373_fu_209_p2 = ((j_reg_149 == 2'd3) ? 1'b1 : 1'b0);

assign imgOutput_418_din = grp_xferode_128_128_1_0_1_0_129_3_3_s_fu_160_imgOutput_418_din;

assign mul_i_fu_191_p2 = (p_shl_i_fu_183_p3 - i_cast_i_fu_179_p1);

assign mul_i_mid1_fu_241_p2 = (p_shl_i_mid1_fu_233_p3 - i_cast_i_mid1_fu_229_p1);

assign p_kernel_address0 = zext_ln374_1_fu_273_p1;

assign p_shl_i_fu_183_p3 = {{ap_phi_mux_i_phi_fu_142_p4}, {2'd0}};

assign p_shl_i_mid1_fu_233_p3 = {{add_ln372_1_fu_223_p2}, {2'd0}};

assign select_ln372_1_fu_247_p3 = ((icmp_ln373_fu_209_p2[0:0] === 1'b1) ? mul_i_mid1_fu_241_p2 : mul_i_fu_191_p2);

assign select_ln372_2_fu_255_p3 = ((icmp_ln373_fu_209_p2[0:0] === 1'b1) ? add_ln372_1_fu_223_p2 : ap_phi_mux_i_phi_fu_142_p4);

assign select_ln372_fu_215_p3 = ((icmp_ln373_fu_209_p2[0:0] === 1'b1) ? 2'd0 : j_reg_149);

assign trunc_ln344_fu_365_p1 = p_src_1_read_reg_427[15:0];

assign trunc_ln345_fu_369_p1 = p_src_2_read_reg_432[15:0];

assign zext_ln374_1_fu_273_p1 = add_ln374_fu_267_p2;

assign zext_ln374_fu_263_p1 = select_ln372_fu_215_p3;

endmodule //erosion_accel_erode_0_0_128_128_2_3_3_1_1_s
