// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module erosion_accel_AxiStream2MatStream (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        ldata1_dout,
        ldata1_empty_n,
        ldata1_read,
        imgInput_417_din,
        imgInput_417_full_n,
        imgInput_417_write,
        rows_dout,
        rows_empty_n,
        rows_read,
        cols_bound_per_npc_dout,
        cols_bound_per_npc_empty_n,
        cols_bound_per_npc_read,
        last_blk_width_dout,
        last_blk_width_empty_n,
        last_blk_width_read
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_pp0_stage0 = 3'd2;
parameter    ap_ST_fsm_state4 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [7:0] ldata1_dout;
input   ldata1_empty_n;
output   ldata1_read;
output  [7:0] imgInput_417_din;
input   imgInput_417_full_n;
output   imgInput_417_write;
input  [31:0] rows_dout;
input   rows_empty_n;
output   rows_read;
input  [31:0] cols_bound_per_npc_dout;
input   cols_bound_per_npc_empty_n;
output   cols_bound_per_npc_read;
input  [3:0] last_blk_width_dout;
input   last_blk_width_empty_n;
output   last_blk_width_read;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg ldata1_read;
reg imgInput_417_write;
reg rows_read;
reg cols_bound_per_npc_read;
reg last_blk_width_read;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ldata1_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] icmp_ln1038_reg_747;
reg   [0:0] icmp_ln1049_reg_756;
reg    imgInput_417_blk_n;
reg    rows_blk_n;
reg    cols_bound_per_npc_blk_n;
reg    last_blk_width_blk_n;
reg   [31:0] j_reg_131;
reg   [30:0] i_reg_142;
reg   [3:0] last_blk_width_1_reg_722;
reg    ap_block_state1;
wire   [31:0] bound_fu_177_p2;
reg   [31:0] bound_reg_727;
wire   [31:0] sub_i_fu_183_p2;
reg   [31:0] sub_i_reg_732;
wire   [4:0] sub2_i_fu_189_p2;
reg   [4:0] sub2_i_reg_737;
wire   [4:0] add_ln1057_fu_195_p2;
reg   [4:0] add_ln1057_reg_742;
wire   [0:0] icmp_ln1038_fu_215_p2;
wire    ap_block_state2_pp0_stage0_iter0;
reg    ap_predicate_op104_read_state3;
reg    ap_block_state3_pp0_stage0_iter1;
reg    ap_block_pp0_stage0_11001;
wire   [30:0] add_ln1038_fu_220_p2;
reg    ap_enable_reg_pp0_iter0;
wire   [0:0] icmp_ln1049_fu_261_p2;
wire   [0:0] icmp_ln674_1_fu_284_p2;
reg   [0:0] icmp_ln674_1_reg_760;
wire   [3:0] trunc_ln674_1_fu_290_p1;
reg   [3:0] trunc_ln674_1_reg_767;
wire   [3:0] trunc_ln674_2_fu_294_p1;
reg   [3:0] trunc_ln674_2_reg_775;
wire   [0:0] icmp_ln1050_fu_309_p2;
reg   [0:0] icmp_ln1050_reg_781;
wire   [3:0] trunc_ln1051_fu_315_p1;
reg   [3:0] trunc_ln1051_reg_786;
wire   [0:0] icmp_ln674_fu_329_p2;
reg   [0:0] icmp_ln674_reg_791;
wire   [3:0] trunc_ln674_fu_335_p1;
reg   [3:0] trunc_ln674_reg_798;
wire   [3:0] add_ln674_1_fu_363_p2;
reg   [3:0] add_ln674_1_reg_805;
wire   [0:0] icmp_ln414_fu_369_p2;
reg   [0:0] icmp_ln414_reg_810;
wire   [3:0] trunc_ln414_fu_375_p1;
reg   [3:0] trunc_ln414_reg_818;
wire   [3:0] trunc_ln414_1_fu_379_p1;
reg   [3:0] trunc_ln414_1_reg_826;
wire   [31:0] j_2_fu_400_p3;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg   [7:0] ap_phi_mux_empty_phi_fu_156_p4;
wire   [7:0] p_Result_12_fu_695_p2;
wire   [7:0] ap_phi_reg_pp0_iter1_empty_reg_153;
wire   [7:0] p_Result_13_fu_480_p2;
reg   [31:0] rem_fu_92;
wire   [31:0] rem_2_fu_298_p2;
wire   [31:0] rem_1_fu_383_p2;
reg   [7:0] p_Val2_s_fu_96;
reg    ap_block_pp0_stage0_01001;
wire  signed [31:0] sub_i_fu_183_p0;
wire   [4:0] last_blk_width_cast_i_fu_173_p1;
wire   [31:0] zext_ln1027_fu_211_p1;
wire   [0:0] bLast_fu_230_p2;
wire   [3:0] xf_bits_per_clock_fu_235_p3;
wire   [4:0] ptr_width_minus_fu_250_p3;
wire   [31:0] zext_ln1044_fu_242_p1;
wire   [4:0] select_ln1057_fu_267_p3;
wire   [31:0] zext_ln1057_fu_274_p1;
wire   [31:0] grp_fu_163_p2;
wire   [31:0] sub_ln1057_fu_278_p2;
wire   [28:0] tmp_fu_319_p4;
wire   [4:0] zext_ln1044_1_fu_246_p1;
wire  signed [4:0] add_ln1054_fu_339_p2;
wire   [3:0] trunc_ln1054_1_fu_353_p1;
wire   [3:0] trunc_ln1054_fu_349_p1;
wire   [3:0] sub_ln674_3_fu_357_p2;
wire  signed [31:0] sext_ln1054_fu_345_p1;
wire  signed [31:0] sext_ln1045_fu_257_p1;
wire   [31:0] add_ln1061_fu_394_p2;
wire   [3:0] sub_ln674_4_fu_421_p2;
wire   [3:0] sub_ln674_6_fu_430_p2;
reg   [7:0] tmp_4_fu_411_p4;
wire   [3:0] sub_ln674_5_fu_425_p2;
wire   [3:0] select_ln674_3_fu_434_p3;
wire   [3:0] select_ln674_5_fu_448_p3;
wire   [3:0] sub_ln674_7_fu_454_p2;
wire   [7:0] select_ln674_4_fu_441_p3;
wire   [7:0] zext_ln674_3_fu_460_p1;
wire   [7:0] zext_ln674_4_fu_464_p1;
wire   [7:0] lshr_ln674_3_fu_468_p2;
wire   [7:0] lshr_ln674_4_fu_474_p2;
wire   [3:0] add_ln674_fu_497_p2;
wire   [3:0] grp_fu_168_p2;
reg   [7:0] tmp_2_fu_487_p4;
wire   [3:0] select_ln674_fu_502_p3;
wire   [3:0] select_ln674_2_fu_516_p3;
wire   [3:0] sub_ln674_2_fu_522_p2;
wire   [7:0] select_ln674_1_fu_509_p3;
wire   [7:0] zext_ln674_fu_528_p1;
wire   [7:0] zext_ln674_1_fu_532_p1;
wire   [7:0] lshr_ln674_fu_536_p2;
wire   [7:0] lshr_ln674_1_fu_542_p2;
wire   [3:0] sub_ln414_fu_554_p2;
wire   [7:0] zext_ln414_fu_559_p1;
wire   [7:0] p_Result_14_fu_548_p2;
wire   [7:0] lshr_ln414_fu_563_p2;
wire   [7:0] p_Result_s_fu_569_p2;
wire   [7:0] zext_ln674_2_fu_582_p1;
wire   [7:0] lshr_ln674_2_fu_585_p2;
wire   [3:0] sub_ln414_1_fu_597_p2;
wire   [3:0] select_ln414_fu_602_p3;
wire   [3:0] select_ln414_2_fu_612_p3;
wire   [3:0] select_ln414_1_fu_607_p3;
wire   [3:0] sub_ln414_2_fu_618_p2;
wire   [7:0] p_Result_15_fu_591_p2;
wire   [7:0] zext_ln414_1_fu_624_p1;
wire   [7:0] shl_ln414_fu_636_p2;
reg   [7:0] tmp_3_fu_642_p4;
wire   [7:0] zext_ln414_2_fu_628_p1;
wire   [7:0] zext_ln414_3_fu_632_p1;
wire   [7:0] shl_ln414_1_fu_659_p2;
wire   [7:0] lshr_ln414_1_fu_665_p2;
wire   [7:0] and_ln414_fu_671_p2;
wire   [7:0] p_Val2_4_fu_575_p3;
wire   [7:0] xor_ln414_fu_677_p2;
wire   [7:0] select_ln414_3_fu_652_p3;
wire   [7:0] and_ln414_1_fu_683_p2;
wire   [7:0] and_ln414_2_fu_689_p2;
wire    ap_CS_fsm_state4;
reg   [2:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 3'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
end

erosion_accel_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U45(
    .din0(cols_bound_per_npc_dout),
    .din1(rows_dout),
    .dout(bound_fu_177_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state4)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state2))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((~((ap_start == 1'b0) | (last_blk_width_empty_n == 1'b0) | (cols_bound_per_npc_empty_n == 1'b0) | (rows_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state2))) begin
            ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state2);
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if ((~((ap_start == 1'b0) | (last_blk_width_empty_n == 1'b0) | (cols_bound_per_npc_empty_n == 1'b0) | (rows_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln1038_fu_215_p2 == 1'd1))) begin
        i_reg_142 <= add_ln1038_fu_220_p2;
    end else if ((~((ap_start == 1'b0) | (last_blk_width_empty_n == 1'b0) | (cols_bound_per_npc_empty_n == 1'b0) | (rows_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        i_reg_142 <= 31'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln1038_fu_215_p2 == 1'd1))) begin
        j_reg_131 <= j_2_fu_400_p3;
    end else if ((~((ap_start == 1'b0) | (last_blk_width_empty_n == 1'b0) | (cols_bound_per_npc_empty_n == 1'b0) | (rows_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        j_reg_131 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln1049_reg_756 == 1'd1) & (icmp_ln1038_reg_747 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        p_Val2_s_fu_96 <= ldata1_dout;
    end else if ((~((ap_start == 1'b0) | (last_blk_width_empty_n == 1'b0) | (cols_bound_per_npc_empty_n == 1'b0) | (rows_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_Val2_s_fu_96 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln1049_fu_261_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln1038_fu_215_p2 == 1'd1))) begin
        rem_fu_92 <= rem_1_fu_383_p2;
    end else if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln1049_fu_261_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln1038_fu_215_p2 == 1'd1))) begin
        rem_fu_92 <= rem_2_fu_298_p2;
    end else if ((~((ap_start == 1'b0) | (last_blk_width_empty_n == 1'b0) | (cols_bound_per_npc_empty_n == 1'b0) | (rows_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        rem_fu_92 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_start == 1'b0) | (last_blk_width_empty_n == 1'b0) | (cols_bound_per_npc_empty_n == 1'b0) | (rows_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        add_ln1057_reg_742 <= add_ln1057_fu_195_p2;
        bound_reg_727 <= bound_fu_177_p2;
        last_blk_width_1_reg_722 <= last_blk_width_dout;
        sub2_i_reg_737 <= sub2_i_fu_189_p2;
        sub_i_reg_732 <= sub_i_fu_183_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln1049_fu_261_p2 == 1'd1) & (icmp_ln1038_fu_215_p2 == 1'd1))) begin
        add_ln674_1_reg_805 <= add_ln674_1_fu_363_p2;
        icmp_ln1050_reg_781 <= icmp_ln1050_fu_309_p2;
        icmp_ln414_reg_810 <= icmp_ln414_fu_369_p2;
        icmp_ln674_reg_791 <= icmp_ln674_fu_329_p2;
        trunc_ln1051_reg_786 <= trunc_ln1051_fu_315_p1;
        trunc_ln414_1_reg_826 <= trunc_ln414_1_fu_379_p1;
        trunc_ln414_reg_818 <= trunc_ln414_fu_375_p1;
        trunc_ln674_reg_798 <= trunc_ln674_fu_335_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln1038_reg_747 <= icmp_ln1038_fu_215_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln1038_fu_215_p2 == 1'd1))) begin
        icmp_ln1049_reg_756 <= icmp_ln1049_fu_261_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln1049_fu_261_p2 == 1'd0) & (icmp_ln1038_fu_215_p2 == 1'd1))) begin
        icmp_ln674_1_reg_760 <= icmp_ln674_1_fu_284_p2;
        trunc_ln674_1_reg_767 <= trunc_ln674_1_fu_290_p1;
        trunc_ln674_2_reg_775 <= trunc_ln674_2_fu_294_p1;
    end
end

always @ (*) begin
    if ((icmp_ln1038_fu_215_p2 == 1'd0)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln1038_reg_747 == 1'd1)) begin
        if ((icmp_ln1049_reg_756 == 1'd0)) begin
            ap_phi_mux_empty_phi_fu_156_p4 = p_Result_13_fu_480_p2;
        end else if ((icmp_ln1049_reg_756 == 1'd1)) begin
            ap_phi_mux_empty_phi_fu_156_p4 = p_Result_12_fu_695_p2;
        end else begin
            ap_phi_mux_empty_phi_fu_156_p4 = ap_phi_reg_pp0_iter1_empty_reg_153;
        end
    end else begin
        ap_phi_mux_empty_phi_fu_156_p4 = ap_phi_reg_pp0_iter1_empty_reg_153;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        cols_bound_per_npc_blk_n = cols_bound_per_npc_empty_n;
    end else begin
        cols_bound_per_npc_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (last_blk_width_empty_n == 1'b0) | (cols_bound_per_npc_empty_n == 1'b0) | (rows_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        cols_bound_per_npc_read = 1'b1;
    end else begin
        cols_bound_per_npc_read = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln1038_reg_747 == 1'd1) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        imgInput_417_blk_n = imgInput_417_full_n;
    end else begin
        imgInput_417_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln1038_reg_747 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        imgInput_417_write = 1'b1;
    end else begin
        imgInput_417_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        last_blk_width_blk_n = last_blk_width_empty_n;
    end else begin
        last_blk_width_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (last_blk_width_empty_n == 1'b0) | (cols_bound_per_npc_empty_n == 1'b0) | (rows_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        last_blk_width_read = 1'b1;
    end else begin
        last_blk_width_read = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln1049_reg_756 == 1'd1) & (icmp_ln1038_reg_747 == 1'd1) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ldata1_blk_n = ldata1_empty_n;
    end else begin
        ldata1_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_predicate_op104_read_state3 == 1'b1))) begin
        ldata1_read = 1'b1;
    end else begin
        ldata1_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        rows_blk_n = rows_empty_n;
    end else begin
        rows_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (last_blk_width_empty_n == 1'b0) | (cols_bound_per_npc_empty_n == 1'b0) | (rows_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        rows_read = 1'b1;
    end else begin
        rows_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_start == 1'b0) | (last_blk_width_empty_n == 1'b0) | (cols_bound_per_npc_empty_n == 1'b0) | (rows_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if (~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln1038_fu_215_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln1038_fu_215_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln1038_fu_220_p2 = (i_reg_142 + 31'd1);

assign add_ln1054_fu_339_p2 = ($signed(5'd31) + $signed(zext_ln1044_1_fu_246_p1));

assign add_ln1057_fu_195_p2 = (last_blk_width_cast_i_fu_173_p1 + 5'd7);

assign add_ln1061_fu_394_p2 = (j_reg_131 + 32'd1);

assign add_ln674_1_fu_363_p2 = (4'd7 + sub_ln674_3_fu_357_p2);

assign add_ln674_fu_497_p2 = ($signed(4'd9) + $signed(trunc_ln674_reg_798));

assign and_ln414_1_fu_683_p2 = (xor_ln414_fu_677_p2 & p_Val2_4_fu_575_p3);

assign and_ln414_2_fu_689_p2 = (select_ln414_3_fu_652_p3 & and_ln414_fu_671_p2);

assign and_ln414_fu_671_p2 = (shl_ln414_1_fu_659_p2 & lshr_ln414_1_fu_665_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((ap_enable_reg_pp0_iter1 == 1'b1) & (((icmp_ln1038_reg_747 == 1'd1) & (imgInput_417_full_n == 1'b0)) | ((ldata1_empty_n == 1'b0) & (ap_predicate_op104_read_state3 == 1'b1))));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_enable_reg_pp0_iter1 == 1'b1) & (((icmp_ln1038_reg_747 == 1'd1) & (imgInput_417_full_n == 1'b0)) | ((ldata1_empty_n == 1'b0) & (ap_predicate_op104_read_state3 == 1'b1))));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_enable_reg_pp0_iter1 == 1'b1) & (((icmp_ln1038_reg_747 == 1'd1) & (imgInput_417_full_n == 1'b0)) | ((ldata1_empty_n == 1'b0) & (ap_predicate_op104_read_state3 == 1'b1))));
end

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | (last_blk_width_empty_n == 1'b0) | (cols_bound_per_npc_empty_n == 1'b0) | (rows_empty_n == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state3_pp0_stage0_iter1 = (((icmp_ln1038_reg_747 == 1'd1) & (imgInput_417_full_n == 1'b0)) | ((ldata1_empty_n == 1'b0) & (ap_predicate_op104_read_state3 == 1'b1)));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_phi_reg_pp0_iter1_empty_reg_153 = 'bx;

always @ (*) begin
    ap_predicate_op104_read_state3 = ((icmp_ln1049_reg_756 == 1'd1) & (icmp_ln1038_reg_747 == 1'd1));
end

assign bLast_fu_230_p2 = ((j_reg_131 == sub_i_reg_732) ? 1'b1 : 1'b0);

assign grp_fu_163_p2 = (32'd8 - rem_fu_92);

assign grp_fu_168_p2 = (4'd7 - trunc_ln674_reg_798);

assign icmp_ln1038_fu_215_p2 = (($signed(zext_ln1027_fu_211_p1) < $signed(bound_reg_727)) ? 1'b1 : 1'b0);

assign icmp_ln1049_fu_261_p2 = (($signed(rem_fu_92) < $signed(zext_ln1044_fu_242_p1)) ? 1'b1 : 1'b0);

assign icmp_ln1050_fu_309_p2 = ((rem_fu_92 == 32'd0) ? 1'b1 : 1'b0);

assign icmp_ln414_fu_369_p2 = ((rem_fu_92 > sext_ln1054_fu_345_p1) ? 1'b1 : 1'b0);

assign icmp_ln674_1_fu_284_p2 = ((grp_fu_163_p2 > sub_ln1057_fu_278_p2) ? 1'b1 : 1'b0);

assign icmp_ln674_fu_329_p2 = ((tmp_fu_319_p4 != 29'd0) ? 1'b1 : 1'b0);

assign imgInput_417_din = ap_phi_mux_empty_phi_fu_156_p4;

assign j_2_fu_400_p3 = ((bLast_fu_230_p2[0:0] === 1'b1) ? 32'd0 : add_ln1061_fu_394_p2);

assign last_blk_width_cast_i_fu_173_p1 = last_blk_width_dout;

assign lshr_ln414_1_fu_665_p2 = 8'd255 >> zext_ln414_3_fu_632_p1;

assign lshr_ln414_fu_563_p2 = 8'd255 >> zext_ln414_fu_559_p1;

assign lshr_ln674_1_fu_542_p2 = 8'd255 >> zext_ln674_1_fu_532_p1;

assign lshr_ln674_2_fu_585_p2 = 8'd255 >> zext_ln674_2_fu_582_p1;

assign lshr_ln674_3_fu_468_p2 = select_ln674_4_fu_441_p3 >> zext_ln674_3_fu_460_p1;

assign lshr_ln674_4_fu_474_p2 = 8'd255 >> zext_ln674_4_fu_464_p1;

assign lshr_ln674_fu_536_p2 = select_ln674_1_fu_509_p3 >> zext_ln674_fu_528_p1;

assign p_Result_12_fu_695_p2 = (and_ln414_2_fu_689_p2 | and_ln414_1_fu_683_p2);

assign p_Result_13_fu_480_p2 = (lshr_ln674_4_fu_474_p2 & lshr_ln674_3_fu_468_p2);

assign p_Result_14_fu_548_p2 = (lshr_ln674_fu_536_p2 & lshr_ln674_1_fu_542_p2);

assign p_Result_15_fu_591_p2 = (lshr_ln674_2_fu_585_p2 & ldata1_dout);

assign p_Result_s_fu_569_p2 = (p_Result_14_fu_548_p2 & lshr_ln414_fu_563_p2);

assign p_Val2_4_fu_575_p3 = ((icmp_ln1050_reg_781[0:0] === 1'b1) ? 8'd0 : p_Result_s_fu_569_p2);

assign ptr_width_minus_fu_250_p3 = ((bLast_fu_230_p2[0:0] === 1'b1) ? sub2_i_reg_737 : 5'd0);

assign rem_1_fu_383_p2 = ($signed(sext_ln1045_fu_257_p1) + $signed(rem_fu_92));

assign rem_2_fu_298_p2 = (rem_fu_92 - zext_ln1044_fu_242_p1);

assign select_ln1057_fu_267_p3 = ((bLast_fu_230_p2[0:0] === 1'b1) ? add_ln1057_reg_742 : 5'd15);

assign select_ln414_1_fu_607_p3 = ((icmp_ln414_reg_810[0:0] === 1'b1) ? trunc_ln414_1_reg_826 : trunc_ln414_reg_818);

assign select_ln414_2_fu_612_p3 = ((icmp_ln414_reg_810[0:0] === 1'b1) ? sub_ln414_1_fu_597_p2 : trunc_ln414_reg_818);

assign select_ln414_3_fu_652_p3 = ((icmp_ln414_reg_810[0:0] === 1'b1) ? tmp_3_fu_642_p4 : shl_ln414_fu_636_p2);

assign select_ln414_fu_602_p3 = ((icmp_ln414_reg_810[0:0] === 1'b1) ? trunc_ln414_reg_818 : trunc_ln414_1_reg_826);

assign select_ln674_1_fu_509_p3 = ((icmp_ln674_reg_791[0:0] === 1'b1) ? tmp_2_fu_487_p4 : p_Val2_s_fu_96);

assign select_ln674_2_fu_516_p3 = ((icmp_ln674_reg_791[0:0] === 1'b1) ? grp_fu_168_p2 : trunc_ln674_reg_798);

assign select_ln674_3_fu_434_p3 = ((icmp_ln674_1_reg_760[0:0] === 1'b1) ? sub_ln674_4_fu_421_p2 : sub_ln674_6_fu_430_p2);

assign select_ln674_4_fu_441_p3 = ((icmp_ln674_1_reg_760[0:0] === 1'b1) ? tmp_4_fu_411_p4 : p_Val2_s_fu_96);

assign select_ln674_5_fu_448_p3 = ((icmp_ln674_1_reg_760[0:0] === 1'b1) ? sub_ln674_5_fu_425_p2 : trunc_ln674_1_reg_767);

assign select_ln674_fu_502_p3 = ((icmp_ln674_reg_791[0:0] === 1'b1) ? add_ln674_fu_497_p2 : grp_fu_168_p2);

assign sext_ln1045_fu_257_p1 = $signed(ptr_width_minus_fu_250_p3);

assign sext_ln1054_fu_345_p1 = add_ln1054_fu_339_p2;

assign shl_ln414_1_fu_659_p2 = 8'd255 << zext_ln414_2_fu_628_p1;

assign shl_ln414_fu_636_p2 = p_Result_15_fu_591_p2 << zext_ln414_1_fu_624_p1;

assign sub2_i_fu_189_p2 = (5'd8 - last_blk_width_cast_i_fu_173_p1);

assign sub_i_fu_183_p0 = cols_bound_per_npc_dout;

assign sub_i_fu_183_p2 = ($signed(sub_i_fu_183_p0) + $signed(32'd4294967295));

assign sub_ln1057_fu_278_p2 = (zext_ln1057_fu_274_p1 - rem_fu_92);

assign sub_ln414_1_fu_597_p2 = (4'd7 - trunc_ln414_reg_818);

assign sub_ln414_2_fu_618_p2 = (4'd7 - select_ln414_fu_602_p3);

assign sub_ln414_fu_554_p2 = ($signed(4'd8) - $signed(trunc_ln1051_reg_786));

assign sub_ln674_2_fu_522_p2 = (4'd7 - select_ln674_fu_502_p3);

assign sub_ln674_3_fu_357_p2 = (trunc_ln1054_1_fu_353_p1 - trunc_ln1054_fu_349_p1);

assign sub_ln674_4_fu_421_p2 = (trunc_ln674_1_reg_767 - trunc_ln674_2_reg_775);

assign sub_ln674_5_fu_425_p2 = (4'd7 - trunc_ln674_1_reg_767);

assign sub_ln674_6_fu_430_p2 = (trunc_ln674_2_reg_775 - trunc_ln674_1_reg_767);

assign sub_ln674_7_fu_454_p2 = (4'd7 - select_ln674_3_fu_434_p3);

integer ap_tvar_int_0;

always @ (p_Val2_s_fu_96) begin
    for (ap_tvar_int_0 = 8 - 1; ap_tvar_int_0 >= 0; ap_tvar_int_0 = ap_tvar_int_0 - 1) begin
        if (ap_tvar_int_0 > 7 - 0) begin
            tmp_2_fu_487_p4[ap_tvar_int_0] = 1'b0;
        end else begin
            tmp_2_fu_487_p4[ap_tvar_int_0] = p_Val2_s_fu_96[7 - ap_tvar_int_0];
        end
    end
end

integer ap_tvar_int_1;

always @ (shl_ln414_fu_636_p2) begin
    for (ap_tvar_int_1 = 8 - 1; ap_tvar_int_1 >= 0; ap_tvar_int_1 = ap_tvar_int_1 - 1) begin
        if (ap_tvar_int_1 > 7 - 0) begin
            tmp_3_fu_642_p4[ap_tvar_int_1] = 1'b0;
        end else begin
            tmp_3_fu_642_p4[ap_tvar_int_1] = shl_ln414_fu_636_p2[7 - ap_tvar_int_1];
        end
    end
end

integer ap_tvar_int_2;

always @ (p_Val2_s_fu_96) begin
    for (ap_tvar_int_2 = 8 - 1; ap_tvar_int_2 >= 0; ap_tvar_int_2 = ap_tvar_int_2 - 1) begin
        if (ap_tvar_int_2 > 7 - 0) begin
            tmp_4_fu_411_p4[ap_tvar_int_2] = 1'b0;
        end else begin
            tmp_4_fu_411_p4[ap_tvar_int_2] = p_Val2_s_fu_96[7 - ap_tvar_int_2];
        end
    end
end

assign tmp_fu_319_p4 = {{grp_fu_163_p2[31:3]}};

assign trunc_ln1051_fu_315_p1 = rem_fu_92[3:0];

assign trunc_ln1054_1_fu_353_p1 = rem_fu_92[3:0];

assign trunc_ln1054_fu_349_p1 = add_ln1054_fu_339_p2[3:0];

assign trunc_ln414_1_fu_379_p1 = add_ln1054_fu_339_p2[3:0];

assign trunc_ln414_fu_375_p1 = rem_fu_92[3:0];

assign trunc_ln674_1_fu_290_p1 = grp_fu_163_p2[3:0];

assign trunc_ln674_2_fu_294_p1 = sub_ln1057_fu_278_p2[3:0];

assign trunc_ln674_fu_335_p1 = grp_fu_163_p2[3:0];

assign xf_bits_per_clock_fu_235_p3 = ((bLast_fu_230_p2[0:0] === 1'b1) ? last_blk_width_1_reg_722 : 4'd8);

assign xor_ln414_fu_677_p2 = (8'd255 ^ and_ln414_fu_671_p2);

assign zext_ln1027_fu_211_p1 = i_reg_142;

assign zext_ln1044_1_fu_246_p1 = xf_bits_per_clock_fu_235_p3;

assign zext_ln1044_fu_242_p1 = xf_bits_per_clock_fu_235_p3;

assign zext_ln1057_fu_274_p1 = select_ln1057_fu_267_p3;

assign zext_ln414_1_fu_624_p1 = select_ln414_2_fu_612_p3;

assign zext_ln414_2_fu_628_p1 = select_ln414_1_fu_607_p3;

assign zext_ln414_3_fu_632_p1 = sub_ln414_2_fu_618_p2;

assign zext_ln414_fu_559_p1 = sub_ln414_fu_554_p2;

assign zext_ln674_1_fu_532_p1 = sub_ln674_2_fu_522_p2;

assign zext_ln674_2_fu_582_p1 = add_ln674_1_reg_805;

assign zext_ln674_3_fu_460_p1 = select_ln674_5_fu_448_p3;

assign zext_ln674_4_fu_464_p1 = sub_ln674_7_fu_454_p2;

assign zext_ln674_fu_528_p1 = select_ln674_2_fu_516_p3;

endmodule //erosion_accel_AxiStream2MatStream
