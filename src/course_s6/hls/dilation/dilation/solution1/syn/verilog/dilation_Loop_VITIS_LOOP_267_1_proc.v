// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module dilation_Loop_VITIS_LOOP_267_1_proc (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        kernel_0_address0,
        kernel_0_ce0,
        kernel_0_we0,
        kernel_0_d0,
        kernel_1_address0,
        kernel_1_ce0,
        kernel_1_we0,
        kernel_1_d0,
        kernel_2_address0,
        kernel_2_ce0,
        kernel_2_we0,
        kernel_2_d0
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_state2 = 3'd2;
parameter    ap_ST_fsm_state3 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output  [1:0] kernel_0_address0;
output   kernel_0_ce0;
output   kernel_0_we0;
output  [0:0] kernel_0_d0;
output  [1:0] kernel_1_address0;
output   kernel_1_ce0;
output   kernel_1_we0;
output  [0:0] kernel_1_d0;
output  [1:0] kernel_2_address0;
output   kernel_2_ce0;
output   kernel_2_we0;
output  [0:0] kernel_2_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg kernel_0_ce0;
reg kernel_0_we0;
reg kernel_1_ce0;
reg kernel_1_we0;
reg kernel_2_ce0;
reg kernel_2_we0;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [3:0] add_ln267_fu_123_p2;
wire    ap_CS_fsm_state2;
wire   [1:0] select_ln267_fu_149_p3;
wire   [0:0] icmp_ln267_fu_117_p2;
wire   [1:0] add_ln269_fu_164_p2;
reg   [3:0] indvar_flatten_reg_84;
reg    ap_block_state1;
reg   [1:0] i_reg_95;
reg   [1:0] j_1_reg_106;
wire   [63:0] j_1_cast_fu_157_p1;
wire   [0:0] icmp_ln269_fu_129_p2;
wire   [1:0] add_ln267_1_fu_143_p2;
wire   [1:0] select_ln266_fu_135_p3;
wire    ap_CS_fsm_state3;
reg   [2:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 3'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state3)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln267_fu_117_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        i_reg_95 <= select_ln267_fu_149_p3;
    end else if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        i_reg_95 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln267_fu_117_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        indvar_flatten_reg_84 <= add_ln267_fu_123_p2;
    end else if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten_reg_84 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln267_fu_117_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        j_1_reg_106 <= add_ln269_fu_164_p2;
    end else if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        j_1_reg_106 <= 2'd0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        kernel_0_ce0 = 1'b1;
    end else begin
        kernel_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln267_fu_117_p2 == 1'd0) & (select_ln267_fu_149_p3 == 2'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        kernel_0_we0 = 1'b1;
    end else begin
        kernel_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        kernel_1_ce0 = 1'b1;
    end else begin
        kernel_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln267_fu_117_p2 == 1'd0) & (select_ln267_fu_149_p3 == 2'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        kernel_1_we0 = 1'b1;
    end else begin
        kernel_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        kernel_2_ce0 = 1'b1;
    end else begin
        kernel_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((~(select_ln267_fu_149_p3 == 2'd0) & ~(select_ln267_fu_149_p3 == 2'd1) & (icmp_ln267_fu_117_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        kernel_2_we0 = 1'b1;
    end else begin
        kernel_2_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln267_fu_117_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln267_1_fu_143_p2 = (i_reg_95 + 2'd1);

assign add_ln267_fu_123_p2 = (indvar_flatten_reg_84 + 4'd1);

assign add_ln269_fu_164_p2 = (select_ln266_fu_135_p3 + 2'd1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | (ap_done_reg == 1'b1));
end

assign icmp_ln267_fu_117_p2 = ((indvar_flatten_reg_84 == 4'd9) ? 1'b1 : 1'b0);

assign icmp_ln269_fu_129_p2 = ((j_1_reg_106 == 2'd3) ? 1'b1 : 1'b0);

assign j_1_cast_fu_157_p1 = select_ln266_fu_135_p3;

assign kernel_0_address0 = j_1_cast_fu_157_p1;

assign kernel_0_d0 = 1'd1;

assign kernel_1_address0 = j_1_cast_fu_157_p1;

assign kernel_1_d0 = 1'd1;

assign kernel_2_address0 = j_1_cast_fu_157_p1;

assign kernel_2_d0 = 1'd1;

assign select_ln266_fu_135_p3 = ((icmp_ln269_fu_129_p2[0:0] === 1'b1) ? 2'd0 : j_1_reg_106);

assign select_ln267_fu_149_p3 = ((icmp_ln269_fu_129_p2[0:0] === 1'b1) ? add_ln267_1_fu_143_p2 : i_reg_95);

endmodule //dilation_Loop_VITIS_LOOP_267_1_proc
