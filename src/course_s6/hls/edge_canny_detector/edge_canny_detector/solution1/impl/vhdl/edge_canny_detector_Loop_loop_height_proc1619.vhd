-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity edge_canny_detector_Loop_loop_height_proc1619 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    start_full_n : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    start_out : OUT STD_LOGIC;
    start_write : OUT STD_LOGIC;
    src_TDATA : IN STD_LOGIC_VECTOR (23 downto 0);
    src_TVALID : IN STD_LOGIC;
    src_TREADY : OUT STD_LOGIC;
    src_TKEEP : IN STD_LOGIC_VECTOR (2 downto 0);
    src_TSTRB : IN STD_LOGIC_VECTOR (2 downto 0);
    src_TUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    src_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    src_TID : IN STD_LOGIC_VECTOR (0 downto 0);
    src_TDEST : IN STD_LOGIC_VECTOR (0 downto 0);
    rgb_img_src_data_din : OUT STD_LOGIC_VECTOR (23 downto 0);
    rgb_img_src_data_full_n : IN STD_LOGIC;
    rgb_img_src_data_write : OUT STD_LOGIC;
    lowthreshold : IN STD_LOGIC_VECTOR (7 downto 0);
    lowthreshold_ap_vld : IN STD_LOGIC;
    highthreshold : IN STD_LOGIC_VECTOR (7 downto 0);
    highthreshold_ap_vld : IN STD_LOGIC;
    lowthreshold_out_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    lowthreshold_out_full_n : IN STD_LOGIC;
    lowthreshold_out_write : OUT STD_LOGIC;
    highthreshold_out_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    highthreshold_out_full_n : IN STD_LOGIC;
    highthreshold_out_write : OUT STD_LOGIC );
end;


architecture behav of edge_canny_detector_Loop_loop_height_proc1619 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (5 downto 0) := "000010";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (5 downto 0) := "000100";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (5 downto 0) := "001000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (5 downto 0) := "010000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv11_438 : STD_LOGIC_VECTOR (10 downto 0) := "10000111000";
    constant ap_const_lv11_1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_const_lv32_780 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000011110000000";
    constant ap_const_lv32_FFFFFFFF : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111111";

attribute shreg_extract : string;
    signal real_start : STD_LOGIC;
    signal start_once_reg : STD_LOGIC := '0';
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal internal_ap_ready : STD_LOGIC;
    signal src_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_phi_mux_eol_2_phi_fu_211_p4 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal icmp_ln122_fu_243_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal rgb_img_src_data_blk_n : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal icmp_ln122_reg_315 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln134_reg_333 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln131_reg_329 : STD_LOGIC_VECTOR (0 downto 0);
    signal lowthreshold_blk_n : STD_LOGIC;
    signal highthreshold_blk_n : STD_LOGIC;
    signal lowthreshold_out_blk_n : STD_LOGIC;
    signal highthreshold_out_blk_n : STD_LOGIC;
    signal eol_reg_154 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_reg_166 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln119_fu_227_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal i_2_fu_233_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal i_2_reg_310 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_block_state3_pp0_stage0_iter0 : BOOLEAN;
    signal ap_predicate_op119_write_state4 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal axi_data_V_reg_319 : STD_LOGIC_VECTOR (23 downto 0);
    signal axi_last_V_1_reg_324 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln131_fu_269_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln134_fu_275_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_4_fu_288_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state6 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state3 : STD_LOGIC;
    signal i_reg_143 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_phi_mux_start_2_phi_fu_180_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter0_start_2_reg_177 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_start_3_phi_fu_190_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter0_start_3_reg_187 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_j_3_phi_fu_201_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter0_j_3_reg_198 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_2_fu_281_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal eol_2_reg_208 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal start_fu_86 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal icmp_ln131_fu_257_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln131_fu_263_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal regslice_both_src_V_data_V_U_apdone_blk : STD_LOGIC;
    signal src_TDATA_int_regslice : STD_LOGIC_VECTOR (23 downto 0);
    signal src_TVALID_int_regslice : STD_LOGIC;
    signal src_TREADY_int_regslice : STD_LOGIC;
    signal regslice_both_src_V_data_V_U_ack_in : STD_LOGIC;
    signal regslice_both_src_V_keep_V_U_apdone_blk : STD_LOGIC;
    signal src_TKEEP_int_regslice : STD_LOGIC_VECTOR (2 downto 0);
    signal regslice_both_src_V_keep_V_U_vld_out : STD_LOGIC;
    signal regslice_both_src_V_keep_V_U_ack_in : STD_LOGIC;
    signal regslice_both_src_V_strb_V_U_apdone_blk : STD_LOGIC;
    signal src_TSTRB_int_regslice : STD_LOGIC_VECTOR (2 downto 0);
    signal regslice_both_src_V_strb_V_U_vld_out : STD_LOGIC;
    signal regslice_both_src_V_strb_V_U_ack_in : STD_LOGIC;
    signal regslice_both_src_V_user_V_U_apdone_blk : STD_LOGIC;
    signal src_TUSER_int_regslice : STD_LOGIC_VECTOR (0 downto 0);
    signal regslice_both_src_V_user_V_U_vld_out : STD_LOGIC;
    signal regslice_both_src_V_user_V_U_ack_in : STD_LOGIC;
    signal regslice_both_src_V_last_V_U_apdone_blk : STD_LOGIC;
    signal src_TLAST_int_regslice : STD_LOGIC_VECTOR (0 downto 0);
    signal regslice_both_src_V_last_V_U_vld_out : STD_LOGIC;
    signal regslice_both_src_V_last_V_U_ack_in : STD_LOGIC;
    signal regslice_both_src_V_id_V_U_apdone_blk : STD_LOGIC;
    signal src_TID_int_regslice : STD_LOGIC_VECTOR (0 downto 0);
    signal regslice_both_src_V_id_V_U_vld_out : STD_LOGIC;
    signal regslice_both_src_V_id_V_U_ack_in : STD_LOGIC;
    signal regslice_both_src_V_dest_V_U_apdone_blk : STD_LOGIC;
    signal src_TDEST_int_regslice : STD_LOGIC_VECTOR (0 downto 0);
    signal regslice_both_src_V_dest_V_U_vld_out : STD_LOGIC;
    signal regslice_both_src_V_dest_V_U_ack_in : STD_LOGIC;

    component regslice_both IS
    generic (
        DataWidth : INTEGER );
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        data_in : IN STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_in : IN STD_LOGIC;
        ack_in : OUT STD_LOGIC;
        data_out : OUT STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_out : OUT STD_LOGIC;
        ack_out : IN STD_LOGIC;
        apdone_blk : OUT STD_LOGIC );
    end component;



begin
    regslice_both_src_V_data_V_U : component regslice_both
    generic map (
        DataWidth => 24)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        data_in => src_TDATA,
        vld_in => src_TVALID,
        ack_in => regslice_both_src_V_data_V_U_ack_in,
        data_out => src_TDATA_int_regslice,
        vld_out => src_TVALID_int_regslice,
        ack_out => src_TREADY_int_regslice,
        apdone_blk => regslice_both_src_V_data_V_U_apdone_blk);

    regslice_both_src_V_keep_V_U : component regslice_both
    generic map (
        DataWidth => 3)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        data_in => src_TKEEP,
        vld_in => src_TVALID,
        ack_in => regslice_both_src_V_keep_V_U_ack_in,
        data_out => src_TKEEP_int_regslice,
        vld_out => regslice_both_src_V_keep_V_U_vld_out,
        ack_out => src_TREADY_int_regslice,
        apdone_blk => regslice_both_src_V_keep_V_U_apdone_blk);

    regslice_both_src_V_strb_V_U : component regslice_both
    generic map (
        DataWidth => 3)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        data_in => src_TSTRB,
        vld_in => src_TVALID,
        ack_in => regslice_both_src_V_strb_V_U_ack_in,
        data_out => src_TSTRB_int_regslice,
        vld_out => regslice_both_src_V_strb_V_U_vld_out,
        ack_out => src_TREADY_int_regslice,
        apdone_blk => regslice_both_src_V_strb_V_U_apdone_blk);

    regslice_both_src_V_user_V_U : component regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        data_in => src_TUSER,
        vld_in => src_TVALID,
        ack_in => regslice_both_src_V_user_V_U_ack_in,
        data_out => src_TUSER_int_regslice,
        vld_out => regslice_both_src_V_user_V_U_vld_out,
        ack_out => src_TREADY_int_regslice,
        apdone_blk => regslice_both_src_V_user_V_U_apdone_blk);

    regslice_both_src_V_last_V_U : component regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        data_in => src_TLAST,
        vld_in => src_TVALID,
        ack_in => regslice_both_src_V_last_V_U_ack_in,
        data_out => src_TLAST_int_regslice,
        vld_out => regslice_both_src_V_last_V_U_vld_out,
        ack_out => src_TREADY_int_regslice,
        apdone_blk => regslice_both_src_V_last_V_U_apdone_blk);

    regslice_both_src_V_id_V_U : component regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        data_in => src_TID,
        vld_in => src_TVALID,
        ack_in => regslice_both_src_V_id_V_U_ack_in,
        data_out => src_TID_int_regslice,
        vld_out => regslice_both_src_V_id_V_U_vld_out,
        ack_out => src_TREADY_int_regslice,
        apdone_blk => regslice_both_src_V_id_V_U_apdone_blk);

    regslice_both_src_V_dest_V_U : component regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        data_in => src_TDEST,
        vld_in => src_TVALID,
        ack_in => regslice_both_src_V_dest_V_U_ack_in,
        data_out => src_TDEST_int_regslice,
        vld_out => regslice_both_src_V_dest_V_U_vld_out,
        ack_out => src_TREADY_int_regslice,
        apdone_blk => regslice_both_src_V_dest_V_U_apdone_blk);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln119_fu_227_p2 = ap_const_lv1_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state3))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln119_fu_227_p2 = ap_const_lv1_0))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state3))) then 
                    ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state3);
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln119_fu_227_p2 = ap_const_lv1_0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    start_once_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                start_once_reg <= ap_const_logic_0;
            else
                if (((internal_ap_ready = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
                    start_once_reg <= ap_const_logic_1;
                elsif ((internal_ap_ready = ap_const_logic_1)) then 
                    start_once_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    eol_2_reg_208_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                eol_2_reg_208 <= eol_reg_154;
            elsif ((not(((eol_2_reg_208 = ap_const_lv1_0) and (src_TVALID_int_regslice = ap_const_logic_0))) and (eol_2_reg_208 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                eol_2_reg_208 <= src_TLAST_int_regslice;
            end if; 
        end if;
    end process;

    eol_reg_154_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln122_reg_315 = ap_const_lv1_1))) then 
                eol_reg_154 <= axi_last_V_1_reg_324;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln119_fu_227_p2 = ap_const_lv1_0))) then 
                eol_reg_154 <= ap_const_lv1_0;
            end if; 
        end if;
    end process;

    i_reg_143_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                i_reg_143 <= i_2_reg_310;
            elsif ((not(((highthreshold_out_full_n = ap_const_logic_0) or (lowthreshold_out_full_n = ap_const_logic_0) or (highthreshold_ap_vld = ap_const_logic_0) or (lowthreshold_ap_vld = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (real_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_reg_143 <= ap_const_lv11_0;
            end if; 
        end if;
    end process;

    j_reg_166_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln122_fu_243_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                j_reg_166 <= j_4_fu_288_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln119_fu_227_p2 = ap_const_lv1_0))) then 
                j_reg_166 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    start_fu_86_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln122_fu_243_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                start_fu_86 <= ap_phi_mux_start_3_phi_fu_190_p4;
            elsif ((not(((highthreshold_out_full_n = ap_const_logic_0) or (lowthreshold_out_full_n = ap_const_logic_0) or (highthreshold_ap_vld = ap_const_logic_0) or (lowthreshold_ap_vld = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (real_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                start_fu_86 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln122_fu_243_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                axi_data_V_reg_319 <= src_TDATA_int_regslice;
                or_ln131_reg_329 <= or_ln131_fu_269_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln122_fu_243_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                axi_last_V_1_reg_324 <= src_TLAST_int_regslice;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                i_2_reg_310 <= i_2_fu_233_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln122_reg_315 <= icmp_ln122_fu_243_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln122_fu_243_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (or_ln131_fu_269_p2 = ap_const_lv1_1))) then
                or_ln134_reg_333 <= or_ln134_fu_275_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (real_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, lowthreshold_ap_vld, highthreshold_ap_vld, lowthreshold_out_full_n, highthreshold_out_full_n, ap_CS_fsm_state6, ap_phi_mux_eol_2_phi_fu_211_p4, ap_enable_reg_pp0_iter0, icmp_ln122_fu_243_p2, icmp_ln119_fu_227_p2, ap_CS_fsm_state2, ap_block_pp0_stage0_subdone, eol_2_reg_208, src_TVALID_int_regslice)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((highthreshold_out_full_n = ap_const_logic_0) or (lowthreshold_out_full_n = ap_const_logic_0) or (highthreshold_ap_vld = ap_const_logic_0) or (lowthreshold_ap_vld = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (real_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln119_fu_227_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if (not(((icmp_ln122_fu_243_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((icmp_ln122_fu_243_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                if ((not(((eol_2_reg_208 = ap_const_lv1_0) and (src_TVALID_int_regslice = ap_const_logic_0))) and (eol_2_reg_208 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                elsif ((not(((eol_2_reg_208 = ap_const_lv1_0) and (src_TVALID_int_regslice = ap_const_logic_0))) and (ap_phi_mux_eol_2_phi_fu_211_p4 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when others =>  
                ap_NS_fsm <= "XXXXXX";
        end case;
    end process;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state5 <= ap_CS_fsm(3);
    ap_CS_fsm_state6 <= ap_CS_fsm(4);
    ap_CS_fsm_state7 <= ap_CS_fsm(5);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(rgb_img_src_data_full_n, ap_enable_reg_pp0_iter0, icmp_ln122_fu_243_p2, ap_enable_reg_pp0_iter1, ap_predicate_op119_write_state4, src_TVALID_int_regslice)
    begin
                ap_block_pp0_stage0_01001 <= (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (rgb_img_src_data_full_n = ap_const_logic_0) and (ap_predicate_op119_write_state4 = ap_const_boolean_1)) or ((icmp_ln122_fu_243_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (src_TVALID_int_regslice = ap_const_logic_0)));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(rgb_img_src_data_full_n, ap_enable_reg_pp0_iter0, icmp_ln122_fu_243_p2, ap_enable_reg_pp0_iter1, ap_predicate_op119_write_state4, src_TVALID_int_regslice)
    begin
                ap_block_pp0_stage0_11001 <= (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (rgb_img_src_data_full_n = ap_const_logic_0) and (ap_predicate_op119_write_state4 = ap_const_boolean_1)) or ((icmp_ln122_fu_243_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (src_TVALID_int_regslice = ap_const_logic_0)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(rgb_img_src_data_full_n, ap_enable_reg_pp0_iter0, icmp_ln122_fu_243_p2, ap_enable_reg_pp0_iter1, ap_predicate_op119_write_state4, src_TVALID_int_regslice)
    begin
                ap_block_pp0_stage0_subdone <= (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (rgb_img_src_data_full_n = ap_const_logic_0) and (ap_predicate_op119_write_state4 = ap_const_boolean_1)) or ((icmp_ln122_fu_243_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (src_TVALID_int_regslice = ap_const_logic_0)));
    end process;


    ap_block_state1_assign_proc : process(real_start, ap_done_reg, lowthreshold_ap_vld, highthreshold_ap_vld, lowthreshold_out_full_n, highthreshold_out_full_n)
    begin
                ap_block_state1 <= ((highthreshold_out_full_n = ap_const_logic_0) or (lowthreshold_out_full_n = ap_const_logic_0) or (highthreshold_ap_vld = ap_const_logic_0) or (lowthreshold_ap_vld = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (real_start = ap_const_logic_0));
    end process;


    ap_block_state3_pp0_stage0_iter0_assign_proc : process(icmp_ln122_fu_243_p2, src_TVALID_int_regslice)
    begin
                ap_block_state3_pp0_stage0_iter0 <= ((icmp_ln122_fu_243_p2 = ap_const_lv1_1) and (src_TVALID_int_regslice = ap_const_logic_0));
    end process;


    ap_block_state4_pp0_stage0_iter1_assign_proc : process(rgb_img_src_data_full_n, ap_predicate_op119_write_state4)
    begin
                ap_block_state4_pp0_stage0_iter1 <= ((rgb_img_src_data_full_n = ap_const_logic_0) and (ap_predicate_op119_write_state4 = ap_const_boolean_1));
    end process;


    ap_block_state6_assign_proc : process(eol_2_reg_208, src_TVALID_int_regslice)
    begin
                ap_block_state6 <= ((eol_2_reg_208 = ap_const_lv1_0) and (src_TVALID_int_regslice = ap_const_logic_0));
    end process;


    ap_condition_pp0_exit_iter0_state3_assign_proc : process(icmp_ln122_fu_243_p2)
    begin
        if ((icmp_ln122_fu_243_p2 = ap_const_lv1_0)) then 
            ap_condition_pp0_exit_iter0_state3 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_done_reg, icmp_ln119_fu_227_p2, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln119_fu_227_p2 = ap_const_lv1_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(real_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (real_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_phi_mux_eol_2_phi_fu_211_p4 <= eol_2_reg_208;

    ap_phi_mux_j_3_phi_fu_201_p4_assign_proc : process(icmp_ln122_fu_243_p2, j_reg_166, or_ln131_fu_269_p2, or_ln134_fu_275_p2, ap_phi_reg_pp0_iter0_j_3_reg_198, j_2_fu_281_p2)
    begin
        if (((icmp_ln122_fu_243_p2 = ap_const_lv1_1) and (or_ln134_fu_275_p2 = ap_const_lv1_0) and (or_ln131_fu_269_p2 = ap_const_lv1_1))) then 
            ap_phi_mux_j_3_phi_fu_201_p4 <= j_2_fu_281_p2;
        elsif ((((icmp_ln122_fu_243_p2 = ap_const_lv1_1) and (or_ln134_fu_275_p2 = ap_const_lv1_1)) or ((icmp_ln122_fu_243_p2 = ap_const_lv1_1) and (or_ln131_fu_269_p2 = ap_const_lv1_0)))) then 
            ap_phi_mux_j_3_phi_fu_201_p4 <= j_reg_166;
        else 
            ap_phi_mux_j_3_phi_fu_201_p4 <= ap_phi_reg_pp0_iter0_j_3_reg_198;
        end if; 
    end process;


    ap_phi_mux_start_2_phi_fu_180_p4_assign_proc : process(icmp_ln122_fu_243_p2, or_ln131_fu_269_p2, or_ln134_fu_275_p2, ap_phi_reg_pp0_iter0_start_2_reg_177, start_fu_86)
    begin
        if ((icmp_ln122_fu_243_p2 = ap_const_lv1_1)) then
            if (((or_ln134_fu_275_p2 = ap_const_lv1_1) and (or_ln131_fu_269_p2 = ap_const_lv1_1))) then 
                ap_phi_mux_start_2_phi_fu_180_p4 <= start_fu_86;
            elsif ((or_ln131_fu_269_p2 = ap_const_lv1_0)) then 
                ap_phi_mux_start_2_phi_fu_180_p4 <= ap_const_lv32_1;
            else 
                ap_phi_mux_start_2_phi_fu_180_p4 <= ap_phi_reg_pp0_iter0_start_2_reg_177;
            end if;
        else 
            ap_phi_mux_start_2_phi_fu_180_p4 <= ap_phi_reg_pp0_iter0_start_2_reg_177;
        end if; 
    end process;


    ap_phi_mux_start_3_phi_fu_190_p4_assign_proc : process(icmp_ln122_fu_243_p2, or_ln131_fu_269_p2, or_ln134_fu_275_p2, ap_phi_mux_start_2_phi_fu_180_p4, ap_phi_reg_pp0_iter0_start_3_reg_187)
    begin
        if (((icmp_ln122_fu_243_p2 = ap_const_lv1_1) and (or_ln134_fu_275_p2 = ap_const_lv1_0) and (or_ln131_fu_269_p2 = ap_const_lv1_1))) then 
            ap_phi_mux_start_3_phi_fu_190_p4 <= ap_const_lv32_0;
        elsif ((((icmp_ln122_fu_243_p2 = ap_const_lv1_1) and (or_ln134_fu_275_p2 = ap_const_lv1_1)) or ((icmp_ln122_fu_243_p2 = ap_const_lv1_1) and (or_ln131_fu_269_p2 = ap_const_lv1_0)))) then 
            ap_phi_mux_start_3_phi_fu_190_p4 <= ap_phi_mux_start_2_phi_fu_180_p4;
        else 
            ap_phi_mux_start_3_phi_fu_190_p4 <= ap_phi_reg_pp0_iter0_start_3_reg_187;
        end if; 
    end process;

    ap_phi_reg_pp0_iter0_j_3_reg_198 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    ap_phi_reg_pp0_iter0_start_2_reg_177 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    ap_phi_reg_pp0_iter0_start_3_reg_187 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";

    ap_predicate_op119_write_state4_assign_proc : process(icmp_ln122_reg_315, or_ln134_reg_333, or_ln131_reg_329)
    begin
                ap_predicate_op119_write_state4 <= (((or_ln131_reg_329 = ap_const_lv1_0) and (icmp_ln122_reg_315 = ap_const_lv1_1)) or ((or_ln134_reg_333 = ap_const_lv1_1) and (icmp_ln122_reg_315 = ap_const_lv1_1)));
    end process;

    ap_ready <= internal_ap_ready;

    highthreshold_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, highthreshold_ap_vld)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (real_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            highthreshold_blk_n <= highthreshold_ap_vld;
        else 
            highthreshold_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    highthreshold_out_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, highthreshold_out_full_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (real_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            highthreshold_out_blk_n <= highthreshold_out_full_n;
        else 
            highthreshold_out_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    highthreshold_out_din <= highthreshold;

    highthreshold_out_write_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, lowthreshold_ap_vld, highthreshold_ap_vld, lowthreshold_out_full_n, highthreshold_out_full_n)
    begin
        if ((not(((highthreshold_out_full_n = ap_const_logic_0) or (lowthreshold_out_full_n = ap_const_logic_0) or (highthreshold_ap_vld = ap_const_logic_0) or (lowthreshold_ap_vld = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (real_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            highthreshold_out_write <= ap_const_logic_1;
        else 
            highthreshold_out_write <= ap_const_logic_0;
        end if; 
    end process;

    i_2_fu_233_p2 <= std_logic_vector(unsigned(i_reg_143) + unsigned(ap_const_lv11_1));
    icmp_ln119_fu_227_p2 <= "1" when (i_reg_143 = ap_const_lv11_438) else "0";
    icmp_ln122_fu_243_p2 <= "1" when (signed(j_reg_166) < signed(ap_const_lv32_780)) else "0";
    icmp_ln131_fu_257_p2 <= "0" when (start_fu_86 = ap_const_lv32_0) else "1";

    internal_ap_ready_assign_proc : process(icmp_ln119_fu_227_p2, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln119_fu_227_p2 = ap_const_lv1_1))) then 
            internal_ap_ready <= ap_const_logic_1;
        else 
            internal_ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    j_2_fu_281_p2 <= std_logic_vector(unsigned(j_reg_166) + unsigned(ap_const_lv32_FFFFFFFF));
    j_4_fu_288_p2 <= std_logic_vector(unsigned(ap_phi_mux_j_3_phi_fu_201_p4) + unsigned(ap_const_lv32_1));

    lowthreshold_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, lowthreshold_ap_vld)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (real_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            lowthreshold_blk_n <= lowthreshold_ap_vld;
        else 
            lowthreshold_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    lowthreshold_out_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, lowthreshold_out_full_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (real_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            lowthreshold_out_blk_n <= lowthreshold_out_full_n;
        else 
            lowthreshold_out_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    lowthreshold_out_din <= lowthreshold;

    lowthreshold_out_write_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, lowthreshold_ap_vld, highthreshold_ap_vld, lowthreshold_out_full_n, highthreshold_out_full_n)
    begin
        if ((not(((highthreshold_out_full_n = ap_const_logic_0) or (lowthreshold_out_full_n = ap_const_logic_0) or (highthreshold_ap_vld = ap_const_logic_0) or (lowthreshold_ap_vld = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (real_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            lowthreshold_out_write <= ap_const_logic_1;
        else 
            lowthreshold_out_write <= ap_const_logic_0;
        end if; 
    end process;

    or_ln131_fu_269_p2 <= (xor_ln131_fu_263_p2 or icmp_ln131_fu_257_p2);
    or_ln134_fu_275_p2 <= (src_TUSER_int_regslice or icmp_ln131_fu_257_p2);

    real_start_assign_proc : process(ap_start, start_full_n, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (start_full_n = ap_const_logic_0))) then 
            real_start <= ap_const_logic_0;
        else 
            real_start <= ap_start;
        end if; 
    end process;


    rgb_img_src_data_blk_n_assign_proc : process(rgb_img_src_data_full_n, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln122_reg_315, or_ln134_reg_333, or_ln131_reg_329)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (((or_ln131_reg_329 = ap_const_lv1_0) and (icmp_ln122_reg_315 = ap_const_lv1_1)) or ((or_ln134_reg_333 = ap_const_lv1_1) and (icmp_ln122_reg_315 = ap_const_lv1_1))))) then 
            rgb_img_src_data_blk_n <= rgb_img_src_data_full_n;
        else 
            rgb_img_src_data_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    rgb_img_src_data_din <= axi_data_V_reg_319;

    rgb_img_src_data_write_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_predicate_op119_write_state4, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_predicate_op119_write_state4 = ap_const_boolean_1))) then 
            rgb_img_src_data_write <= ap_const_logic_1;
        else 
            rgb_img_src_data_write <= ap_const_logic_0;
        end if; 
    end process;


    src_TDATA_blk_n_assign_proc : process(ap_CS_fsm_state6, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0, icmp_ln122_fu_243_p2, eol_2_reg_208, src_TVALID_int_regslice)
    begin
        if ((((icmp_ln122_fu_243_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((eol_2_reg_208 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6)))) then 
            src_TDATA_blk_n <= src_TVALID_int_regslice;
        else 
            src_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    src_TREADY <= regslice_both_src_V_data_V_U_ack_in;

    src_TREADY_int_regslice_assign_proc : process(ap_CS_fsm_state6, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, icmp_ln122_fu_243_p2, ap_block_pp0_stage0_11001, eol_2_reg_208, src_TVALID_int_regslice)
    begin
        if ((((icmp_ln122_fu_243_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or (not(((eol_2_reg_208 = ap_const_lv1_0) and (src_TVALID_int_regslice = ap_const_logic_0))) and (eol_2_reg_208 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6)))) then 
            src_TREADY_int_regslice <= ap_const_logic_1;
        else 
            src_TREADY_int_regslice <= ap_const_logic_0;
        end if; 
    end process;

    start_out <= real_start;

    start_write_assign_proc : process(real_start, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
            start_write <= ap_const_logic_1;
        else 
            start_write <= ap_const_logic_0;
        end if; 
    end process;

    xor_ln131_fu_263_p2 <= (src_TUSER_int_regslice xor ap_const_lv1_1);
end behav;
