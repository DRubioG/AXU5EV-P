-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity edge_canny_detector_xFAngleKernel_2_0_1080_1920_3_0_1_5_1_1920_5760_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    gradx2_mat_4367_dout : IN STD_LOGIC_VECTOR (15 downto 0);
    gradx2_mat_4367_empty_n : IN STD_LOGIC;
    gradx2_mat_4367_read : OUT STD_LOGIC;
    grady2_mat_4370_dout : IN STD_LOGIC_VECTOR (15 downto 0);
    grady2_mat_4370_empty_n : IN STD_LOGIC;
    grady2_mat_4370_read : OUT STD_LOGIC;
    phase_mat_4372_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    phase_mat_4372_full_n : IN STD_LOGIC;
    phase_mat_4372_write : OUT STD_LOGIC );
end;


architecture behav of edge_canny_detector_xFAngleKernel_2_0_1080_1920_3_0_1_5_1_1920_5760_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv11_438 : STD_LOGIC_VECTOR (10 downto 0) := "10000111000";
    constant ap_const_lv11_1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_const_lv11_780 : STD_LOGIC_VECTOR (10 downto 0) := "11110000000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv17_0 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000000";
    constant ap_const_lv32_3505 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000011010100000101";
    constant ap_const_lv15_0 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000000";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv8_5A : STD_LOGIC_VECTOR (7 downto 0) := "01011010";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv8_2D : STD_LOGIC_VECTOR (7 downto 0) := "00101101";
    constant ap_const_lv8_87 : STD_LOGIC_VECTOR (7 downto 0) := "10000111";

attribute shreg_extract : string;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal gradx2_mat_4367_blk_n : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal icmp_ln431_reg_310 : STD_LOGIC_VECTOR (0 downto 0);
    signal grady2_mat_4370_blk_n : STD_LOGIC;
    signal phase_mat_4372_blk_n : STD_LOGIC;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal icmp_ln431_reg_310_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_63_reg_114 : STD_LOGIC_VECTOR (10 downto 0);
    signal icmp_ln424_fu_125_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal add_ln695_fu_131_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln695_reg_305 : STD_LOGIC_VECTOR (10 downto 0);
    signal icmp_ln431_fu_137_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state3_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal add_ln695_12_fu_143_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal tmp_V_reg_319 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_V_8_reg_324 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_21_reg_335 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln468_fu_193_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln468_reg_340 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state3 : STD_LOGIC;
    signal empty_reg_103 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal sext_ln455_fu_149_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_fu_153_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln455_fu_149_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_fu_153_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln455_fu_161_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal select_ln455_fu_167_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_21_fu_179_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_187_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal sext_ln456_1_fu_197_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal sub_ln456_fu_200_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal select_ln456_fu_206_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal shl_ln_fu_213_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_187_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln1_fu_227_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln468_fu_234_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln472_fu_246_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln465_fu_221_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln469_fu_240_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln465_fu_258_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln469_fu_264_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_22_fu_250_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln469_fu_278_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln469_fu_270_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln469_1_fu_284_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_187_ce : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;

    component edge_canny_detector_mul_17s_15ns_32_2_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (16 downto 0);
        din1 : IN STD_LOGIC_VECTOR (14 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    mul_17s_15ns_32_2_1_U56 : component edge_canny_detector_mul_17s_15ns_32_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 17,
        din1_WIDTH => 15,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => select_ln455_fu_167_p3,
        din1 => grp_fu_187_p1,
        ce => grp_fu_187_ce,
        dout => grp_fu_187_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((icmp_ln424_fu_125_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state3))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((icmp_ln424_fu_125_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state3)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state3);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                elsif (((icmp_ln424_fu_125_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    empty_63_reg_114_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln431_fu_137_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                empty_63_reg_114 <= add_ln695_12_fu_143_p2;
            elsif (((icmp_ln424_fu_125_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                empty_63_reg_114 <= ap_const_lv11_0;
            end if; 
        end if;
    end process;

    empty_reg_103_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                empty_reg_103 <= add_ln695_reg_305;
            elsif ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                empty_reg_103 <= ap_const_lv11_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                add_ln695_reg_305 <= add_ln695_fu_131_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln431_reg_310 <= icmp_ln431_fu_137_p2;
                icmp_ln431_reg_310_pp0_iter1_reg <= icmp_ln431_reg_310;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln431_reg_310 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                tmp_21_reg_335 <= tmp_21_fu_179_p1(15 downto 15);
                tmp_V_8_reg_324 <= grady2_mat_4370_dout;
                tmp_V_reg_319 <= gradx2_mat_4367_dout;
                trunc_ln468_reg_340 <= trunc_ln468_fu_193_p1;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, icmp_ln424_fu_125_p2, ap_CS_fsm_state2, icmp_ln431_fu_137_p2, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln424_fu_125_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln431_fu_137_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) and not(((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln431_fu_137_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0)) or ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0)))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;
    add_ln468_fu_234_p2 <= std_logic_vector(unsigned(shl_ln1_fu_227_p3) + unsigned(grp_fu_187_p2));
    add_ln695_12_fu_143_p2 <= std_logic_vector(unsigned(empty_63_reg_114) + unsigned(ap_const_lv11_1));
    add_ln695_fu_131_p2 <= std_logic_vector(unsigned(empty_reg_103) + unsigned(ap_const_lv11_1));
    and_ln469_fu_264_p2 <= (xor_ln465_fu_258_p2 and icmp_ln469_fu_240_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state6 <= ap_CS_fsm(3);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(gradx2_mat_4367_empty_n, grady2_mat_4370_empty_n, phase_mat_4372_full_n, ap_enable_reg_pp0_iter1, icmp_ln431_reg_310, ap_enable_reg_pp0_iter2, icmp_ln431_reg_310_pp0_iter1_reg)
    begin
                ap_block_pp0_stage0_01001 <= (((icmp_ln431_reg_310_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (phase_mat_4372_full_n = ap_const_logic_0)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (((icmp_ln431_reg_310 = ap_const_lv1_0) and (grady2_mat_4370_empty_n = ap_const_logic_0)) or ((icmp_ln431_reg_310 = ap_const_lv1_0) and (gradx2_mat_4367_empty_n = ap_const_logic_0)))));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(gradx2_mat_4367_empty_n, grady2_mat_4370_empty_n, phase_mat_4372_full_n, ap_enable_reg_pp0_iter1, icmp_ln431_reg_310, ap_enable_reg_pp0_iter2, icmp_ln431_reg_310_pp0_iter1_reg)
    begin
                ap_block_pp0_stage0_11001 <= (((icmp_ln431_reg_310_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (phase_mat_4372_full_n = ap_const_logic_0)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (((icmp_ln431_reg_310 = ap_const_lv1_0) and (grady2_mat_4370_empty_n = ap_const_logic_0)) or ((icmp_ln431_reg_310 = ap_const_lv1_0) and (gradx2_mat_4367_empty_n = ap_const_logic_0)))));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(gradx2_mat_4367_empty_n, grady2_mat_4370_empty_n, phase_mat_4372_full_n, ap_enable_reg_pp0_iter1, icmp_ln431_reg_310, ap_enable_reg_pp0_iter2, icmp_ln431_reg_310_pp0_iter1_reg)
    begin
                ap_block_pp0_stage0_subdone <= (((icmp_ln431_reg_310_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (phase_mat_4372_full_n = ap_const_logic_0)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (((icmp_ln431_reg_310 = ap_const_lv1_0) and (grady2_mat_4370_empty_n = ap_const_logic_0)) or ((icmp_ln431_reg_310 = ap_const_lv1_0) and (gradx2_mat_4367_empty_n = ap_const_logic_0)))));
    end process;


    ap_block_state1_assign_proc : process(ap_start, ap_done_reg)
    begin
                ap_block_state1 <= ((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;

        ap_block_state3_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state4_pp0_stage0_iter1_assign_proc : process(gradx2_mat_4367_empty_n, grady2_mat_4370_empty_n, icmp_ln431_reg_310)
    begin
                ap_block_state4_pp0_stage0_iter1 <= (((icmp_ln431_reg_310 = ap_const_lv1_0) and (grady2_mat_4370_empty_n = ap_const_logic_0)) or ((icmp_ln431_reg_310 = ap_const_lv1_0) and (gradx2_mat_4367_empty_n = ap_const_logic_0)));
    end process;


    ap_block_state5_pp0_stage0_iter2_assign_proc : process(phase_mat_4372_full_n, icmp_ln431_reg_310_pp0_iter1_reg)
    begin
                ap_block_state5_pp0_stage0_iter2 <= ((icmp_ln431_reg_310_pp0_iter1_reg = ap_const_lv1_0) and (phase_mat_4372_full_n = ap_const_logic_0));
    end process;


    ap_condition_pp0_exit_iter0_state3_assign_proc : process(icmp_ln431_fu_137_p2)
    begin
        if ((icmp_ln431_fu_137_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state3 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_done_reg, icmp_ln424_fu_125_p2, ap_CS_fsm_state2)
    begin
        if (((icmp_ln424_fu_125_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(icmp_ln424_fu_125_p2, ap_CS_fsm_state2)
    begin
        if (((icmp_ln424_fu_125_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    gradx2_mat_4367_blk_n_assign_proc : process(gradx2_mat_4367_empty_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, icmp_ln431_reg_310)
    begin
        if (((icmp_ln431_reg_310 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            gradx2_mat_4367_blk_n <= gradx2_mat_4367_empty_n;
        else 
            gradx2_mat_4367_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    gradx2_mat_4367_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln431_reg_310, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln431_reg_310 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            gradx2_mat_4367_read <= ap_const_logic_1;
        else 
            gradx2_mat_4367_read <= ap_const_logic_0;
        end if; 
    end process;


    grady2_mat_4370_blk_n_assign_proc : process(grady2_mat_4370_empty_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, icmp_ln431_reg_310)
    begin
        if (((icmp_ln431_reg_310 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grady2_mat_4370_blk_n <= grady2_mat_4370_empty_n;
        else 
            grady2_mat_4370_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    grady2_mat_4370_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln431_reg_310, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln431_reg_310 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grady2_mat_4370_read <= ap_const_logic_1;
        else 
            grady2_mat_4370_read <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_187_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_187_ce <= ap_const_logic_1;
        else 
            grp_fu_187_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_187_p1 <= ap_const_lv32_3505(15 - 1 downto 0);
    icmp_ln424_fu_125_p2 <= "1" when (empty_reg_103 = ap_const_lv11_438) else "0";
    icmp_ln431_fu_137_p2 <= "1" when (empty_63_reg_114 = ap_const_lv11_780) else "0";
    icmp_ln465_fu_221_p2 <= "1" when (signed(shl_ln_fu_213_p3) < signed(grp_fu_187_p2)) else "0";
    icmp_ln469_fu_240_p2 <= "1" when (signed(shl_ln_fu_213_p3) > signed(add_ln468_fu_234_p2)) else "0";
    or_ln469_fu_278_p2 <= (icmp_ln465_fu_221_p2 or and_ln469_fu_264_p2);

    phase_mat_4372_blk_n_assign_proc : process(phase_mat_4372_full_n, ap_block_pp0_stage0, ap_enable_reg_pp0_iter2, icmp_ln431_reg_310_pp0_iter1_reg)
    begin
        if (((icmp_ln431_reg_310_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            phase_mat_4372_blk_n <= phase_mat_4372_full_n;
        else 
            phase_mat_4372_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    phase_mat_4372_din <= 
        select_ln469_fu_270_p3 when (or_ln469_fu_278_p2(0) = '1') else 
        select_ln469_1_fu_284_p3;

    phase_mat_4372_write_assign_proc : process(ap_enable_reg_pp0_iter2, icmp_ln431_reg_310_pp0_iter1_reg, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln431_reg_310_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            phase_mat_4372_write <= ap_const_logic_1;
        else 
            phase_mat_4372_write <= ap_const_logic_0;
        end if; 
    end process;

    select_ln455_fu_167_p3 <= 
        sub_ln455_fu_161_p2 when (tmp_fu_153_p3(0) = '1') else 
        sext_ln455_fu_149_p1;
    select_ln456_fu_206_p3 <= 
        sub_ln456_fu_200_p2 when (tmp_21_reg_335(0) = '1') else 
        sext_ln456_1_fu_197_p1;
    select_ln469_1_fu_284_p3 <= 
        ap_const_lv8_2D when (tmp_22_fu_250_p3(0) = '1') else 
        ap_const_lv8_87;
    select_ln469_fu_270_p3 <= 
        ap_const_lv8_5A when (and_ln469_fu_264_p2(0) = '1') else 
        ap_const_lv8_0;
    sext_ln455_fu_149_p0 <= gradx2_mat_4367_dout;
        sext_ln455_fu_149_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln455_fu_149_p0),17));

        sext_ln456_1_fu_197_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_V_8_reg_324),17));

    shl_ln1_fu_227_p3 <= (trunc_ln468_reg_340 & ap_const_lv16_0);
    shl_ln_fu_213_p3 <= (select_ln456_fu_206_p3 & ap_const_lv15_0);
    sub_ln455_fu_161_p2 <= std_logic_vector(unsigned(ap_const_lv17_0) - unsigned(sext_ln455_fu_149_p1));
    sub_ln456_fu_200_p2 <= std_logic_vector(unsigned(ap_const_lv17_0) - unsigned(sext_ln456_1_fu_197_p1));
    tmp_21_fu_179_p1 <= grady2_mat_4370_dout;
    tmp_22_fu_250_p3 <= xor_ln472_fu_246_p2(15 downto 15);
    tmp_fu_153_p1 <= gradx2_mat_4367_dout;
    tmp_fu_153_p3 <= tmp_fu_153_p1(15 downto 15);
    trunc_ln468_fu_193_p1 <= select_ln455_fu_167_p3(16 - 1 downto 0);
    xor_ln465_fu_258_p2 <= (icmp_ln465_fu_221_p2 xor ap_const_lv1_1);
    xor_ln472_fu_246_p2 <= (tmp_V_reg_319 xor tmp_V_8_reg_324);
end behav;
