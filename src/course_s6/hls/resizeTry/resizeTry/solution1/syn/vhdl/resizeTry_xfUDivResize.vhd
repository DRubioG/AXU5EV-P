-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity resizeTry_xfUDivResize is
port (
    ap_ready : OUT STD_LOGIC;
    in_n : IN STD_LOGIC_VECTOR (42 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (33 downto 0) );
end;


architecture behav of resizeTry_xfUDivResize is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv87_CCCCCCCCCCD : STD_LOGIC_VECTOR (86 downto 0) := "000000000000000000000000000000000000000000011001100110011001100110011001100110011001101";
    constant ap_const_lv32_35 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110101";
    constant ap_const_lv32_56 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010110";
    constant ap_const_logic_0 : STD_LOGIC := '0';

attribute shreg_extract : string;
    signal mul_ln160_fu_22_p0 : STD_LOGIC_VECTOR (42 downto 0);
    signal mul_ln160_fu_22_p1 : STD_LOGIC_VECTOR (44 downto 0);
    signal mul_ln160_fu_22_p2 : STD_LOGIC_VECTOR (86 downto 0);
    signal mul_ln160_fu_22_p00 : STD_LOGIC_VECTOR (86 downto 0);

    component resizeTry_mul_43ns_45ns_87_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (42 downto 0);
        din1 : IN STD_LOGIC_VECTOR (44 downto 0);
        dout : OUT STD_LOGIC_VECTOR (86 downto 0) );
    end component;



begin
    mul_43ns_45ns_87_1_1_U10 : component resizeTry_mul_43ns_45ns_87_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 43,
        din1_WIDTH => 45,
        dout_WIDTH => 87)
    port map (
        din0 => mul_ln160_fu_22_p0,
        din1 => mul_ln160_fu_22_p1,
        dout => mul_ln160_fu_22_p2);




    ap_ready <= ap_const_logic_1;
    ap_return <= mul_ln160_fu_22_p2(86 downto 53);
    mul_ln160_fu_22_p0 <= mul_ln160_fu_22_p00(43 - 1 downto 0);
    mul_ln160_fu_22_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(in_n),87));
    mul_ln160_fu_22_p1 <= ap_const_lv87_CCCCCCCCCCD(45 - 1 downto 0);
end behav;
