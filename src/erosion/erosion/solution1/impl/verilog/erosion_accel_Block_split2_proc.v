// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module erosion_accel_Block_split2_proc (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        height_dout,
        height_empty_n,
        height_read,
        width_dout,
        width_empty_n,
        width_read,
        imgInput_rows_out_din,
        imgInput_rows_out_full_n,
        imgInput_rows_out_write,
        imgInput_cols_out_din,
        imgInput_cols_out_full_n,
        imgInput_cols_out_write,
        imgOutput_rows_out_din,
        imgOutput_rows_out_full_n,
        imgOutput_rows_out_write,
        imgOutput_cols_out_din,
        imgOutput_cols_out_full_n,
        imgOutput_cols_out_write
);

parameter    ap_ST_fsm_state1 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [31:0] height_dout;
input   height_empty_n;
output   height_read;
input  [31:0] width_dout;
input   width_empty_n;
output   width_read;
output  [31:0] imgInput_rows_out_din;
input   imgInput_rows_out_full_n;
output   imgInput_rows_out_write;
output  [31:0] imgInput_cols_out_din;
input   imgInput_cols_out_full_n;
output   imgInput_cols_out_write;
output  [31:0] imgOutput_rows_out_din;
input   imgOutput_rows_out_full_n;
output   imgOutput_rows_out_write;
output  [31:0] imgOutput_cols_out_din;
input   imgOutput_cols_out_full_n;
output   imgOutput_cols_out_write;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg height_read;
reg width_read;
reg imgInput_rows_out_write;
reg imgInput_cols_out_write;
reg imgOutput_rows_out_write;
reg imgOutput_cols_out_write;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    height_blk_n;
reg    width_blk_n;
reg    imgInput_rows_out_blk_n;
reg    imgInput_cols_out_blk_n;
reg    imgOutput_rows_out_blk_n;
reg    imgOutput_cols_out_blk_n;
reg    ap_block_state1;
reg   [0:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 1'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((~((ap_start == 1'b0) | (imgOutput_cols_out_full_n == 1'b0) | (imgOutput_rows_out_full_n == 1'b0) | (imgInput_cols_out_full_n == 1'b0) | (imgInput_rows_out_full_n == 1'b0) | (width_empty_n == 1'b0) | (height_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (imgOutput_cols_out_full_n == 1'b0) | (imgOutput_rows_out_full_n == 1'b0) | (imgInput_cols_out_full_n == 1'b0) | (imgInput_rows_out_full_n == 1'b0) | (width_empty_n == 1'b0) | (height_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (imgOutput_cols_out_full_n == 1'b0) | (imgOutput_rows_out_full_n == 1'b0) | (imgInput_cols_out_full_n == 1'b0) | (imgInput_rows_out_full_n == 1'b0) | (width_empty_n == 1'b0) | (height_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        height_blk_n = height_empty_n;
    end else begin
        height_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (imgOutput_cols_out_full_n == 1'b0) | (imgOutput_rows_out_full_n == 1'b0) | (imgInput_cols_out_full_n == 1'b0) | (imgInput_rows_out_full_n == 1'b0) | (width_empty_n == 1'b0) | (height_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        height_read = 1'b1;
    end else begin
        height_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        imgInput_cols_out_blk_n = imgInput_cols_out_full_n;
    end else begin
        imgInput_cols_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (imgOutput_cols_out_full_n == 1'b0) | (imgOutput_rows_out_full_n == 1'b0) | (imgInput_cols_out_full_n == 1'b0) | (imgInput_rows_out_full_n == 1'b0) | (width_empty_n == 1'b0) | (height_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        imgInput_cols_out_write = 1'b1;
    end else begin
        imgInput_cols_out_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        imgInput_rows_out_blk_n = imgInput_rows_out_full_n;
    end else begin
        imgInput_rows_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (imgOutput_cols_out_full_n == 1'b0) | (imgOutput_rows_out_full_n == 1'b0) | (imgInput_cols_out_full_n == 1'b0) | (imgInput_rows_out_full_n == 1'b0) | (width_empty_n == 1'b0) | (height_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        imgInput_rows_out_write = 1'b1;
    end else begin
        imgInput_rows_out_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        imgOutput_cols_out_blk_n = imgOutput_cols_out_full_n;
    end else begin
        imgOutput_cols_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (imgOutput_cols_out_full_n == 1'b0) | (imgOutput_rows_out_full_n == 1'b0) | (imgInput_cols_out_full_n == 1'b0) | (imgInput_rows_out_full_n == 1'b0) | (width_empty_n == 1'b0) | (height_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        imgOutput_cols_out_write = 1'b1;
    end else begin
        imgOutput_cols_out_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        imgOutput_rows_out_blk_n = imgOutput_rows_out_full_n;
    end else begin
        imgOutput_rows_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (imgOutput_cols_out_full_n == 1'b0) | (imgOutput_rows_out_full_n == 1'b0) | (imgInput_cols_out_full_n == 1'b0) | (imgInput_rows_out_full_n == 1'b0) | (width_empty_n == 1'b0) | (height_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        imgOutput_rows_out_write = 1'b1;
    end else begin
        imgOutput_rows_out_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        width_blk_n = width_empty_n;
    end else begin
        width_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (imgOutput_cols_out_full_n == 1'b0) | (imgOutput_rows_out_full_n == 1'b0) | (imgInput_cols_out_full_n == 1'b0) | (imgInput_rows_out_full_n == 1'b0) | (width_empty_n == 1'b0) | (height_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        width_read = 1'b1;
    end else begin
        width_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | (imgOutput_cols_out_full_n == 1'b0) | (imgOutput_rows_out_full_n == 1'b0) | (imgInput_cols_out_full_n == 1'b0) | (imgInput_rows_out_full_n == 1'b0) | (width_empty_n == 1'b0) | (height_empty_n == 1'b0) | (ap_done_reg == 1'b1));
end

assign imgInput_cols_out_din = width_dout;

assign imgInput_rows_out_din = height_dout;

assign imgOutput_cols_out_din = width_dout;

assign imgOutput_rows_out_din = height_dout;

endmodule //erosion_accel_Block_split2_proc
