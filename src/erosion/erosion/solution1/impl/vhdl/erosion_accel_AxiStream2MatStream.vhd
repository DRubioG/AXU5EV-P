-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity erosion_accel_AxiStream2MatStream is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    ldata1_dout : IN STD_LOGIC_VECTOR (7 downto 0);
    ldata1_empty_n : IN STD_LOGIC;
    ldata1_read : OUT STD_LOGIC;
    imgInput_417_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    imgInput_417_full_n : IN STD_LOGIC;
    imgInput_417_write : OUT STD_LOGIC;
    rows_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    rows_empty_n : IN STD_LOGIC;
    rows_read : OUT STD_LOGIC;
    cols_bound_per_npc_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    cols_bound_per_npc_empty_n : IN STD_LOGIC;
    cols_bound_per_npc_read : OUT STD_LOGIC;
    last_blk_width_dout : IN STD_LOGIC_VECTOR (3 downto 0);
    last_blk_width_empty_n : IN STD_LOGIC;
    last_blk_width_read : OUT STD_LOGIC );
end;


architecture behav of erosion_accel_AxiStream2MatStream is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv4_7 : STD_LOGIC_VECTOR (3 downto 0) := "0111";
    constant ap_const_lv32_FFFFFFFF : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111111";
    constant ap_const_lv5_8 : STD_LOGIC_VECTOR (4 downto 0) := "01000";
    constant ap_const_lv5_7 : STD_LOGIC_VECTOR (4 downto 0) := "00111";
    constant ap_const_lv31_1 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000001";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv5_F : STD_LOGIC_VECTOR (4 downto 0) := "01111";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv29_0 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000000000000000";
    constant ap_const_lv5_1F : STD_LOGIC_VECTOR (4 downto 0) := "11111";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv4_9 : STD_LOGIC_VECTOR (3 downto 0) := "1001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";

attribute shreg_extract : string;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ldata1_blk_n : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal icmp_ln1038_reg_747 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1049_reg_756 : STD_LOGIC_VECTOR (0 downto 0);
    signal imgInput_417_blk_n : STD_LOGIC;
    signal rows_blk_n : STD_LOGIC;
    signal cols_bound_per_npc_blk_n : STD_LOGIC;
    signal last_blk_width_blk_n : STD_LOGIC;
    signal j_reg_131 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_reg_142 : STD_LOGIC_VECTOR (30 downto 0);
    signal last_blk_width_1_reg_722 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal bound_fu_177_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal bound_reg_727 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_i_fu_183_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_i_reg_732 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub2_i_fu_189_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal sub2_i_reg_737 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln1057_fu_195_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln1057_reg_742 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln1038_fu_215_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_predicate_op104_read_state3 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal add_ln1038_fu_220_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal icmp_ln1049_fu_261_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln674_1_fu_284_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln674_1_reg_760 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln674_1_fu_290_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln674_1_reg_767 : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln674_2_fu_294_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln674_2_reg_775 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln1050_fu_309_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1050_reg_781 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln1051_fu_315_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln1051_reg_786 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln674_fu_329_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln674_reg_791 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln674_fu_335_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln674_reg_798 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln674_1_fu_363_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln674_1_reg_805 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln414_fu_369_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln414_reg_810 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln414_fu_375_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln414_reg_818 : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln414_1_fu_379_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln414_1_reg_826 : STD_LOGIC_VECTOR (3 downto 0);
    signal j_2_fu_400_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state2 : STD_LOGIC;
    signal ap_phi_mux_empty_phi_fu_156_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Result_12_fu_695_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_phi_reg_pp0_iter1_empty_reg_153 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Result_13_fu_480_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal rem_fu_92 : STD_LOGIC_VECTOR (31 downto 0);
    signal rem_2_fu_298_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal rem_1_fu_383_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_s_fu_96 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal sub_i_fu_183_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal last_blk_width_cast_i_fu_173_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln1027_fu_211_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bLast_fu_230_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xf_bits_per_clock_fu_235_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal ptr_width_minus_fu_250_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln1044_fu_242_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln1057_fu_267_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln1057_fu_274_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_163_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln1057_fu_278_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_319_p4 : STD_LOGIC_VECTOR (28 downto 0);
    signal zext_ln1044_1_fu_246_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln1054_fu_339_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal trunc_ln1054_1_fu_353_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln1054_fu_349_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal sub_ln674_3_fu_357_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal sext_ln1054_fu_345_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln1045_fu_257_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln1061_fu_394_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln674_4_fu_421_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal sub_ln674_6_fu_430_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_4_fu_411_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal sub_ln674_5_fu_425_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln674_3_fu_434_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln674_5_fu_448_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal sub_ln674_7_fu_454_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln674_4_fu_441_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln674_3_fu_460_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln674_4_fu_464_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal lshr_ln674_3_fu_468_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal lshr_ln674_4_fu_474_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln674_fu_497_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_fu_168_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_2_fu_487_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln674_fu_502_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln674_2_fu_516_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal sub_ln674_2_fu_522_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln674_1_fu_509_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln674_fu_528_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln674_1_fu_532_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal lshr_ln674_fu_536_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal lshr_ln674_1_fu_542_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal sub_ln414_fu_554_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln414_fu_559_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Result_14_fu_548_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal lshr_ln414_fu_563_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Result_s_fu_569_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln674_2_fu_582_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal lshr_ln674_2_fu_585_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal sub_ln414_1_fu_597_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln414_fu_602_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln414_2_fu_612_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln414_1_fu_607_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal sub_ln414_2_fu_618_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_Result_15_fu_591_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln414_1_fu_624_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal shl_ln414_fu_636_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_3_fu_642_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln414_2_fu_628_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln414_3_fu_632_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal shl_ln414_1_fu_659_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal lshr_ln414_1_fu_665_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal and_ln414_fu_671_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Val2_4_fu_575_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln414_fu_677_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln414_3_fu_652_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal and_ln414_1_fu_683_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal and_ln414_2_fu_689_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;

    component erosion_accel_mul_32s_32s_32_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    mul_32s_32s_32_1_1_U45 : component erosion_accel_mul_32s_32s_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => cols_bound_per_npc_dout,
        din1 => rows_dout,
        dout => bound_fu_177_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((not(((ap_start = ap_const_logic_0) or (last_blk_width_empty_n = ap_const_logic_0) or (cols_bound_per_npc_empty_n = ap_const_logic_0) or (rows_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2))) then 
                    ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state2);
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                elsif ((not(((ap_start = ap_const_logic_0) or (last_blk_width_empty_n = ap_const_logic_0) or (cols_bound_per_npc_empty_n = ap_const_logic_0) or (rows_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_reg_142_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln1038_fu_215_p2 = ap_const_lv1_1))) then 
                i_reg_142 <= add_ln1038_fu_220_p2;
            elsif ((not(((ap_start = ap_const_logic_0) or (last_blk_width_empty_n = ap_const_logic_0) or (cols_bound_per_npc_empty_n = ap_const_logic_0) or (rows_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_reg_142 <= ap_const_lv31_0;
            end if; 
        end if;
    end process;

    j_reg_131_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln1038_fu_215_p2 = ap_const_lv1_1))) then 
                j_reg_131 <= j_2_fu_400_p3;
            elsif ((not(((ap_start = ap_const_logic_0) or (last_blk_width_empty_n = ap_const_logic_0) or (cols_bound_per_npc_empty_n = ap_const_logic_0) or (rows_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                j_reg_131 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    p_Val2_s_fu_96_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln1049_reg_756 = ap_const_lv1_1) and (icmp_ln1038_reg_747 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                p_Val2_s_fu_96 <= ldata1_dout;
            elsif ((not(((ap_start = ap_const_logic_0) or (last_blk_width_empty_n = ap_const_logic_0) or (cols_bound_per_npc_empty_n = ap_const_logic_0) or (rows_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                p_Val2_s_fu_96 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    rem_fu_92_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln1049_fu_261_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln1038_fu_215_p2 = ap_const_lv1_1))) then 
                rem_fu_92 <= rem_1_fu_383_p2;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln1049_fu_261_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln1038_fu_215_p2 = ap_const_lv1_1))) then 
                rem_fu_92 <= rem_2_fu_298_p2;
            elsif ((not(((ap_start = ap_const_logic_0) or (last_blk_width_empty_n = ap_const_logic_0) or (cols_bound_per_npc_empty_n = ap_const_logic_0) or (rows_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                rem_fu_92 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_start = ap_const_logic_0) or (last_blk_width_empty_n = ap_const_logic_0) or (cols_bound_per_npc_empty_n = ap_const_logic_0) or (rows_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                add_ln1057_reg_742 <= add_ln1057_fu_195_p2;
                bound_reg_727 <= bound_fu_177_p2;
                last_blk_width_1_reg_722 <= last_blk_width_dout;
                sub2_i_reg_737 <= sub2_i_fu_189_p2;
                sub_i_reg_732 <= sub_i_fu_183_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln1049_fu_261_p2 = ap_const_lv1_1) and (icmp_ln1038_fu_215_p2 = ap_const_lv1_1))) then
                add_ln674_1_reg_805 <= add_ln674_1_fu_363_p2;
                icmp_ln1050_reg_781 <= icmp_ln1050_fu_309_p2;
                icmp_ln414_reg_810 <= icmp_ln414_fu_369_p2;
                icmp_ln674_reg_791 <= icmp_ln674_fu_329_p2;
                trunc_ln1051_reg_786 <= trunc_ln1051_fu_315_p1;
                trunc_ln414_1_reg_826 <= trunc_ln414_1_fu_379_p1;
                trunc_ln414_reg_818 <= trunc_ln414_fu_375_p1;
                trunc_ln674_reg_798 <= trunc_ln674_fu_335_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln1038_reg_747 <= icmp_ln1038_fu_215_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln1038_fu_215_p2 = ap_const_lv1_1))) then
                icmp_ln1049_reg_756 <= icmp_ln1049_fu_261_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln1049_fu_261_p2 = ap_const_lv1_0) and (icmp_ln1038_fu_215_p2 = ap_const_lv1_1))) then
                icmp_ln674_1_reg_760 <= icmp_ln674_1_fu_284_p2;
                trunc_ln674_1_reg_767 <= trunc_ln674_1_fu_290_p1;
                trunc_ln674_2_reg_775 <= trunc_ln674_2_fu_294_p1;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, rows_empty_n, cols_bound_per_npc_empty_n, last_blk_width_empty_n, icmp_ln1038_fu_215_p2, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_start = ap_const_logic_0) or (last_blk_width_empty_n = ap_const_logic_0) or (cols_bound_per_npc_empty_n = ap_const_logic_0) or (rows_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if (not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln1038_fu_215_p2 = ap_const_lv1_0)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln1038_fu_215_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;
    add_ln1038_fu_220_p2 <= std_logic_vector(unsigned(i_reg_142) + unsigned(ap_const_lv31_1));
    add_ln1054_fu_339_p2 <= std_logic_vector(signed(ap_const_lv5_1F) + signed(zext_ln1044_1_fu_246_p1));
    add_ln1057_fu_195_p2 <= std_logic_vector(unsigned(last_blk_width_cast_i_fu_173_p1) + unsigned(ap_const_lv5_7));
    add_ln1061_fu_394_p2 <= std_logic_vector(unsigned(j_reg_131) + unsigned(ap_const_lv32_1));
    add_ln674_1_fu_363_p2 <= std_logic_vector(unsigned(ap_const_lv4_7) + unsigned(sub_ln674_3_fu_357_p2));
    add_ln674_fu_497_p2 <= std_logic_vector(signed(ap_const_lv4_9) + signed(trunc_ln674_reg_798));
    and_ln414_1_fu_683_p2 <= (xor_ln414_fu_677_p2 and p_Val2_4_fu_575_p3);
    and_ln414_2_fu_689_p2 <= (select_ln414_3_fu_652_p3 and and_ln414_fu_671_p2);
    and_ln414_fu_671_p2 <= (shl_ln414_1_fu_659_p2 and lshr_ln414_1_fu_665_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state4 <= ap_CS_fsm(2);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ldata1_empty_n, imgInput_417_full_n, ap_enable_reg_pp0_iter1, icmp_ln1038_reg_747, ap_predicate_op104_read_state3)
    begin
                ap_block_pp0_stage0_01001 <= ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (((icmp_ln1038_reg_747 = ap_const_lv1_1) and (imgInput_417_full_n = ap_const_logic_0)) or ((ldata1_empty_n = ap_const_logic_0) and (ap_predicate_op104_read_state3 = ap_const_boolean_1))));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ldata1_empty_n, imgInput_417_full_n, ap_enable_reg_pp0_iter1, icmp_ln1038_reg_747, ap_predicate_op104_read_state3)
    begin
                ap_block_pp0_stage0_11001 <= ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (((icmp_ln1038_reg_747 = ap_const_lv1_1) and (imgInput_417_full_n = ap_const_logic_0)) or ((ldata1_empty_n = ap_const_logic_0) and (ap_predicate_op104_read_state3 = ap_const_boolean_1))));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ldata1_empty_n, imgInput_417_full_n, ap_enable_reg_pp0_iter1, icmp_ln1038_reg_747, ap_predicate_op104_read_state3)
    begin
                ap_block_pp0_stage0_subdone <= ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (((icmp_ln1038_reg_747 = ap_const_lv1_1) and (imgInput_417_full_n = ap_const_logic_0)) or ((ldata1_empty_n = ap_const_logic_0) and (ap_predicate_op104_read_state3 = ap_const_boolean_1))));
    end process;


    ap_block_state1_assign_proc : process(ap_start, ap_done_reg, rows_empty_n, cols_bound_per_npc_empty_n, last_blk_width_empty_n)
    begin
                ap_block_state1 <= ((ap_start = ap_const_logic_0) or (last_blk_width_empty_n = ap_const_logic_0) or (cols_bound_per_npc_empty_n = ap_const_logic_0) or (rows_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;

        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state3_pp0_stage0_iter1_assign_proc : process(ldata1_empty_n, imgInput_417_full_n, icmp_ln1038_reg_747, ap_predicate_op104_read_state3)
    begin
                ap_block_state3_pp0_stage0_iter1 <= (((icmp_ln1038_reg_747 = ap_const_lv1_1) and (imgInput_417_full_n = ap_const_logic_0)) or ((ldata1_empty_n = ap_const_logic_0) and (ap_predicate_op104_read_state3 = ap_const_boolean_1)));
    end process;


    ap_condition_pp0_exit_iter0_state2_assign_proc : process(icmp_ln1038_fu_215_p2)
    begin
        if ((icmp_ln1038_fu_215_p2 = ap_const_lv1_0)) then 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_empty_phi_fu_156_p4_assign_proc : process(icmp_ln1038_reg_747, icmp_ln1049_reg_756, p_Result_12_fu_695_p2, ap_phi_reg_pp0_iter1_empty_reg_153, p_Result_13_fu_480_p2)
    begin
        if ((icmp_ln1038_reg_747 = ap_const_lv1_1)) then
            if ((icmp_ln1049_reg_756 = ap_const_lv1_0)) then 
                ap_phi_mux_empty_phi_fu_156_p4 <= p_Result_13_fu_480_p2;
            elsif ((icmp_ln1049_reg_756 = ap_const_lv1_1)) then 
                ap_phi_mux_empty_phi_fu_156_p4 <= p_Result_12_fu_695_p2;
            else 
                ap_phi_mux_empty_phi_fu_156_p4 <= ap_phi_reg_pp0_iter1_empty_reg_153;
            end if;
        else 
            ap_phi_mux_empty_phi_fu_156_p4 <= ap_phi_reg_pp0_iter1_empty_reg_153;
        end if; 
    end process;

    ap_phi_reg_pp0_iter1_empty_reg_153 <= "XXXXXXXX";

    ap_predicate_op104_read_state3_assign_proc : process(icmp_ln1038_reg_747, icmp_ln1049_reg_756)
    begin
                ap_predicate_op104_read_state3 <= ((icmp_ln1049_reg_756 = ap_const_lv1_1) and (icmp_ln1038_reg_747 = ap_const_lv1_1));
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    bLast_fu_230_p2 <= "1" when (j_reg_131 = sub_i_reg_732) else "0";

    cols_bound_per_npc_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, cols_bound_per_npc_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            cols_bound_per_npc_blk_n <= cols_bound_per_npc_empty_n;
        else 
            cols_bound_per_npc_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    cols_bound_per_npc_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, rows_empty_n, cols_bound_per_npc_empty_n, last_blk_width_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (last_blk_width_empty_n = ap_const_logic_0) or (cols_bound_per_npc_empty_n = ap_const_logic_0) or (rows_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            cols_bound_per_npc_read <= ap_const_logic_1;
        else 
            cols_bound_per_npc_read <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_163_p2 <= std_logic_vector(unsigned(ap_const_lv32_8) - unsigned(rem_fu_92));
    grp_fu_168_p2 <= std_logic_vector(unsigned(ap_const_lv4_7) - unsigned(trunc_ln674_reg_798));
    icmp_ln1038_fu_215_p2 <= "1" when (signed(zext_ln1027_fu_211_p1) < signed(bound_reg_727)) else "0";
    icmp_ln1049_fu_261_p2 <= "1" when (signed(rem_fu_92) < signed(zext_ln1044_fu_242_p1)) else "0";
    icmp_ln1050_fu_309_p2 <= "1" when (rem_fu_92 = ap_const_lv32_0) else "0";
    icmp_ln414_fu_369_p2 <= "1" when (unsigned(rem_fu_92) > unsigned(sext_ln1054_fu_345_p1)) else "0";
    icmp_ln674_1_fu_284_p2 <= "1" when (unsigned(grp_fu_163_p2) > unsigned(sub_ln1057_fu_278_p2)) else "0";
    icmp_ln674_fu_329_p2 <= "0" when (tmp_fu_319_p4 = ap_const_lv29_0) else "1";

    imgInput_417_blk_n_assign_proc : process(imgInput_417_full_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, icmp_ln1038_reg_747)
    begin
        if (((icmp_ln1038_reg_747 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            imgInput_417_blk_n <= imgInput_417_full_n;
        else 
            imgInput_417_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    imgInput_417_din <= ap_phi_mux_empty_phi_fu_156_p4;

    imgInput_417_write_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln1038_reg_747, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln1038_reg_747 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            imgInput_417_write <= ap_const_logic_1;
        else 
            imgInput_417_write <= ap_const_logic_0;
        end if; 
    end process;

    j_2_fu_400_p3 <= 
        ap_const_lv32_0 when (bLast_fu_230_p2(0) = '1') else 
        add_ln1061_fu_394_p2;

    last_blk_width_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, last_blk_width_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            last_blk_width_blk_n <= last_blk_width_empty_n;
        else 
            last_blk_width_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    last_blk_width_cast_i_fu_173_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(last_blk_width_dout),5));

    last_blk_width_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, rows_empty_n, cols_bound_per_npc_empty_n, last_blk_width_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (last_blk_width_empty_n = ap_const_logic_0) or (cols_bound_per_npc_empty_n = ap_const_logic_0) or (rows_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            last_blk_width_read <= ap_const_logic_1;
        else 
            last_blk_width_read <= ap_const_logic_0;
        end if; 
    end process;


    ldata1_blk_n_assign_proc : process(ldata1_empty_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, icmp_ln1038_reg_747, icmp_ln1049_reg_756)
    begin
        if (((icmp_ln1049_reg_756 = ap_const_lv1_1) and (icmp_ln1038_reg_747 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ldata1_blk_n <= ldata1_empty_n;
        else 
            ldata1_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    ldata1_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_predicate_op104_read_state3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_predicate_op104_read_state3 = ap_const_boolean_1))) then 
            ldata1_read <= ap_const_logic_1;
        else 
            ldata1_read <= ap_const_logic_0;
        end if; 
    end process;

    lshr_ln414_1_fu_665_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv8_FF),to_integer(unsigned('0' & zext_ln414_3_fu_632_p1(8-1 downto 0)))));
    lshr_ln414_fu_563_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv8_FF),to_integer(unsigned('0' & zext_ln414_fu_559_p1(8-1 downto 0)))));
    lshr_ln674_1_fu_542_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv8_FF),to_integer(unsigned('0' & zext_ln674_1_fu_532_p1(8-1 downto 0)))));
    lshr_ln674_2_fu_585_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv8_FF),to_integer(unsigned('0' & zext_ln674_2_fu_582_p1(8-1 downto 0)))));
    lshr_ln674_3_fu_468_p2 <= std_logic_vector(shift_right(unsigned(select_ln674_4_fu_441_p3),to_integer(unsigned('0' & zext_ln674_3_fu_460_p1(8-1 downto 0)))));
    lshr_ln674_4_fu_474_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv8_FF),to_integer(unsigned('0' & zext_ln674_4_fu_464_p1(8-1 downto 0)))));
    lshr_ln674_fu_536_p2 <= std_logic_vector(shift_right(unsigned(select_ln674_1_fu_509_p3),to_integer(unsigned('0' & zext_ln674_fu_528_p1(8-1 downto 0)))));
    p_Result_12_fu_695_p2 <= (and_ln414_2_fu_689_p2 or and_ln414_1_fu_683_p2);
    p_Result_13_fu_480_p2 <= (lshr_ln674_4_fu_474_p2 and lshr_ln674_3_fu_468_p2);
    p_Result_14_fu_548_p2 <= (lshr_ln674_fu_536_p2 and lshr_ln674_1_fu_542_p2);
    p_Result_15_fu_591_p2 <= (lshr_ln674_2_fu_585_p2 and ldata1_dout);
    p_Result_s_fu_569_p2 <= (p_Result_14_fu_548_p2 and lshr_ln414_fu_563_p2);
    p_Val2_4_fu_575_p3 <= 
        ap_const_lv8_0 when (icmp_ln1050_reg_781(0) = '1') else 
        p_Result_s_fu_569_p2;
    ptr_width_minus_fu_250_p3 <= 
        sub2_i_reg_737 when (bLast_fu_230_p2(0) = '1') else 
        ap_const_lv5_0;
    rem_1_fu_383_p2 <= std_logic_vector(signed(sext_ln1045_fu_257_p1) + signed(rem_fu_92));
    rem_2_fu_298_p2 <= std_logic_vector(unsigned(rem_fu_92) - unsigned(zext_ln1044_fu_242_p1));

    rows_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, rows_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            rows_blk_n <= rows_empty_n;
        else 
            rows_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    rows_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, rows_empty_n, cols_bound_per_npc_empty_n, last_blk_width_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (last_blk_width_empty_n = ap_const_logic_0) or (cols_bound_per_npc_empty_n = ap_const_logic_0) or (rows_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            rows_read <= ap_const_logic_1;
        else 
            rows_read <= ap_const_logic_0;
        end if; 
    end process;

    select_ln1057_fu_267_p3 <= 
        add_ln1057_reg_742 when (bLast_fu_230_p2(0) = '1') else 
        ap_const_lv5_F;
    select_ln414_1_fu_607_p3 <= 
        trunc_ln414_1_reg_826 when (icmp_ln414_reg_810(0) = '1') else 
        trunc_ln414_reg_818;
    select_ln414_2_fu_612_p3 <= 
        sub_ln414_1_fu_597_p2 when (icmp_ln414_reg_810(0) = '1') else 
        trunc_ln414_reg_818;
    select_ln414_3_fu_652_p3 <= 
        tmp_3_fu_642_p4 when (icmp_ln414_reg_810(0) = '1') else 
        shl_ln414_fu_636_p2;
    select_ln414_fu_602_p3 <= 
        trunc_ln414_reg_818 when (icmp_ln414_reg_810(0) = '1') else 
        trunc_ln414_1_reg_826;
    select_ln674_1_fu_509_p3 <= 
        tmp_2_fu_487_p4 when (icmp_ln674_reg_791(0) = '1') else 
        p_Val2_s_fu_96;
    select_ln674_2_fu_516_p3 <= 
        grp_fu_168_p2 when (icmp_ln674_reg_791(0) = '1') else 
        trunc_ln674_reg_798;
    select_ln674_3_fu_434_p3 <= 
        sub_ln674_4_fu_421_p2 when (icmp_ln674_1_reg_760(0) = '1') else 
        sub_ln674_6_fu_430_p2;
    select_ln674_4_fu_441_p3 <= 
        tmp_4_fu_411_p4 when (icmp_ln674_1_reg_760(0) = '1') else 
        p_Val2_s_fu_96;
    select_ln674_5_fu_448_p3 <= 
        sub_ln674_5_fu_425_p2 when (icmp_ln674_1_reg_760(0) = '1') else 
        trunc_ln674_1_reg_767;
    select_ln674_fu_502_p3 <= 
        add_ln674_fu_497_p2 when (icmp_ln674_reg_791(0) = '1') else 
        grp_fu_168_p2;
        sext_ln1045_fu_257_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ptr_width_minus_fu_250_p3),32));

        sext_ln1054_fu_345_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln1054_fu_339_p2),32));

    shl_ln414_1_fu_659_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv8_FF),to_integer(unsigned('0' & zext_ln414_2_fu_628_p1(8-1 downto 0)))));
    shl_ln414_fu_636_p2 <= std_logic_vector(shift_left(unsigned(p_Result_15_fu_591_p2),to_integer(unsigned('0' & zext_ln414_1_fu_624_p1(8-1 downto 0)))));
    sub2_i_fu_189_p2 <= std_logic_vector(unsigned(ap_const_lv5_8) - unsigned(last_blk_width_cast_i_fu_173_p1));
    sub_i_fu_183_p0 <= cols_bound_per_npc_dout;
    sub_i_fu_183_p2 <= std_logic_vector(signed(sub_i_fu_183_p0) + signed(ap_const_lv32_FFFFFFFF));
    sub_ln1057_fu_278_p2 <= std_logic_vector(unsigned(zext_ln1057_fu_274_p1) - unsigned(rem_fu_92));
    sub_ln414_1_fu_597_p2 <= std_logic_vector(unsigned(ap_const_lv4_7) - unsigned(trunc_ln414_reg_818));
    sub_ln414_2_fu_618_p2 <= std_logic_vector(unsigned(ap_const_lv4_7) - unsigned(select_ln414_fu_602_p3));
    sub_ln414_fu_554_p2 <= std_logic_vector(signed(ap_const_lv4_8) - signed(trunc_ln1051_reg_786));
    sub_ln674_2_fu_522_p2 <= std_logic_vector(unsigned(ap_const_lv4_7) - unsigned(select_ln674_fu_502_p3));
    sub_ln674_3_fu_357_p2 <= std_logic_vector(unsigned(trunc_ln1054_1_fu_353_p1) - unsigned(trunc_ln1054_fu_349_p1));
    sub_ln674_4_fu_421_p2 <= std_logic_vector(unsigned(trunc_ln674_1_reg_767) - unsigned(trunc_ln674_2_reg_775));
    sub_ln674_5_fu_425_p2 <= std_logic_vector(unsigned(ap_const_lv4_7) - unsigned(trunc_ln674_1_reg_767));
    sub_ln674_6_fu_430_p2 <= std_logic_vector(unsigned(trunc_ln674_2_reg_775) - unsigned(trunc_ln674_1_reg_767));
    sub_ln674_7_fu_454_p2 <= std_logic_vector(unsigned(ap_const_lv4_7) - unsigned(select_ln674_3_fu_434_p3));
    
    tmp_2_fu_487_p4_proc : process(p_Val2_s_fu_96)
    variable vlo_cpy : STD_LOGIC_VECTOR(8+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(8+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(8 - 1 downto 0);
    variable tmp_2_fu_487_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(8 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(8 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(8 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(3 - 1 downto 0) := ap_const_lv32_7(3 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(3 - 1 downto 0) := ap_const_lv32_0(3 - 1 downto 0);
        v0_cpy := p_Val2_s_fu_96;
        if (vlo_cpy(3 - 1 downto 0) > vhi_cpy(3 - 1 downto 0)) then
            vhi_cpy(3-1 downto 0) := std_logic_vector(8-1-unsigned(ap_const_lv32_0(3-1 downto 0)));
            vlo_cpy(3-1 downto 0) := std_logic_vector(8-1-unsigned(ap_const_lv32_7(3-1 downto 0)));
            for tmp_2_fu_487_p4_i in 0 to 8-1 loop
                v0_cpy(tmp_2_fu_487_p4_i) := p_Val2_s_fu_96(8-1-tmp_2_fu_487_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(3-1 downto 0)))));

        section := (others=>'0');
        section(3-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(3-1 downto 0)) - unsigned(vlo_cpy(3-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(8-1 downto 0)))));
        res_mask := res_mask(8-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        tmp_2_fu_487_p4 <= resvalue(8-1 downto 0);
    end process;

    
    tmp_3_fu_642_p4_proc : process(shl_ln414_fu_636_p2)
    variable vlo_cpy : STD_LOGIC_VECTOR(8+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(8+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(8 - 1 downto 0);
    variable tmp_3_fu_642_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(8 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(8 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(8 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(3 - 1 downto 0) := ap_const_lv32_7(3 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(3 - 1 downto 0) := ap_const_lv32_0(3 - 1 downto 0);
        v0_cpy := shl_ln414_fu_636_p2;
        if (vlo_cpy(3 - 1 downto 0) > vhi_cpy(3 - 1 downto 0)) then
            vhi_cpy(3-1 downto 0) := std_logic_vector(8-1-unsigned(ap_const_lv32_0(3-1 downto 0)));
            vlo_cpy(3-1 downto 0) := std_logic_vector(8-1-unsigned(ap_const_lv32_7(3-1 downto 0)));
            for tmp_3_fu_642_p4_i in 0 to 8-1 loop
                v0_cpy(tmp_3_fu_642_p4_i) := shl_ln414_fu_636_p2(8-1-tmp_3_fu_642_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(3-1 downto 0)))));

        section := (others=>'0');
        section(3-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(3-1 downto 0)) - unsigned(vlo_cpy(3-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(8-1 downto 0)))));
        res_mask := res_mask(8-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        tmp_3_fu_642_p4 <= resvalue(8-1 downto 0);
    end process;

    
    tmp_4_fu_411_p4_proc : process(p_Val2_s_fu_96)
    variable vlo_cpy : STD_LOGIC_VECTOR(8+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(8+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(8 - 1 downto 0);
    variable tmp_4_fu_411_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(8 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(8 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(8 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(3 - 1 downto 0) := ap_const_lv32_7(3 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(3 - 1 downto 0) := ap_const_lv32_0(3 - 1 downto 0);
        v0_cpy := p_Val2_s_fu_96;
        if (vlo_cpy(3 - 1 downto 0) > vhi_cpy(3 - 1 downto 0)) then
            vhi_cpy(3-1 downto 0) := std_logic_vector(8-1-unsigned(ap_const_lv32_0(3-1 downto 0)));
            vlo_cpy(3-1 downto 0) := std_logic_vector(8-1-unsigned(ap_const_lv32_7(3-1 downto 0)));
            for tmp_4_fu_411_p4_i in 0 to 8-1 loop
                v0_cpy(tmp_4_fu_411_p4_i) := p_Val2_s_fu_96(8-1-tmp_4_fu_411_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(3-1 downto 0)))));

        section := (others=>'0');
        section(3-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(3-1 downto 0)) - unsigned(vlo_cpy(3-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(8-1 downto 0)))));
        res_mask := res_mask(8-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        tmp_4_fu_411_p4 <= resvalue(8-1 downto 0);
    end process;

    tmp_fu_319_p4 <= grp_fu_163_p2(31 downto 3);
    trunc_ln1051_fu_315_p1 <= rem_fu_92(4 - 1 downto 0);
    trunc_ln1054_1_fu_353_p1 <= rem_fu_92(4 - 1 downto 0);
    trunc_ln1054_fu_349_p1 <= add_ln1054_fu_339_p2(4 - 1 downto 0);
    trunc_ln414_1_fu_379_p1 <= add_ln1054_fu_339_p2(4 - 1 downto 0);
    trunc_ln414_fu_375_p1 <= rem_fu_92(4 - 1 downto 0);
    trunc_ln674_1_fu_290_p1 <= grp_fu_163_p2(4 - 1 downto 0);
    trunc_ln674_2_fu_294_p1 <= sub_ln1057_fu_278_p2(4 - 1 downto 0);
    trunc_ln674_fu_335_p1 <= grp_fu_163_p2(4 - 1 downto 0);
    xf_bits_per_clock_fu_235_p3 <= 
        last_blk_width_1_reg_722 when (bLast_fu_230_p2(0) = '1') else 
        ap_const_lv4_8;
    xor_ln414_fu_677_p2 <= (ap_const_lv8_FF xor and_ln414_fu_671_p2);
    zext_ln1027_fu_211_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_reg_142),32));
    zext_ln1044_1_fu_246_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xf_bits_per_clock_fu_235_p3),5));
    zext_ln1044_fu_242_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xf_bits_per_clock_fu_235_p3),32));
    zext_ln1057_fu_274_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln1057_fu_267_p3),32));
    zext_ln414_1_fu_624_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln414_2_fu_612_p3),8));
    zext_ln414_2_fu_628_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln414_1_fu_607_p3),8));
    zext_ln414_3_fu_632_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln414_2_fu_618_p2),8));
    zext_ln414_fu_559_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln414_fu_554_p2),8));
    zext_ln674_1_fu_532_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln674_2_fu_522_p2),8));
    zext_ln674_2_fu_582_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln674_1_reg_805),8));
    zext_ln674_3_fu_460_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln674_5_fu_448_p3),8));
    zext_ln674_4_fu_464_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln674_7_fu_454_p2),8));
    zext_ln674_fu_528_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln674_2_fu_516_p3),8));
end behav;
