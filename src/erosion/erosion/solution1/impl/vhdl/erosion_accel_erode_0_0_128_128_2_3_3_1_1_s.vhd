-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity erosion_accel_erode_0_0_128_128_2_3_3_1_1_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    imgInput_417_dout : IN STD_LOGIC_VECTOR (7 downto 0);
    imgInput_417_empty_n : IN STD_LOGIC;
    imgInput_417_read : OUT STD_LOGIC;
    imgOutput_418_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    imgOutput_418_full_n : IN STD_LOGIC;
    imgOutput_418_write : OUT STD_LOGIC;
    p_src_1_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    p_src_1_empty_n : IN STD_LOGIC;
    p_src_1_read : OUT STD_LOGIC;
    p_src_2_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    p_src_2_empty_n : IN STD_LOGIC;
    p_src_2_read : OUT STD_LOGIC;
    p_kernel_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    p_kernel_ce0 : OUT STD_LOGIC;
    p_kernel_q0 : IN STD_LOGIC_VECTOR (7 downto 0) );
end;


architecture behav of erosion_accel_erode_0_0_128_128_2_3_3_1_1_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv4_9 : STD_LOGIC_VECTOR (3 downto 0) := "1001";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";

attribute shreg_extract : string;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal p_src_1_blk_n : STD_LOGIC;
    signal p_src_2_blk_n : STD_LOGIC;
    signal indvar_flatten_reg_127 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_reg_138 : STD_LOGIC_VECTOR (1 downto 0);
    signal j_reg_149 : STD_LOGIC_VECTOR (1 downto 0);
    signal p_src_1_read_reg_427 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal p_src_2_read_reg_432 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln372_fu_197_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln372_reg_437 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal add_ln372_fu_203_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal select_ln372_fu_215_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln372_reg_446 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln372_2_fu_255_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln372_2_reg_450 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln373_fu_278_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal trunc_ln344_fu_365_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln344_reg_510 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln345_fu_369_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln345_reg_515 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state2 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal grp_xferode_128_128_1_0_1_0_129_3_3_s_fu_160_ap_start : STD_LOGIC;
    signal grp_xferode_128_128_1_0_1_0_129_3_3_s_fu_160_ap_done : STD_LOGIC;
    signal grp_xferode_128_128_1_0_1_0_129_3_3_s_fu_160_ap_idle : STD_LOGIC;
    signal grp_xferode_128_128_1_0_1_0_129_3_3_s_fu_160_ap_ready : STD_LOGIC;
    signal grp_xferode_128_128_1_0_1_0_129_3_3_s_fu_160_imgInput_417_read : STD_LOGIC;
    signal grp_xferode_128_128_1_0_1_0_129_3_3_s_fu_160_imgOutput_418_din : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_xferode_128_128_1_0_1_0_129_3_3_s_fu_160_imgOutput_418_write : STD_LOGIC;
    signal ap_phi_mux_i_phi_fu_142_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal grp_xferode_128_128_1_0_1_0_129_3_3_s_fu_160_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal zext_ln374_1_fu_273_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal kernel_2_2_fu_66 : STD_LOGIC_VECTOR (7 downto 0);
    signal kernel_2_2_1_fu_70 : STD_LOGIC_VECTOR (7 downto 0);
    signal kernel_2_2_2_fu_74 : STD_LOGIC_VECTOR (7 downto 0);
    signal kernel_2_2_3_fu_78 : STD_LOGIC_VECTOR (7 downto 0);
    signal kernel_2_2_4_fu_82 : STD_LOGIC_VECTOR (7 downto 0);
    signal kernel_2_2_5_fu_86 : STD_LOGIC_VECTOR (7 downto 0);
    signal kernel_2_2_6_fu_90 : STD_LOGIC_VECTOR (7 downto 0);
    signal kernel_2_2_7_fu_94 : STD_LOGIC_VECTOR (7 downto 0);
    signal kernel_2_2_8_fu_98 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_shl_i_fu_183_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_cast_i_fu_179_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln373_fu_209_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln372_1_fu_223_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal p_shl_i_mid1_fu_233_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_cast_i_mid1_fu_229_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal mul_i_mid1_fu_241_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal mul_i_fu_191_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln374_fu_263_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln372_1_fu_247_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln374_fu_267_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;

    component erosion_accel_xferode_128_128_1_0_1_0_129_3_3_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        imgInput_417_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        imgInput_417_empty_n : IN STD_LOGIC;
        imgInput_417_read : OUT STD_LOGIC;
        imgOutput_418_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        imgOutput_418_full_n : IN STD_LOGIC;
        imgOutput_418_write : OUT STD_LOGIC;
        img_height : IN STD_LOGIC_VECTOR (15 downto 0);
        img_width : IN STD_LOGIC_VECTOR (15 downto 0);
        p_read : IN STD_LOGIC_VECTOR (7 downto 0);
        p_read1 : IN STD_LOGIC_VECTOR (7 downto 0);
        p_read2 : IN STD_LOGIC_VECTOR (7 downto 0);
        p_read3 : IN STD_LOGIC_VECTOR (7 downto 0);
        p_read4 : IN STD_LOGIC_VECTOR (7 downto 0);
        p_read5 : IN STD_LOGIC_VECTOR (7 downto 0);
        p_read6 : IN STD_LOGIC_VECTOR (7 downto 0);
        p_read7 : IN STD_LOGIC_VECTOR (7 downto 0);
        p_read8 : IN STD_LOGIC_VECTOR (7 downto 0) );
    end component;



begin
    grp_xferode_128_128_1_0_1_0_129_3_3_s_fu_160 : component erosion_accel_xferode_128_128_1_0_1_0_129_3_3_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_xferode_128_128_1_0_1_0_129_3_3_s_fu_160_ap_start,
        ap_done => grp_xferode_128_128_1_0_1_0_129_3_3_s_fu_160_ap_done,
        ap_idle => grp_xferode_128_128_1_0_1_0_129_3_3_s_fu_160_ap_idle,
        ap_ready => grp_xferode_128_128_1_0_1_0_129_3_3_s_fu_160_ap_ready,
        imgInput_417_dout => imgInput_417_dout,
        imgInput_417_empty_n => imgInput_417_empty_n,
        imgInput_417_read => grp_xferode_128_128_1_0_1_0_129_3_3_s_fu_160_imgInput_417_read,
        imgOutput_418_din => grp_xferode_128_128_1_0_1_0_129_3_3_s_fu_160_imgOutput_418_din,
        imgOutput_418_full_n => imgOutput_418_full_n,
        imgOutput_418_write => grp_xferode_128_128_1_0_1_0_129_3_3_s_fu_160_imgOutput_418_write,
        img_height => trunc_ln344_reg_510,
        img_width => trunc_ln345_reg_515,
        p_read => kernel_2_2_fu_66,
        p_read1 => kernel_2_2_1_fu_70,
        p_read2 => kernel_2_2_2_fu_74,
        p_read3 => kernel_2_2_3_fu_78,
        p_read4 => kernel_2_2_4_fu_82,
        p_read5 => kernel_2_2_5_fu_86,
        p_read6 => kernel_2_2_6_fu_90,
        p_read7 => kernel_2_2_7_fu_94,
        p_read8 => kernel_2_2_8_fu_98);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state5) and (grp_xferode_128_128_1_0_1_0_129_3_3_s_fu_160_ap_done = ap_const_logic_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((not(((ap_start = ap_const_logic_0) or (p_src_2_empty_n = ap_const_logic_0) or (p_src_1_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2))) then 
                    ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state2);
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                elsif ((not(((ap_start = ap_const_logic_0) or (p_src_2_empty_n = ap_const_logic_0) or (p_src_1_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_xferode_128_128_1_0_1_0_129_3_3_s_fu_160_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_xferode_128_128_1_0_1_0_129_3_3_s_fu_160_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                    grp_xferode_128_128_1_0_1_0_129_3_3_s_fu_160_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_xferode_128_128_1_0_1_0_129_3_3_s_fu_160_ap_ready = ap_const_logic_1)) then 
                    grp_xferode_128_128_1_0_1_0_129_3_3_s_fu_160_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_reg_138_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln372_reg_437 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                i_reg_138 <= select_ln372_2_reg_450;
            elsif ((not(((ap_start = ap_const_logic_0) or (p_src_2_empty_n = ap_const_logic_0) or (p_src_1_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_reg_138 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_127_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln372_fu_197_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                indvar_flatten_reg_127 <= add_ln372_fu_203_p2;
            elsif ((not(((ap_start = ap_const_logic_0) or (p_src_2_empty_n = ap_const_logic_0) or (p_src_1_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                indvar_flatten_reg_127 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    j_reg_149_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln372_fu_197_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                j_reg_149 <= add_ln373_fu_278_p2;
            elsif ((not(((ap_start = ap_const_logic_0) or (p_src_2_empty_n = ap_const_logic_0) or (p_src_1_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                j_reg_149 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln372_reg_437 <= icmp_ln372_fu_197_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((select_ln372_2_reg_450 = ap_const_lv2_0) and (select_ln372_reg_446 = ap_const_lv2_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then
                kernel_2_2_1_fu_70 <= p_kernel_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not((select_ln372_reg_446 = ap_const_lv2_1)) and not((select_ln372_reg_446 = ap_const_lv2_0)) and (select_ln372_2_reg_450 = ap_const_lv2_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then
                kernel_2_2_2_fu_74 <= p_kernel_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((select_ln372_2_reg_450 = ap_const_lv2_1) and (select_ln372_reg_446 = ap_const_lv2_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then
                kernel_2_2_3_fu_78 <= p_kernel_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((select_ln372_2_reg_450 = ap_const_lv2_1) and (select_ln372_reg_446 = ap_const_lv2_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then
                kernel_2_2_4_fu_82 <= p_kernel_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not((select_ln372_reg_446 = ap_const_lv2_1)) and not((select_ln372_reg_446 = ap_const_lv2_0)) and (select_ln372_2_reg_450 = ap_const_lv2_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then
                kernel_2_2_5_fu_86 <= p_kernel_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not((select_ln372_2_reg_450 = ap_const_lv2_1)) and not((select_ln372_2_reg_450 = ap_const_lv2_0)) and (select_ln372_reg_446 = ap_const_lv2_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then
                kernel_2_2_6_fu_90 <= p_kernel_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not((select_ln372_2_reg_450 = ap_const_lv2_1)) and not((select_ln372_2_reg_450 = ap_const_lv2_0)) and (select_ln372_reg_446 = ap_const_lv2_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then
                kernel_2_2_7_fu_94 <= p_kernel_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not((select_ln372_2_reg_450 = ap_const_lv2_1)) and not((select_ln372_reg_446 = ap_const_lv2_1)) and not((select_ln372_reg_446 = ap_const_lv2_0)) and not((select_ln372_2_reg_450 = ap_const_lv2_0)) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then
                kernel_2_2_8_fu_98 <= p_kernel_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((select_ln372_2_reg_450 = ap_const_lv2_0) and (select_ln372_reg_446 = ap_const_lv2_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then
                kernel_2_2_fu_66 <= p_kernel_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_start = ap_const_logic_0) or (p_src_2_empty_n = ap_const_logic_0) or (p_src_1_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                p_src_1_read_reg_427 <= p_src_1_dout;
                p_src_2_read_reg_432 <= p_src_2_dout;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln372_fu_197_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                select_ln372_2_reg_450 <= select_ln372_2_fu_255_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln372_fu_197_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                select_ln372_reg_446 <= select_ln372_fu_215_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                trunc_ln344_reg_510 <= trunc_ln344_fu_365_p1;
                trunc_ln345_reg_515 <= trunc_ln345_fu_369_p1;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, p_src_1_empty_n, p_src_2_empty_n, icmp_ln372_fu_197_p2, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, grp_xferode_128_128_1_0_1_0_129_3_3_s_fu_160_ap_done, ap_CS_fsm_state5)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_start = ap_const_logic_0) or (p_src_2_empty_n = ap_const_logic_0) or (p_src_1_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if (not(((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (icmp_ln372_fu_197_p2 = ap_const_lv1_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (icmp_ln372_fu_197_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state5) and (grp_xferode_128_128_1_0_1_0_129_3_3_s_fu_160_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;
    add_ln372_1_fu_223_p2 <= std_logic_vector(unsigned(ap_phi_mux_i_phi_fu_142_p4) + unsigned(ap_const_lv2_1));
    add_ln372_fu_203_p2 <= std_logic_vector(unsigned(indvar_flatten_reg_127) + unsigned(ap_const_lv4_1));
    add_ln373_fu_278_p2 <= std_logic_vector(unsigned(select_ln372_fu_215_p3) + unsigned(ap_const_lv2_1));
    add_ln374_fu_267_p2 <= std_logic_vector(unsigned(zext_ln374_fu_263_p1) + unsigned(select_ln372_1_fu_247_p3));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state4 <= ap_CS_fsm(2);
    ap_CS_fsm_state5 <= ap_CS_fsm(3);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state1_assign_proc : process(ap_start, ap_done_reg, p_src_1_empty_n, p_src_2_empty_n)
    begin
                ap_block_state1 <= ((ap_start = ap_const_logic_0) or (p_src_2_empty_n = ap_const_logic_0) or (p_src_1_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;

        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state2_assign_proc : process(icmp_ln372_fu_197_p2)
    begin
        if ((icmp_ln372_fu_197_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_done_reg, grp_xferode_128_128_1_0_1_0_129_3_3_s_fu_160_ap_done, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) and (grp_xferode_128_128_1_0_1_0_129_3_3_s_fu_160_ap_done = ap_const_logic_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_i_phi_fu_142_p4_assign_proc : process(i_reg_138, icmp_ln372_reg_437, ap_CS_fsm_pp0_stage0, select_ln372_2_reg_450, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (icmp_ln372_reg_437 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            ap_phi_mux_i_phi_fu_142_p4 <= select_ln372_2_reg_450;
        else 
            ap_phi_mux_i_phi_fu_142_p4 <= i_reg_138;
        end if; 
    end process;


    ap_ready_assign_proc : process(grp_xferode_128_128_1_0_1_0_129_3_3_s_fu_160_ap_done, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) and (grp_xferode_128_128_1_0_1_0_129_3_3_s_fu_160_ap_done = ap_const_logic_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    grp_xferode_128_128_1_0_1_0_129_3_3_s_fu_160_ap_start <= grp_xferode_128_128_1_0_1_0_129_3_3_s_fu_160_ap_start_reg;
    i_cast_i_fu_179_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_i_phi_fu_142_p4),4));
    i_cast_i_mid1_fu_229_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln372_1_fu_223_p2),4));
    icmp_ln372_fu_197_p2 <= "1" when (indvar_flatten_reg_127 = ap_const_lv4_9) else "0";
    icmp_ln373_fu_209_p2 <= "1" when (j_reg_149 = ap_const_lv2_3) else "0";

    imgInput_417_read_assign_proc : process(grp_xferode_128_128_1_0_1_0_129_3_3_s_fu_160_imgInput_417_read, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            imgInput_417_read <= grp_xferode_128_128_1_0_1_0_129_3_3_s_fu_160_imgInput_417_read;
        else 
            imgInput_417_read <= ap_const_logic_0;
        end if; 
    end process;

    imgOutput_418_din <= grp_xferode_128_128_1_0_1_0_129_3_3_s_fu_160_imgOutput_418_din;

    imgOutput_418_write_assign_proc : process(grp_xferode_128_128_1_0_1_0_129_3_3_s_fu_160_imgOutput_418_write, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            imgOutput_418_write <= grp_xferode_128_128_1_0_1_0_129_3_3_s_fu_160_imgOutput_418_write;
        else 
            imgOutput_418_write <= ap_const_logic_0;
        end if; 
    end process;

    mul_i_fu_191_p2 <= std_logic_vector(unsigned(p_shl_i_fu_183_p3) - unsigned(i_cast_i_fu_179_p1));
    mul_i_mid1_fu_241_p2 <= std_logic_vector(unsigned(p_shl_i_mid1_fu_233_p3) - unsigned(i_cast_i_mid1_fu_229_p1));
    p_kernel_address0 <= zext_ln374_1_fu_273_p1(4 - 1 downto 0);

    p_kernel_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            p_kernel_ce0 <= ap_const_logic_1;
        else 
            p_kernel_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    p_shl_i_fu_183_p3 <= (ap_phi_mux_i_phi_fu_142_p4 & ap_const_lv2_0);
    p_shl_i_mid1_fu_233_p3 <= (add_ln372_1_fu_223_p2 & ap_const_lv2_0);

    p_src_1_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, p_src_1_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            p_src_1_blk_n <= p_src_1_empty_n;
        else 
            p_src_1_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    p_src_1_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, p_src_1_empty_n, p_src_2_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (p_src_2_empty_n = ap_const_logic_0) or (p_src_1_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            p_src_1_read <= ap_const_logic_1;
        else 
            p_src_1_read <= ap_const_logic_0;
        end if; 
    end process;


    p_src_2_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, p_src_2_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            p_src_2_blk_n <= p_src_2_empty_n;
        else 
            p_src_2_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    p_src_2_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, p_src_1_empty_n, p_src_2_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (p_src_2_empty_n = ap_const_logic_0) or (p_src_1_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            p_src_2_read <= ap_const_logic_1;
        else 
            p_src_2_read <= ap_const_logic_0;
        end if; 
    end process;

    select_ln372_1_fu_247_p3 <= 
        mul_i_mid1_fu_241_p2 when (icmp_ln373_fu_209_p2(0) = '1') else 
        mul_i_fu_191_p2;
    select_ln372_2_fu_255_p3 <= 
        add_ln372_1_fu_223_p2 when (icmp_ln373_fu_209_p2(0) = '1') else 
        ap_phi_mux_i_phi_fu_142_p4;
    select_ln372_fu_215_p3 <= 
        ap_const_lv2_0 when (icmp_ln373_fu_209_p2(0) = '1') else 
        j_reg_149;
    trunc_ln344_fu_365_p1 <= p_src_1_read_reg_427(16 - 1 downto 0);
    trunc_ln345_fu_369_p1 <= p_src_2_read_reg_432(16 - 1 downto 0);
    zext_ln374_1_fu_273_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln374_fu_267_p2),64));
    zext_ln374_fu_263_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln372_fu_215_p3),4));
end behav;
